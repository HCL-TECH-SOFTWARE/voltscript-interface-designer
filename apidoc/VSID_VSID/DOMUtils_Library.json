{"label":"DOMUtils","comment":"Created Mar 8, 2010 by Andre Guirard/Cambridge/IBM\n \nVarious useful functions for working with the built-in DOM parser of LotusScript. Function names all start with DU_ to help in context assist","valuetype":"","filenamebase":"DOMUtils_Library","fqnprefix":"VSID","qn":"DOMUtils","codesample":"","signaturecode":65536,"instancecode":65536,"description":"","codesamplehtml":"","scriptcreator":"Devin Olson","signature":"Library DOMUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Created Mar 8, 2010 by Andre Guirard/Cambridge/IBM&lt;br /&gt; &lt;br /&gt;Various useful functions for working with the built-in DOM parser of LotusScript. Function names all start with DU_ to help in context assist&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Created Mar 8, 2010 by Andre Guirard/Cambridge/IBM&lt;br /&gt; &lt;br /&gt;Various useful functions for working with the built-in DOM parser of LotusScript. Function names all start with DU_ to help in context assist","inlinecomment":" \t &apos; Created Mar 8, 2010 by Andre Guirard/Cambridge/IBM\n \nVarious useful functions for working with the built-in DOM parser of LotusScript. Function names all start with DU_ to help in context assist", "methods":[{"label":"DU_GetChildNamed","comment":"Given a name and an element, find the first child of that element with the given tag name.","valuetype":"NotesDOMElementNode","filenamebase":"DUGetChildNamed_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetChildNamed","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(target As String, dome As NotesDOMElementNode)","signature":"Public Function DU_GetChildNamed(target As String, dome As NotesDOMElementNode) As NotesDOMElementNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Given a name and an element, find the first child of that element with the given tag name.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Given a name and an element, find the first child of that element with the given tag name.","inlinecomment":" \t &apos; Given a name and an element, find the first child of that element with the given tag name.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"target","comment":"Name of the element to retrieve","valuetype":"String","filenamebase":"target_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildNamed","qn":"target","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the element to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the element to retrieve","inlinecomment":" \t &apos; Name of the element to retrieve", "attributes":["ByVal"]},{"label":"dome","comment":"Node within which to search for the target child node. ","valuetype":"NotesDOMElementNode","filenamebase":"dome_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildNamed","qn":"dome","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node within which to search for the target child node. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node within which to search for the target child node. ","inlinecomment":" \t &apos; Node within which to search for the target child node. "}]},{"label":"DU_GetChildOfType","comment":"Get the first child of an element node that has a particular type.","valuetype":"NotesDOMNode","filenamebase":"DUGetChildOfType_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetChildOfType","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(elParent As NotesDOMElementNode, seekType As Long)","signature":"Public Function DU_GetChildOfType(elParent As NotesDOMElementNode, seekType As Long) As NotesDOMNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Get the first child of an element node that has a particular type.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Get the first child of an element node that has a particular type.","inlinecomment":" \t &apos; Get the first child of an element node that has a particular type.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"elParent","comment":"node whose child we seek.","valuetype":"NotesDOMElementNode","filenamebase":"elParent_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildOfType","qn":"elParent","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;node whose child we seek.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"node whose child we seek.","inlinecomment":" \t &apos; node whose child we seek."},{"label":"seekType","comment":"the node type we want. Legal values:\n\t\t\tDOMNODETYPE_ELEMENT_NODE (1) \n\t\t\tDOMNODETYPE_TEXT_NODE (3) \n\t\t\tDOMNODETYPE_CDATASECTION_NODE (4) \n\t\t\tDOMNODETYPE_COMMENT_NODE (8) \n\t\t\t...and others but you&amp;apos;re unlikely to use them.","valuetype":"Long","filenamebase":"seekType_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildOfType","qn":"seekType","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the node type we want. Legal values:&lt;br /&gt;\t\t\tDOMNODETYPE_ELEMENT_NODE (1) &lt;br /&gt;\t\t\tDOMNODETYPE_TEXT_NODE (3) &lt;br /&gt;\t\t\tDOMNODETYPE_CDATASECTION_NODE (4) &lt;br /&gt;\t\t\tDOMNODETYPE_COMMENT_NODE (8) &lt;br /&gt;\t\t\t...and others but you&amp;apos;re unlikely to use them.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the node type we want. Legal values:&lt;br /&gt;\t\t\tDOMNODETYPE_ELEMENT_NODE (1) &lt;br /&gt;\t\t\tDOMNODETYPE_TEXT_NODE (3) &lt;br /&gt;\t\t\tDOMNODETYPE_CDATASECTION_NODE (4) &lt;br /&gt;\t\t\tDOMNODETYPE_COMMENT_NODE (8) &lt;br /&gt;\t\t\t...and others but you&amp;apos;re unlikely to use them.","inlinecomment":" \t &apos; the node type we want. Legal values:\n\t\t\tDOMNODETYPE_ELEMENT_NODE (1) \n\t\t\tDOMNODETYPE_TEXT_NODE (3) \n\t\t\tDOMNODETYPE_CDATASECTION_NODE (4) \n\t\t\tDOMNODETYPE_COMMENT_NODE (8) \n\t\t\t...and others but you&amp;apos;re unlikely to use them."}]},{"label":"DU_GetChildWithAttr","comment":"Find a child DOM node with an attribute that has a particular value.\n\t\t\nDoes not recurse into the tree; looking only for immediate descendants. ","valuetype":"NotesDOMElementNode","filenamebase":"DUGetChildWithAttr_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetChildWithAttr","codesample":"Set titleItem = DU_GetChildWithAttr(elView, &amp;quot;item&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;$title&amp;quot;, 1)\n\t\t&amp;apos; finds the first &amp;quot;item&amp;quot; element where name=&amp;apos;$title&amp;apos; (case insensitive). ","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(elParent As NotesDOMDocumentNode, targetElement As String, attrName As String, attrValue As String, flags As Long)","signature":"Public Function DU_GetChildWithAttr(elParent As NotesDOMDocumentNode, targetElement As String, attrName As String, attrValue As String, flags As Long) As NotesDOMElementNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Find a child DOM node with an attribute that has a particular value.&lt;br /&gt;\t\t&lt;br /&gt;Does not recurse into the tree; looking only for immediate descendants. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Find a child DOM node with an attribute that has a particular value.&lt;br /&gt;\t\t&lt;br /&gt;Does not recurse into the tree; looking only for immediate descendants. ","inlinecomment":" \t &apos; Find a child DOM node with an attribute that has a particular value.\n\t\t\nDoes not recurse into the tree; looking only for immediate descendants. ","codesamplehtml":"Set titleItem = DU_GetChildWithAttr(elView, &amp;quot;item&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;$title&amp;quot;, 1)&lt;br /&gt;\t\t&amp;apos; finds the first &amp;quot;item&amp;quot; element where name=&amp;apos;$title&amp;apos; (case insensitive). ", "signatureelements":["Public","Function"], "arguments":[{"label":"elParent","comment":"node whose children you want to search.","valuetype":"NotesDOMDocumentNode","filenamebase":"elParent_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildWithAttr","qn":"elParent","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;node whose children you want to search.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"node whose children you want to search.","inlinecomment":" \t &apos; node whose children you want to search."},{"label":"targetElement","comment":"element name of desired child node.","valuetype":"String","filenamebase":"targetElement_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildWithAttr","qn":"targetElement","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;element name of desired child node.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"element name of desired child node.","inlinecomment":" \t &apos; element name of desired child node.", "attributes":["ByVal"]},{"label":"attrName","comment":"attribute name you want to check.","valuetype":"String","filenamebase":"attrName_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildWithAttr","qn":"attrName","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;attribute name you want to check.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"attribute name you want to check.","inlinecomment":" \t &apos; attribute name you want to check.", "attributes":["ByVal"]},{"label":"attrValue","comment":"attribute value of element you&amp;apos;re looking for.","valuetype":"String","filenamebase":"attrValue_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildWithAttr","qn":"attrValue","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;attribute value of element you&amp;apos;re looking for.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"attribute value of element you&amp;apos;re looking for.","inlinecomment":" \t &apos; attribute value of element you&amp;apos;re looking for.", "attributes":["ByVal"]},{"label":"flags","comment":"string-matching flags to compare attribute, e.g. 1 for case insensitive.","valuetype":"Long","filenamebase":"flags_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetChildWithAttr","qn":"flags","argumentindex":5,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;string-matching flags to compare attribute, e.g. 1 for case insensitive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"string-matching flags to compare attribute, e.g. 1 for case insensitive.","inlinecomment":" \t &apos; string-matching flags to compare attribute, e.g. 1 for case insensitive.", "attributes":["ByVal"]}]},{"label":"DU_GetDocNode","comment":"Find the DOM &amp;quot;document&amp;quot; node from which a given node was derived.\n\t\t\nThe doc node is needed to create new nodes.","valuetype":"NotesDOMDocumentNode","filenamebase":"DUGetDocNode_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetDocNode","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(node As NotesDOMNode)","signature":"Public Function DU_GetDocNode(node As NotesDOMNode) As NotesDOMDocumentNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Find the DOM &amp;quot;document&amp;quot; node from which a given node was derived.&lt;br /&gt;\t\t&lt;br /&gt;The doc node is needed to create new nodes.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Find the DOM &amp;quot;document&amp;quot; node from which a given node was derived.&lt;br /&gt;\t\t&lt;br /&gt;The doc node is needed to create new nodes.","inlinecomment":" \t &apos; Find the DOM &amp;quot;document&amp;quot; node from which a given node was derived.\n\t\t\nThe doc node is needed to create new nodes.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"node","comment":"Node for which to find the Document node. ","valuetype":"NotesDOMNode","filenamebase":"node_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetDocNode","qn":"node","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node for which to find the Document node. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node for which to find the Document node. ","inlinecomment":" \t &apos; Node for which to find the Document node. "}]},{"label":"DU_GetNextElement","comment":"Given a DOM element, find its next sibling that&amp;apos;s an element\n\t\t\n(in other words, skip over text and other nodes).","valuetype":"NotesDOMElementNode","filenamebase":"DUGetNextElement_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetNextElement","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(elCur As NotesDOMElementNode)","signature":"Public Function DU_GetNextElement(elCur As NotesDOMElementNode) As NotesDOMElementNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Given a DOM element, find its next sibling that&amp;apos;s an element&lt;br /&gt;\t\t&lt;br /&gt;(in other words, skip over text and other nodes).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Given a DOM element, find its next sibling that&amp;apos;s an element&lt;br /&gt;\t\t&lt;br /&gt;(in other words, skip over text and other nodes).","inlinecomment":" \t &apos; Given a DOM element, find its next sibling that&amp;apos;s an element\n\t\t\n(in other words, skip over text and other nodes).","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"elCur","comment":"Node for which to find the next sibling. ","valuetype":"NotesDOMElementNode","filenamebase":"elCur_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetNextElement","qn":"elCur","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node for which to find the next sibling. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node for which to find the next sibling. ","inlinecomment":" \t &apos; Node for which to find the next sibling. "}]},{"label":"DU_GetTextChild","comment":"Return the first DOM text node which is a child of the specified node.","valuetype":"NotesDOMTextNode","filenamebase":"DUGetTextChild_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetTextChild","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(el As NotesDOMElementNode)","signature":"Public Function DU_GetTextChild(el As NotesDOMElementNode) As NotesDOMTextNode","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Return the first DOM text node which is a child of the specified node.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Return the first DOM text node which is a child of the specified node.","inlinecomment":" \t &apos; Return the first DOM text node which is a child of the specified node.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"el","comment":"Note from which to retrieve for the child node. ","valuetype":"NotesDOMElementNode","filenamebase":"el_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetTextChild","qn":"el","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Note from which to retrieve for the child node. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Note from which to retrieve for the child node. ","inlinecomment":" \t &apos; Note from which to retrieve for the child node. "}]},{"label":"DU_GetTextFromNode","comment":"Passed a DOM element node that has a text node as one of its children, return the text from that node.","valuetype":"String","filenamebase":"DUGetTextFromNode_Method","fqnprefix":"VSID.DOMUtils","qn":"DUGetTextFromNode","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(dome As NotesDOMElementNode)","signature":"Public Function DU_GetTextFromNode(dome As NotesDOMElementNode) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passed a DOM element node that has a text node as one of its children, return the text from that node.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passed a DOM element node that has a text node as one of its children, return the text from that node.","inlinecomment":" \t &apos; Passed a DOM element node that has a text node as one of its children, return the text from that node.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"dome","comment":"Node for which to retrieve the text of the child node. ","valuetype":"NotesDOMElementNode","filenamebase":"dome_ValuedElement","fqnprefix":"VSIDDOMUtilsDUGetTextFromNode","qn":"dome","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node for which to retrieve the text of the child node. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node for which to retrieve the text of the child node. ","inlinecomment":" \t &apos; Node for which to retrieve the text of the child node. "}]},{"label":"StreamToBase64","comment":"Convert a binary NotesStream to a string of Base64 data.\n\t\t\nThe output can be used as part of DXL data for importing.","valuetype":"String","filenamebase":"StreamToBase64_Method","fqnprefix":"VSID.DOMUtils","qn":"StreamToBase64","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(streamIn As NotesStream)","signature":"Public Function StreamToBase64(streamIn As NotesStream) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert a binary NotesStream to a string of Base64 data.&lt;br /&gt;\t\t&lt;br /&gt;The output can be used as part of DXL data for importing.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert a binary NotesStream to a string of Base64 data.&lt;br /&gt;\t\t&lt;br /&gt;The output can be used as part of DXL data for importing.","inlinecomment":" \t &apos; Convert a binary NotesStream to a string of Base64 data.\n\t\t\nThe output can be used as part of DXL data for importing.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"streamIn","comment":"Binary strem from which to get the base64 encoded data","valuetype":"NotesStream","filenamebase":"streamIn_ValuedElement","fqnprefix":"VSIDDOMUtilsStreamToBase64","qn":"streamIn","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Binary strem from which to get the base64 encoded data&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Binary strem from which to get the base64 encoded data","inlinecomment":" \t &apos; Binary strem from which to get the base64 encoded data"}]},{"label":"StreamToText","comment":"Convert a NotesStream to text in a specified character set.\n\t\t\nThe default is to interpret NotesStreams as Unicode unless they are attached to a file; this lets you override that. ","valuetype":"String","filenamebase":"StreamToText_Method","fqnprefix":"VSID.DOMUtils","qn":"StreamToText","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(streamIn As NotesStream, chrset As String)","signature":"Public Function StreamToText(streamIn As NotesStream, chrset As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert a NotesStream to text in a specified character set.&lt;br /&gt;\t\t&lt;br /&gt;The default is to interpret NotesStreams as Unicode unless they are attached to a file; this lets you override that. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert a NotesStream to text in a specified character set.&lt;br /&gt;\t\t&lt;br /&gt;The default is to interpret NotesStreams as Unicode unless they are attached to a file; this lets you override that. ","inlinecomment":" \t &apos; Convert a NotesStream to text in a specified character set.\n\t\t\nThe default is to interpret NotesStreams as Unicode unless they are attached to a file; this lets you override that. ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"streamIn","comment":"Stream to be converted to text. ","valuetype":"NotesStream","filenamebase":"streamIn_ValuedElement","fqnprefix":"VSIDDOMUtilsStreamToText","qn":"streamIn","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stream to be converted to text. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stream to be converted to text. ","inlinecomment":" \t &apos; Stream to be converted to text. "},{"label":"chrset","comment":"Character set to use for the conversion. ","valuetype":"String","filenamebase":"chrset_ValuedElement","fqnprefix":"VSIDDOMUtilsStreamToText","qn":"chrset","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Character set to use for the conversion. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Character set to use for the conversion. ","inlinecomment":" \t &apos; Character set to use for the conversion. ", "attributes":["ByVal"]}]},{"label":"TextToStream","comment":"Produce a stream in a specified character set without opening a file.\n\t\t\nUnfortunately the NotesStream.charset attribute will still be the default Unicode, but the bytes in the stream will be correct. \n\t\t\nAt some point we may be able to correcte this by assigning the Charset property and then adding text, but not yet.","valuetype":"NotesStream","filenamebase":"TextToStream_Method","fqnprefix":"VSID.DOMUtils","qn":"TextToStream","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(szText As String, chrset As String)","signature":"Public Function TextToStream(szText As String, chrset As String) As NotesStream","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Produce a stream in a specified character set without opening a file.&lt;br /&gt;\t\t&lt;br /&gt;Unfortunately the NotesStream.charset attribute will still be the default Unicode, but the bytes in the stream will be correct. &lt;br /&gt;\t\t&lt;br /&gt;At some point we may be able to correcte this by assigning the Charset property and then adding text, but not yet.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Produce a stream in a specified character set without opening a file.&lt;br /&gt;\t\t&lt;br /&gt;Unfortunately the NotesStream.charset attribute will still be the default Unicode, but the bytes in the stream will be correct. &lt;br /&gt;\t\t&lt;br /&gt;At some point we may be able to correcte this by assigning the Charset property and then adding text, but not yet.","inlinecomment":" \t &apos; Produce a stream in a specified character set without opening a file.\n\t\t\nUnfortunately the NotesStream.charset attribute will still be the default Unicode, but the bytes in the stream will be correct. \n\t\t\nAt some point we may be able to correcte this by assigning the Charset property and then adding text, but not yet.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"szText","comment":"Text to be converted to a stream","valuetype":"String","filenamebase":"szText_ValuedElement","fqnprefix":"VSIDDOMUtilsTextToStream","qn":"szText","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Text to be converted to a stream&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Text to be converted to a stream","inlinecomment":" \t &apos; Text to be converted to a stream"},{"label":"chrset","comment":"Character set to use","valuetype":"String","filenamebase":"chrset_ValuedElement","fqnprefix":"VSIDDOMUtilsTextToStream","qn":"chrset","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Character set to use&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Character set to use","inlinecomment":" \t &apos; Character set to use", "attributes":["ByVal"]}]},{"label":"Base64ToBinary","comment":"Given a string of base64-encoded data, write into a binary stream we are passed.\n\t\t\nThis is done rather than creating the stream here and returning it, so that you can stream directly into a file if you choose.","valuetype":"","filenamebase":"Base64ToBinary_Method","fqnprefix":"VSID.DOMUtils","qn":"Base64ToBinary","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(strBase64 As String, streamOut As NotesStream)","signature":"Public Sub Base64ToBinary(strBase64 As String, streamOut As NotesStream)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Given a string of base64-encoded data, write into a binary stream we are passed.&lt;br /&gt;\t\t&lt;br /&gt;This is done rather than creating the stream here and returning it, so that you can stream directly into a file if you choose.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Given a string of base64-encoded data, write into a binary stream we are passed.&lt;br /&gt;\t\t&lt;br /&gt;This is done rather than creating the stream here and returning it, so that you can stream directly into a file if you choose.","inlinecomment":" \t &apos; Given a string of base64-encoded data, write into a binary stream we are passed.\n\t\t\nThis is done rather than creating the stream here and returning it, so that you can stream directly into a file if you choose.","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"strBase64","comment":"Base64 encoded data string to be written to streamOut","valuetype":"String","filenamebase":"strBase64_ValuedElement","fqnprefix":"VSIDDOMUtilsBase64ToBinary","qn":"strBase64","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64 encoded data string to be written to streamOut&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64 encoded data string to be written to streamOut","inlinecomment":" \t &apos; Base64 encoded data string to be written to streamOut"},{"label":"streamOut","comment":"target stream to be written to","valuetype":"NotesStream","filenamebase":"streamOut_ValuedElement","fqnprefix":"VSIDDOMUtilsBase64ToBinary","qn":"streamOut","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;target stream to be written to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"target stream to be written to","inlinecomment":" \t &apos; target stream to be written to"}]}]}
