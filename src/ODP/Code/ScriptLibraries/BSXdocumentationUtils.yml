---
class: 512
flags: 0x2000
unid: OFF15467251A2CCE0A-ON0037573F862588C6
items:
  - name: $Comment
    type: text
    data: BaliSX Documentation Utilities
  - name: $DesignerVersion
    type: text
    data: 8.5.3
    signed: true
  - name: $Flags
    type: text
    data: s34Q
  - name: $PublicAccess
    type: text
    data: "1"
    signed: true
  - name: $ScriptLib
    type: text
    data: |
      '++LotusScript Development Environment:2:5:(Options):0:74
      
      %REM
      	Library BSXdocumentationUtils
      	Created Jun 2022 by Devin Olson/USA/PNPHCL
      	BaliSX Documentation Utilities
      	
      %END REM
      %REM
      	**********************************************************************
      	**********************************************************************
      		
          Copyright HCL America, Inc. 1999, 2023
      
         	Licensed under the Apache License, Version 2.0 (the "License");
          you may not use this file except in compliance with the License.
          You may obtain a copy of the License at
      
              http://www.apache.org/licenses/LICENSE-2.0
      
          Unless required by applicable law or agreed to in writing, software
          distributed under the License is distributed on an "AS IS" BASIS,
          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          See the License for the specific language governing permissions and
         	limitations under the License.
      
      	**********************************************************************
      	**********************************************************************
      %END REM
      Option Public
      Option Declare
      Use "baliListsCollections"
      Use "enhLogClassLite" 
      
      
      '++LotusScript Development Environment:2:5:(Forward):0:1
      Declare Class LabeledElement As StringList  
      Declare Class ValuedElement As LabeledElement  
      Declare Class CodeElement As ValuedElement
      Declare Class ExceptionElement As LabeledElement 
      Declare Class Variable As CodeElement
      Declare Class MajorElement As CodeElement
      Declare Class ObjectType As MajorElement 
      Declare Class VSID As MajorElement 	
      Declare Class VSIDwriter 
      Declare Class Method As CodeElement
      Declare Class ObjectClass As MajorElement 
      Declare Class Project As MajorElement 
      Declare Class VSE As Project 	
      Declare Class Library As Project 
      Declare Class Constant As CodeElement
      Declare Class Context 
      Declare Function getCodeElementInstanceType(instancecode&) As String 
      Declare Function getMajorElementsListItems(source As Variant, summarylinkprefix$) As StringList
      Declare Private Property Get LeftOFs As Variant 
      Declare Function sortFQNbyLabel(source As Variant) As StringQueue
      Declare Private Property Get SignatureBeginners As Variant 
      Declare Function getSignatureModifiers(source As Long) As StringQueue 
      Declare Static Function getVSIDwriter() As VSIDwriter 
      Declare Function generatePageHTML(taggedValues As StringList, apidoc As StringsCarrier, includeNavBar As Boolean) As StringQueue
      Declare Function getAdditionalPropertyKeys(code As Long) As Variant
      Declare Function getVSIDstubContent(key$) As StringsCarrierList
      Declare Function getSignatureCode(source As String) As Long 
      Declare Function getValuedElementLinkedSummariesHTML(source As Variant, parent As CodeElement) As StringQueue  
      Declare Private Function getLabeledElementKeywordHTML(labeledelements As Variant) As StringQueue  
      Declare Function getMajorElementsUnorderedList(source As Variant, label$, summarylinkprefix$) As String 
      Declare Function signatureCodeToInstanceCode(signaturecode As Long) As Long 
      Declare Function readTextFileToStringQueue(source$) As StringQueue 
      Declare Function getElementsDetail(elements As Variant, elementtypename As String) As StringQueue  
      Declare Function generateNavHTML(taggedValues As StringList, bsxstubid$, includeHeader As Boolean) As StringQueue
      Declare Static Function getInstanceCodes() As Variant
      Declare Private Function getMoustacheTagsLeadingText(source$) As StringList 
      Declare Function getMethodSummaries(methods As Variant) As StringQueue  
      Declare Function writeAPIdoc(taggedValues As StringList, source As StringQueue, target$) As Long 
      Declare Function getSignatureElements(source As Long) As StringQueue 
      Declare Static Function getContext() As Context 
      Declare Private Function getModifierElements(source As Long) As StringQueue 
      Declare Function getMethodsDetail(methods As Variant) As StringQueue  
      Declare Function getElementSummary(elements As Variant, elementtypename As String) As StringQueue  
      
      '++LotusScript Development Environment:2:5:(Declarations):0:10
      
      
      
      
      Private Const MODULE_NAME = |BSXdocumentationUtils|
      Private Const LIB_PREFIX = |Library: | & MODULE_NAME & |.| 
      
      Const SIGNATURE_VALUE_REMARK 	= 1
      
      Const SIGNATURE_VALUE_GET 		= 2
      Const SIGNATURE_VALUE_SET 		= 4
      
      Const SIGNATURE_VALUE_CONST 	= 8
      Const SIGNATURE_VALUE_VARIABLE 	= 16 
      
      Const SIGNATURE_VALUE_SUB 		= 32
      Const SIGNATURE_VALUE_FUNCTION	= 64 
      Const SIGNATURE_VALUE_EVENT 	= 128
      Const SIGNATURE_VALUE_PROPERTY 	= 256
      
      Const SIGNATURE_VALUE_TYPE 		= 512
      Const SIGNATURE_VALUE_CLASS 	= 1024 
      
      Const SIGNATURE_VALUE_PUBLIC 	= 2048
      Const SIGNATURE_VALUE_PRIVATE 	= 4096
      
      Const SIGNATURE_VALUE_STATIC 	= 8192
      Const SIGNATURE_VALUE_FINAL 	= 16384
      
      Const SIGNATURE_VALUE_VSE 		= 32768 
      Const SIGNATURE_VALUE_LIBRARY 	= 65536
      Const SIGNATURE_VALUE_VSID 		= 131072 ' Represents the entire instance of the VSID nsf
       
      
      Const ERR_INVALID_SIGNATURE_CODE = 1195
      Const MSG_INVALID_SIGNATURE_CODE = |The specified Signature code is invalid or resolves to conflicting Library, Class, Property, Method, or Modifier types.  |    
      
      
      Const FOLDERNAME_RESOURCES = |resources|
      Const FOLDERNAME_APIDOC = |apidoc| 
      Const FOLDERNAME_SCRIPT = |src|
      Const APIDOC_VERSION = |1.0.0|
      
      Const FRAMENAME_VSID = |vsidFrame|
      Const FRAMENAME_VSIDLIST = |vsidListFrame|
      Const FRAMENAME_CONTENT = |contentFrame|
      
      Const SUMMARY_ROW_HEADER_DEFAULT = |<tr><th class="colFirst">Name</th><th class="colOne">Type</th><th class="colLast">Comment</th></tr>|
      Const SUMMARY_ROW_HEADER_CONSTANT = |<tr><th class="colFirst">Name</th><th class="colOne">Value</th><th class="colLast">Comment</th></tr>|
      
      
      %REM ***************************************************************************
       ************************************************************************************
      	LSI_THREAD_xxxxx CONSTANTS  
      	LSI constants declared here to avoid conflicts with 
      	other libraries using lsconst.lss; which has its own 
      	%INCLUDE "lsprcval.lss" command.
      	
       ************************************************************************************
      %END REM *********************************************************************
      Private Const LIB_LSI_THREAD_LINE = 0
      Private Const LIB_LSI_THREAD_PROC = 1
      Private Const LIB_LSI_THREAD_MODULE = 2
      Private Const LIB_LSI_THREAD_VERSION = 3
      Private Const LIB_LSI_THREAD_LANGUAGE = 4
      Private Const LIB_LSI_THREAD_COUNTRY = 5
      Private Const LIB_LSI_THREAD_TICKS = 6
      Private Const LIB_LSI_THREAD_TICKS_PER_SEC = 7
      Private Const LIB_LSI_THREAD_PROCESS_ID = 8
      Private Const LIB_LSI_THREAD_TASK_ID = 9
      Private Const LIB_LSI_THREAD_CALLPROC = 10
      Private Const LIB_LSI_THREAD_CALLMODULE = 11
      Private Const LIB_LSI_THREAD_STACKINFO = 14  
      
      
      
      
      
      
      
       
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
       
      
      
      
      
      
      
      
      
      %REM
      	Class LabeledElement
      	Represents a single programmatic labeled element 
      %END REM
      Class LabeledElement As StringList  
      	
      	Private stringscarriers_ As StringsCarrierList
      	Private isCommentBlockSet_ As Boolean 
      	Private isCommentHTMLset_ As Boolean 
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |LabeledElement| 
      	End Property
      
      
      	%REM
      		Property Get Comment
      		Comment about the LabeledElement
      	%END REM
      	Property Get Comment As String
      		Comment = me.getValue(|comment|)   
      	End Property 
      
      	
      	%REM
      		Property Get Label
      		Label (Name) for the LabeledElement
      	%END REM
      	Property Get Label As String
      		Label = me.getValue(|label|)   
      	End Property 
      
      	
      
      
      	%REM
      		Property Get apiCommentBlock
      		HTML Comment Block about the LabeledElement
      	%END REM
      	Property Get apiCommentBlock As String
      		
      		Dim detail As StringList 
      		
      		If getContext().GeneratingAPIdoc Then 
      			If Not me.isCommentBlockSet_ Then 
      				If isBlankString(me.apiComment) Then
      					me.content_(|commentblock|) = ||
      				Else 
      					Set detail = New StringList() 
      					detail.setElementValue |commenthtml|, me.apiComment 
      					me.content_(|commentblock|) = detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|commentblock|)).joinContent(||)
      				End If
      	
      				me.isCommentBlockSet_ = True 
      			End If
      		End If 
      		
      		apiCommentBlock = me.getValue(|commentblock|)   
      	End Property 
      
      
      	%REM
      		Property Get apiComment
      		HTML Comment about the LabeledElement
      	%END REM
      	Property Get apiComment As String
      		If getContext().GeneratingAPIdoc Then 
      			If Not me.isCommentHTMLset_ Then 
      				me.content_(|commenthtml|) = Replace(me.Comment, CRLF, |<br />|)
      				me.isCommentHTMLset_ = True 
      			End If
      		End If 
      
      		apiComment = me.getValue(|commenthtml|)   
      	End Property 
      
      
      	%REM
      		Property Get apiDoc
      		Generated API Documentation about the object.
      	%END REM
      	Property Get apiDoc As StringsCarrier 
      		getContext().GeneratingAPIdoc = True 
      		Set apiDoc = me.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(CLASS_NAME))
      	End Property
      
      
      	%REM
      		Property Get Script
      		Generated Script Source Code for the object
      	%END REM
      	Property Get Script As StringQueue
      		On Error GoTo ErrorTrap
      
      		Dim result As StringQueue
      		
      		' BEGIN CODE
      		getContext().GeneratingScript = True 
      
      		Set result = New StringQueue() 
      		result.load me.replaceMoustacheTags(getVSIDstubContent(|vss|).getValue(CLASS_NAME))
      		
      	ExitPoint:
      		Set Script = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim tempstr$
      		Dim result As New StringList()
      		
      		
      		' BEGIN CODE
      		If Not me.isCommentBlockSet_ Then me.content_(|commentblock|) = me.apiCommentBlock 
      		
      		tempstr$ = me.Comment 
      		If isBlankString(tempstr$) Then 
      			me.content_(|inlinecomment|) = ||
      		Else 
      			me.content_(|inlinecomment|) = | | & HT & | ' | & tempstr$ 
      		End If
      		
      		Set result = StringList..TaggedValues
      		If getContext().GeneratingScript And Not isBlankString(tempstr$) Then result.setElementValue |comment|, tempstr$ & CRLF 
      		
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      	%REM
      		Property Get TaggedStringsCarriers
      		Tagged StringsCarriers for the Object. 
      		k = Tag
      		v = StringsCarrier  
      	%END REM
      	Property Get TaggedStringsCarriers As StringsCarrierList 
      		On Error GoTo ErrorTrap
      	
      		' exception variables
      		Dim extendedinfo List As String 
      
      		Dim result As StringsCarrierList 
      
      	
      		' BEGIN CODE
      		Set result = me.stringscarriers_ 
      	
      	ExitPoint: 
      		Set TaggedStringsCarriers = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Constructor
      		@param Label Label (Name) for the LabeledElement
      		@param Comment Comment about the LabeledElement
      	%END REM 
      	Sub New(Label As String, Comment As String) 
      		me.content_(|label|) = FullTrim(Label) 
      		me.content_(|comment|) = Comment 
      		Set me.stringscarriers_ = New StringsCarrierList()
      	End Sub 
      
      
      	%REM
      		Function replaceMoustacheTags
      		Replaces substring tags in a source StringsCarrier with string values from the object. 
      		
      		Searches a source StringsCarrier for instances of moustache tags matching the object's keys, and replaces them with the associated string values.
      		
      		Object's keys will be moustached prior to comparison, wrapped with double open and double close curly braces: {{key}}
      		
      		@param source StringsCarrier within which to search for tags 
      		
      		@return source string with all instances of object's keys replaced with associated string values  
      	%END REM
      	Function replaceMoustacheTags(source As StringsCarrier) As StringsCarrier
      		On Error GoTo ErrorTrap
      		
      		Dim tv As StringList 
      		Dim moustachetagleadingtext As StringList
      		Dim scl As StringsCarrierList 
      		Dim sc As StringsCarrier 
      		Dim result As New StringsCarrier()
      		
      		Dim sourcelines As Variant 
      		Dim strings As Variant 
      		Dim tags List As String 
      		
      		Dim tag$ 
      		Dim textline$ 
      		Dim leadingtexttags As Variant 
      		
      		
      		' BEGIN CODE
      		If (source Is Nothing) Then GoTo ExitPoint  
      		If Not source.hasContent Then GoTo ExitPoint 
      
      		' load the tags 	
      		Set tv = me.TaggedValues 
      		strings = tv.getContent() 
      		ForAll stringvalue In strings
      			tags(|{{| & ListTag(stringvalue) & |}}|) = stringvalue  
      		End ForAll	
      		
      		' get the StringsCarrierList for processing 
      		Set scl = me.TaggedStringsCarriers 
      		
      	
      		' process each string element in source
      		sourcelines = source.values 
      		ForAll sourcevalue In sourcelines 
      			textline$ = CStr(sourcevalue)
      			
      			If getBaliStrings().hasMoustacheTags(textline$) Then
      				' process standard tags 
      				ForAll replacevalue In tags
      					tag$ = ListTag(replacevalue)
      					textline$ = Replace(textline$, tag$, replacevalue)
      				End ForAll
      
      				' process remaining tags
      				Set moustachetagleadingtext = getMoustacheTagsLeadingText(textline$)
      				If moustachetagleadingtext.hasContent Then 
      					leadingtexttags = moustachetagleadingtext.getContent() 
      					ForAll leadingtext In leadingtexttags 
      						tag$ = ListTag(leadingtext)
      						If scl.hasTag(tag$) Then
      							textline$ = Replace(textline$, |{{| & tag$ & |}}|, ||)  
      							Set sc = scl.getValue(tag$)
      							If sc.hasContent Then 
      								strings = sc.values  
      								ForAll stringvalue In strings 
      									result.push CStr(leadingtext) & CStr(stringvalue) 		
      								End ForAll
      							End If 
      						End If
      					End ForAll
      					
      					If Not isBlankString(textline$) Then result.push textline$ 
      
      				Else 
      					result.push textline$ 	
      				End If
      				
      			Else 
      				result.push textline$ 	
      			End If
      
      		End ForAll
      	
      		
      	ExitPoint: 	
      		Set replaceMoustacheTags = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint
      	End Function
      
      End Class
      
      
      
      
      
      
      
      
      
      
      
      %REM
      	Class ValuedElement
      	Represents a single programmatic minor element (Constant, Variable, Argument, etc) 
      %END REM
      Class ValuedElement As LabeledElement  
      	
      	Private isargument_ As Boolean 
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |ValuedElement| 
      	End Property
      
      
      	%REM
      		Property Get isValueTypeObject
      		Flag indicating if the ValueType represents an Object
      	%END REM
      	Property Get isValueTypeObject As Boolean
      		isValueTypeObject = isTrue(me.getValue(|F_ReturnsObject|)) 
      	End Property 
      
      
      	%REM
      		Property Get ValueType
      		Value Type of the ValuedElement
      	%END REM
      	Property Get ValueType As String
      		Dim result$
      		 
      		result$ = me.getValue(|valuetype|)
      		If getContext().GeneratingAPIdoc Then 
      			Select Case Trim$(LCase$(StrRightBack(result$, |-|)))
      				Case |signed|, |unsigned|
      					result$ = StrLeftBack(result$, |-|)
      				Case Else 
      					' do nothing 
      			End Select
      		End If
      		
      		ValueType = result$ 
      	End Property 
      
      
      	%REM
      		Property Get FQNprefix
      		Fully Qualified Name Prefix for the Object
      	%END REM
      	Property Get FQNprefix As String
      		Dim chunks As Variant
      		Dim queue As StringQueue 
      		Dim result$ 
      		Dim i%
      
      		result$ = me.getValue(|fqnprefix|)   
      		If getContext().GeneratingAPIdoc Then 
      			chunks = Split(result$, |.|) 
      			If UBound(chunks) > LBound(chunks) Then 
      				Set queue = New StringQueue() 
      				For i = LBound(chunks) To UBound(chunks)
      					If i < UBound(chunks) Then 
      						If Not strCmp(CStr(chunks(i)), CStr(chunks(i + 1))) Then Call queue.push(CStr(chunks(i)))  
      					Else
      						Call queue.push(CStr(chunks(i))) 
      					End If				
      				Next  
      				
      				result$ = queue.joinContent(|.|) 
      				me.setElementValue |fqnprefix|, result$
      			End If
      		End If 
      		
      		FQNprefix = result$
      		
      	End Property 
      
      
      	%REM
      		Property Get FileNameBase
      		File Name Base for the Object
      	%END REM
      	Property Get FileNameBase As String
      		FileNameBase = me.getValue(|filenamebase|)   
      	End Property 
      
      
      	%REM
      		Property Get QN
      		Qualified Name of the Object 
      		
      		Does NOT include the FQNPrefix
      		
      		@return Qualified Name of the Object. 
      	%END REM
      	Property Get QN As String 
      		QN = me.getValue(|qn|) 
      	End Property
      
      
      	%REM
      		Property Get FQN
      		Fully Qualified Name of the Object 
      		
      		FQN is the FQNprefix (a constructor argument) concatenated (using a period character) with the object's Label.
      		NOTE: All whitespace in the FQN Prefix and Label will be removed.   
      		
      		@return Fully Qualified Name of the Object. 
      	%END REM
      	Property Get FQN As String 
      		Dim prefix$
      		 
      		prefix$ = me.FQNprefix
      		
      		If isBlankString(prefix$) Then FQN = me.QN Else FQN = prefix$ & |.| & me.QN 
      	End Property
      
      	%REM
      		Property Get AsType
      		String representing the "As xxxx" type of the object
      	%END REM
      	Property Get AsType As String 
      		On Error GoTo ErrorTrap 
      		
      		Dim extendedinfo List As String 
      		Dim result$
      		
      		' BEGIN CODE
      		extendedinfo(|Label|) = me.Label 
      		
      		If (Len(me.ValueType) > 0) Then
      			If me.isAnArray Then 
      				If getContext().GeneratingAPIdoc Then 
      					result$ = | As | & me.ValueType & | Array|
      				ElseIf getContext().GeneratingScript Then 
      					result$ = |() As | & me.ValueType
      				End If 
      			Else 
      				result$ = | As | & me.ValueType
      			End If 
      		End If
      	
      		If me.isAList Then result$ = | List| & result$
      			 
      	ExitPoint:
      		AsType = result$
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      
      	%REM
      		Property Get Signature
      		Signature of the Object 
      	%END REM
      	Property Get Signature As String 
      		Signature = me.Label & me.AsType 
      	End Property
      
      
      	%REM
      		Property Get Attributes
      		Attributes carried by the object. 
      		
      		@return StringsCarrier containing the Attributes of the object.   
      	%END REM
      	Property Get Attributes As StringsCarrier
      		If me.hasAttributes Then Set Attributes = me.stringscarriers_.getValue(|attributes|)
      	End Property
      
      
      	%REM
      		Property Get hasAttributes
      		Flag indicating if the object has Attributes 
      	%END REM
      	Property Get hasAttributes As Boolean 
      		Dim sc As StringsCarrier 
      		
      		If me.stringscarriers_.hasTag(|attributes|) Then 
      			Set sc = me.stringscarriers_.getValue(|attributes|)	
      			If Not (sc Is Nothing) Then hasAttributes = sc.hasContent 
      		End If
      	End Property
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		
      		Dim result$
      		
      		' BEGIN CODE
      		result$ = LabeledElement..JSON
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1)
      		
      		If me.hasAttributes Then result$ = result$ & |, "attributes":| & me.Attributes.JSON
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      	%REM
      		Property Get isArgument
      		Flag indicating if the ValuedElement is an Argument  
      	%END REM
      	Property Get isArgument As Boolean 
      		isArgument = me.isargument_ 
      	End Property
      
      	%REM
      		Property Get isAnArray
      		Flag indicating if the Object is an Array 
      	%END REM
      	Property Get isAnArray As Boolean
      		If me.hasAttributes Then isAnArray = me.Attributes.contains(|Array|)
      	End Property 
      
      
      	%REM
      		Property Get isAList
      		Flag indicating if the Object is a List 
      	%END REM
      	Property Get isAList As Boolean
      		If me.hasAttributes Then isAList = me.Attributes.contains(|List|)
      	End Property 
      
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim result As New StringList()
      		Dim attribs As New StringsCarrier()  
      		Dim detail As StringList
      		
      		Dim values As Variant 
      		Dim optionalvalue$   
      		
      		
      		' BEGIN CODE
      		Set result = LabeledElement..TaggedValues
      		result.setElementValue |fqn|, me.FQN 
      		
      		If me.hasAttributes Then 
      			Call attribs.load(me.Attributes)
      
      			optionalvalue$ = result.getValue(|optionalvalue|)
      			If Not isBlankString(optionalvalue$) Then attribs.push |OptionalValue: | & optionalvalue$ 
      			result.setElementValue |attributes|, attribs.joinContent(|, |)
      			result.setElementValue |attributeshtml|, attribs.joinContent(|,<br />|)
      			result.setElementValue |attribs|, |[| & attribs.joinContent(|, |) & |]|
      		Else 
      			result.setElementValue |attributes|, ||
      			result.setElementValue |attributeshtml|, ||
      			result.setElementValue |attribs|, ||
      		End If		
      		
      		If result.hasTag(|argumentindex|) Then 
      			me.isargument_ = Not isBlankString(result.getValue(|argumentindex|)) 
      		Else 
      			result.setElementValue |argumentindex|, ||
      		End If
      
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      	%REM
      		Property Get Script
      		Generated BaliScript Source Code for the object
      	%END REM
      	Property Get Script As StringQueue
      		On Error GoTo ErrorTrap
      
      		Dim result As StringQueue
      		
      		' BEGIN CODE
      		getContext().GeneratingScript = True 
      		
      		' verify isArgument
      		If me.hasTag(|argumentindex|) Then me.isargument_ = Not isBlankString(me.getValue(|argumentindex|)) 
      		If me.isArgument Then
      			Set result = New StringQueue() 
      			result.load me.replaceMoustacheTags(getVSIDstubContent(|vss|).getValue(|ArgumentRemark|))
      		Else 
      			Set result = LabeledElement..Script 
      		End If
      		
      		
      	ExitPoint:
      		Set Script = result
      		' do not set isGeneratingScript_ back to false here!  Only do so in final child-level classes! 
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint
      	End Property
      
      
      
      	%REM
      		Constructor
      		@param FQNprefix Fully Qualified Name Prefix for the Object
      		@param Label Label (Name) for the ValuedElement
      		@param ValueType Value Type of the ValuedElement
      		@param Comment Comment about the ValuedElement
      	%END REM 
      	Sub New(FQNprefix As String, Label As String, ValueType As String, Comment As String), LabeledElement(Label, Comment) 
      		
      		Dim sc As New StringsCarrier() 
      		
      		Dim cleanedFQNprefix$ 
      		Dim cleanedLabel$
      		Dim cleanedValueType$ 
      	
      		cleanedValueType$ = FullTrim(ValueType) 
      		me.content_(|valuetype|) = cleanedValueType$
      		
      		
      		cleanedLabel$ = getBaliStrings().alphanumericOnly(FullTrim(Label))
      		cleanedFQNprefix$ = getBaliStrings().alphanumericOnly(FullTrim(FQNprefix))
      
      		If getContext().GeneratingAPIdoc Then 
      			%REM 	DEVELOPER NOTE
      			' ************************************************************
      				_CLASS_NAME suffix appended to cleanedLabel to avoid 
      				filepath collisions in the event that a VSID database 
      				contains like-named VSEs, Libraries, Classes, etc.  
      			' ************************************************************
      			%END REM 	
      			me.content_(|filenamebase|) = getBaliStrings().filenameify(cleanedLabel$ & |_| & CLASS_NAME)
      		Else 
      			me.content_(|filenamebase|) = getBaliStrings().filenameify(cleanedLabel$)
      		End If 
      
      		me.content_(|fqnprefix|) = cleanedFQNprefix$
      		me.content_(|qn|) = cleanedLabel$
      		me.stringscarriers_.setElementValue |attributes|, sc  
      	End Sub 
      
      
      	%REM
      		Sub appendAttribute
      		appends an Attribute to the object
      		
      		@param attribute$ Attribute to append. 
      	%END REM
      	Sub appendAttribute(attribute$)
      		Call me.stringscarriers_.getValue(|attributes|).push(attribute$) 
      	End Sub
      
      	%REM
      		Function removeAttribute
      		removes an Attribute from the object.
      		
      		@param attribute$ Attribute to be removed. 
      		
      		@return Flag indicating if the Attribute was found and removed.  
      	%END REM
      	Function removeAttribute(attribute$) As Boolean
      		removeAttribute = me.stringscarriers_.getValue(|attributes|).yank(attribute$) 
      	End Function
      
      
      End Class
      
      
      
      %REM
      	Class CodeElement
      	Represents a block of code 
      %END REM
      Class CodeElement As ValuedElement
      	
      	Private isCodeSampleHTMLset_ As Boolean 
      	Private isInstanceTypeRemarkset_ As Boolean 
      	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |CodeElement| 
      	End Property
      	
      	Private parent_ As CodeElement 
      	
      	
      
      	%REM
      		Property Get CodeSample
      		Sample Code for the CodeElement
      	%END REM
      	Property Get CodeSample As String
      		CodeSample = me.getValue(|codesample|)   
      	End Property 
      
      
      	%REM
      		Property Get CodeSampleHTML
      		HTML Sample Code for the CodeElement
      	%END REM
      	Property Get CodeSampleHTML As String
      		If getContext().GeneratingAPIdoc Then
      			If Not me.isCodeSampleHTMLset_ Then 
      				me.content_(|codesamplehtml|) = Replace(me.CodeSample, CRLF, |<br />|)
      				me.isCodeSampleHTMLset_ = True 
      			End If
      		End If 
      
      		CodeSampleHTML = me.getValue(|codesamplehtml|)  
      	End Property 
      
      
      	%REM
      		Property Get isClass
      		Flag indicating if the CodeElement represents a Class 
      	%END REM
      	Property Get isClass As Boolean 
      		isClass = (SIGNATURE_VALUE_CLASS = (Me.SignatureCode And SIGNATURE_VALUE_CLASS))
      	End Property
      	
      
      	%REM
      		Property Get isLibrary
      		Flag indicating if the CodeElement represents a Library 
      	%END REM
      	Property Get isLibrary As Boolean 
      		isLibrary = (SIGNATURE_VALUE_LIBRARY = (Me.SignatureCode And SIGNATURE_VALUE_LIBRARY))
      	End Property
      	
      
      	%REM
      		Property Get isType
      		Flag indicating if the CodeElement represents a Type 
      	%END REM
      	Property Get isType As Boolean 
      		isType = (SIGNATURE_VALUE_TYPE = (Me.SignatureCode And SIGNATURE_VALUE_TYPE))
      	End Property
      	
      
      	%REM
      		Property Get isVSE
      		Flag indicating if the CodeElement represents a VSE 
      	%END REM
      	Property Get isVSE As Boolean 
      		isVSE = (SIGNATURE_VALUE_VSE = (Me.SignatureCode And SIGNATURE_VALUE_VSE))
      	End Property
      	
      
      	%REM
      		Property Get isVSID
      		Flag indicating if the CodeElement represents a VSID 
      	%END REM
      	Property Get isVSID As Boolean 
      		isVSID = (SIGNATURE_VALUE_VSID = (Me.SignatureCode And SIGNATURE_VALUE_VSID))
      	End Property
      	
      
      	%REM
      		Property Get InstanceCode
      		Long code indicating the Instance Code for the Type (such as Sub, Function, or Property)
      	%END REM
      	Property Get InstanceCode As Long
      		On Error GoTo ErrorTrap 
      		
      		Const TAG = |instancecode| 
      		
      		Dim extendedinfo List As String 
      
      		Dim value$
      		Dim result&
      		
      		' BEGIN CODE
      		value$ = me.getValue(TAG)
      		extendedinfo(TAG) = value$
      		
      		If isBlankString(value$) Then 
      			result& = signatureCodeToInstanceCode(me.SignatureCode)
      			If (0 <> result&) Then Call me.setElementValue(TAG, CStr(result&)) 
      		Else 
      			result& = CLng(value$) 
      		End If
      		
      	ExitPoint:
      		InstanceCode = result& 
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property 
      	
      	
      	%REM
      		Property Get InstanceType
      		String representing the Instance Type (such as Sub, Function, or Property)
      	%END REM
      	Property Get InstanceType As String
      		On Error GoTo ErrorTrap
      		
      		Dim extendedinfo List As String 
      		Dim result$ 
      		Dim ic& 
      		
      		
      		' BEGIN CODE
      		ic& = me.InstanceCode 
      		extendedinfo(|me.InstanceCode|) = CStr(ic&) 
      		If (0 <> ic&) Then result$ = getCodeElementInstanceType(ic&) 
      		
      	ExitPoint:
      		InstanceType = result$ 
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo		
      		Resume ExitPoint
      	End Property 
      	
      	
      
      	%REM
      		Property Get SignatureCode
      		Long code indicating the Instance Element Type (such as Sub, Function, or Property) along with all modifiers (such as Public, Private, etc) of the Signature
      	%END REM
      	Property Get SignatureCode As Long
      		SignatureCode = CLng(me.getValue(|signaturecode|))  
      	End Property 
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		Dim sq As New StringQueue()
      		Dim result$
      		
      		' BEGIN CODE
      		result$ = ValuedElement..JSON
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      
      		Set sq = getSignatureElements(me.SignatureCode) 
      		result$ = result$ & |, "signatureelements":| & sq.JSON
      
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      	Property Get SignatureElements As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sq As StringQueue
      		Dim result$
      		
      		
      		' BEGIN CODE 
      		Set sq = getSignatureElements(me.SignatureCode) 
      		If sq.hasContent Then result$ = sq.joinContent(| |)
      		
      	ExitPoint:
      		SignatureElements = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint		
      	End Property
      
      
      	Property Get SignatureModifiers As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sq As New StringQueue()
      		Dim result$
      		
      		
      		' BEGIN CODE 
      		Set sq = getSignatureModifiers(me.SignatureCode) 
      		If sq.hasContent Then result$ = sq.joinContent(| |)
      		
      	ExitPoint:
      		SignatureModifiers = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint		
      	End Property
      
      	Property Get SignaturePrefix As String 
      		SignaturePrefix = Trim$(me.SignatureElements & | | & me.Label) 
      	End Property
      
      	%REM
      		Property Get Signature
      		Signature of the Object 
      	%END REM
      	Property Get Signature As String  
      		Signature = me.SignaturePrefix & me.AsType 
      	End Property
      
      
      	Property Get Modifiers As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sq As New StringQueue()
      		Dim result$
      		
      
      		Set sq = getModifierElements(me.SignatureCode) 
      		result$ = sq.joinContent(| |)
      		
      	ExitPoint:
      		Modifiers = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint		
      	End Property
      
      	%REM
      		Property Get Parent
      		Parent object for the CodeElement
      	%END REM
      	Property Get Parent As CodeElement 
      		Set Parent = me.parent_ 
      	End Property
      
      
      	%REM
      		Property Get ParentClass
      		Parent ObjectClass for the CodeElement
      	%END REM
      	Property Get ParentClass As ObjectClass
      		On Error GoTo ErrorTrap 
      		
      		Dim extendedinfo List As String
      		 
      		Dim result As ObjectClass
      		
      		' BEGIN CODE
      		If (me.parent_ Is Nothing) Then GoTo ExitPoint
      		
      		extendedinfo(|Parent Signature|) = me.parent_.Signature  
      		
      		If me.parent_.InstanceCode = SIGNATURE_VALUE_CLASS Then Set result = me.parent_ 
      		
      	ExitPoint: 
      		Set ParentClass = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint		
      	End Property
      
      
      	%REM
      		Property Get ParentClassName
      		Parent Class Name of the Class
      	%END REM
      	Property Get ParentClassName As String
      		On Error GoTo ErrorTrap 
      		
      		Dim extendedinfo List As String
      		 
      		Dim result$
      		
      		result$ = me.getValue(|parentclassname|) 
      		If isBlankString(result$) Then 
      			If Not (me.ParentClass Is Nothing) Then Call me.setElementValue(|parentclassname|, me.ParentClass.Label)
      		End If 
      		
      	ExitPoint: 
      		ParentClassName = result$
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint				
      	End Property 
      
      
      
      
      	%REM
      		Property Get ParentProject
      		Parent Project for the CodeElement
      	%END REM
      	Property Get ParentProject As Project 
      		On Error GoTo ErrorTrap
      		
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim pc As ObjectClass 
      		Dim result As Project
      		
      		' BEGIN CODE
      		If (me.parent_ Is Nothing) Then GoTo ExitPoint
      		extendedinfo(|me.parent.InstanceCode|) = CStr(me.parent_.InstanceCode)
      		extendedinfo(|me.parent.InstanceType|) = CStr(me.parent_.InstanceType)
      		
      
      		Select Case me.parent_.InstanceCode 
      			Case SIGNATURE_VALUE_LIBRARY, SIGNATURE_VALUE_VSE 
      				Set result = me.parent_
      				
      			Case SIGNATURE_VALUE_CLASS
      				Set pc = me.parent_ 
      				Set result = pc.ParentProject 				 
      
      			Case Else 
      				' do nothing					
      				
      		End Select 
      		
      		
      	ExitPoint: 
      		Set ParentProject = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		
      		Dim extendedinfo List As String 
      		
      		Dim result As New StringList()
      		Dim detail As StringList 
      		
      		' BEGIN CODE
      		Call me.updateInternalContent()
      		Set result = ValuedElement..TaggedValues
      		
      		extendedinfo(|instancecode|) = CStr(me.InstanceCode) 
      		extendedinfo(|instancetype|) = me.InstanceType 
      		extendedinfo(|parentclassname|) = me.ParentClassName 
      		
      		result.setElementValue |instancecode|, CStr(me.InstanceCode)   
      		result.setElementValue |instancetype|, me.InstanceType  
      		result.setElementValue |parentclassname|, me.ParentClassName
      
      
      		
      		If getContext().GeneratingAPIdoc Then
      			result.setElementValue |signaturemodifierscsv|, Join(Split(FullTrim(Me.SignatureModifiers), | |), |, |)
      			result.setElementValue |signaturemodifiers|, Me.SignatureModifiers
      			result.setElementValue |signatureelements|, Me.SignatureElements
      			result.setElementValue |signatureprefix|, Me.SignaturePrefix
      			result.setElementValue |astype|, me.AsType 	
      
      			If isBlankString(me.CodeSampleHTML) Then
      				result.setElementValue |codesampleblock|,  ||
      			Else 
      				Set detail = New StringList() 
      				detail.setElementValue |codesamplehtml|,  me.CodeSampleHTML  
      				result.setElementValue |codesampleblock|,  detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|CodeSampleBlock|)).joinContent(||)
      			End If
      		End If 
      
      
      	ExitPoint:
      			Set TaggedValues = result
      			Exit Property
      	ErrorTrap:
      			On Error GoTo 0
      			pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      			Resume ExitPoint 
      	End Property
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param Label Label (Name) for the CodeElement
      		@param ValueType Value Type of the CodeElement
      		@param Comment Comment about the CodeElement
      		@param CodeSample any sample code for the CodeElement
      		@param SignatureCode Long indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the CodeElement
      
      		@throws ERR_INVALID_SIGNATURE_CODE if SignatureCode conflicts with self or not valid for the object for the object 
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long), ValuedElement(||, Label, ValueType, Comment) 
      		On Error GoTo ErrorTrap
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		
      		Dim parentfqn$
      		Dim ic&
      
      		
      		' Check for conflicting signature codes 
      		Call getSignatureElements(SignatureCode) ' method will throw exception on conflicting signatue code
      		
      		' if here then no error.	
      		If Not (Parent Is Nothing) Then 
      			parentfqn$ = Parent.FQN 
      			me.content_(|fqnprefix|) = Join(Split(FullTrim(parentfqn$), | |), ||) 
      			Set me.parent_ = Parent 
      		End If  
      
      		me.content_(|codesample|) = CodeSample 
      		me.content_(|signaturecode|) = CStr(SignatureCode)  
      		
      		ic& = signatureCodeToInstanceCode(SignatureCode)
      		If 0 <> ic& Then me.content_(|instancecode|) = CStr(ic&)  
      		
      	ExitPoint:
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$()
      		Resume ExitPoint 
      	End Sub 
      
      	
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()  
      		me.content_(|signature|) = me.Signature
      		me.content_(|modifiers|) = me.Modifiers  
      	End Sub
      
      End Class
      
      
      
      %REM
      	Class ExceptionElement
      	Represents a single programmatic Exception 
      %END REM
      Class ExceptionElement As LabeledElement 
      	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |ExceptionElement| 
      	End Property
      	
      	
      	%REM
      		Property Get ErrCode
      		Error Code for the ExceptionElement
      	%END REM
      	Property Get ErrCode As Integer
      		On Error GoTo ErrorTrap 
      		
      		Dim result% 
      		result% = CInt(me.getValue(|errcode|)) 
      		
      	ExitPoint:
      		ErrCode = result%
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0 
      		result% = 0 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint   
      	End Property 
      
      
      	%REM
      		Constructor
      		@param Label Label (Name) for the ExceptionElement
      		@param Comment Comment about the ExceptionElement
      		@param ErrCode Numeric Error Code for the ExceptionElement 
      	%END REM 
      	Sub New(Label As String, Comment As String, ErrCode As Integer), LabeledElement(Label, Comment)  
      		me.content_(|errcode|) = CStr(ErrCode) 
      	End Sub 
      
      
      End Class
      
      
      %REM
      	Class Variable
      	Represents a Variable 
      %END REM
      Class Variable As CodeElement
      	
      	Private inType_ As Boolean ' Flag indicating the Variable's Parent object is an ObjectType  
      	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |Variable| 
      	End Property
      
      	Property Get SignatureElements As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sq As New StringQueue()
      		Dim result$
      		
      		
      		' BEGIN CODE
      		result$ = CodeElement..SignatureElements
      		
      		If getContext().GeneratingScript And (SIGNATURE_VALUE_LIBRARY = me.Parent.InstanceCode) Then 
      			' Library-Level variables MUST begin with either an explicit scope declaration or the reserved word "Dim" 
      			If getBaliStrings().beginsWith(LCase$(result$), |public|) Then GoTo ExitPoint 
      			If getBaliStrings().beginsWith(LCase$(result$), |private|) Then GoTo ExitPoint
      			result$ = Trim$(|Dim | & result$)
      		End If   
      			
      	ExitPoint:
      		SignatureElements = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint		
      	End Property
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param Label Label (Name) for the Object
      		@param ValueType Value Type of the Object
      		@param Comment Comment about the Object
      		@param CodeSample any sample code for the Object
      		@param SignatureCode Long indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the Object
      
      		@throws ERR_INVALID_SIGNATURE_CODE if SignatureCode conflicts with self or not valid for the object for the object 
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)
      		Dim sc& 
      		Dim ic&
      		
      		If strCmp(|ObjectType|, TypeName(Parent)) Then 
      			me.inType_ = True
      			sc& = SignatureCode 
      			
      			If (SIGNATURE_VALUE_PUBLIC = (sc& And SIGNATURE_VALUE_PUBLIC)) Then sc& = sc& - SIGNATURE_VALUE_PUBLIC
      			If (SIGNATURE_VALUE_PRIVATE = (sc& And SIGNATURE_VALUE_PRIVATE)) Then sc& = sc& - SIGNATURE_VALUE_PRIVATE
      
      			If sc& <> SignatureCode Then 
      				' variables within Types may not have scope 
      				me.content_(|signaturecode|) = CStr(sc&)  
      				
      				ic& = signatureCodeToInstanceCode(sc&)
      				If 0 <> ic& Then me.content_(|instancecode|) = CStr(ic&)  
      			End If			
      		End If   		
      	End Sub 
      	
      End Class
      
      
      
      %REM
      	Class MajorElement
      	Represents a major code Object, such as a Class or a Library 
      %END REM
      Class MajorElement As CodeElement
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |MajorElement| 
      	End Property
      
      	Private constants_() As Constant 
      	Private methods_() As Method 
      	Private classes_() As ObjectClass 	
      	Private variables_() As Variable
      
      
      	%REM
      		Property Get ClassName
      		Class Name of the MajorElement
      	%END REM
      	Property Get ClassName As String
      		ClassName = me.Label  
      	End Property 
      
      
      	%REM
      		Property Get Constants
      		Array containing the Object's constants
      	%END REM
      	Property Get Constants As Variant
      
      		Dim indexes List As Integer 
      		Dim tags As Variant 
      
      		Dim obj As Constant 
      
      		
      		Dim result() As Constant
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.constants_)) As Constant
      
      		If getContext().GeneratingAPIdoc Then 
      			For i = LBound(me.constants_) To UBound(me.constants_)
      				Set obj = me.constants_(i) 
      				indexes(obj.Label) = i 
      			Next  
      			
      			tags = getSortedListTags(indexes) 
      			For i = LBound(tags) To UBound(tags) 
      				Set result(i) = Me.constants_(indexes(CStr(tags(i))))
      			Next 
      			
      		Else 
      			For i = LBound(me.constants_) To UBound(me.constants_) 
      				Set result(i) = me.constants_(i)  
      			Next  
      		End If
      		
      		Constants = result 
      	End Property 
      	
      	
      	%REM
      		Property Get hasConstants
      		Flag indicating if the Object has Contstants 
      	%END REM
      	Property Get hasConstants As Boolean 
      		hasConstants = Not (me.constants_(0) Is Nothing) 
      	End Property	
      	
      	
      
      
      	%REM
      		Property Get Methods
      		Array containing the MajorElement Methods 
      	%END REM
      	Property Get Methods As Variant
      		Dim indexes List As Integer 
      		Dim tags As Variant 
      
      		Dim obj As Method 
      		
      		Dim result() As Method
      		Dim i As Integer
      		
      		
      		' BEGIN CODE 
      		ReDim result(UBound(me.methods_)) As Method
      
      		If getContext().GeneratingAPIdoc Then 
      			For i = LBound(me.methods_) To UBound(me.methods_)
      				Set obj = me.methods_(i) 
      				indexes(obj.Signature) = i 
      			Next  
      			
      			tags = getSortedListTags(indexes) 
      			For i = LBound(tags) To UBound(tags) 
      				Set result(i) = Me.methods_(indexes(CStr(tags(i))))
      			Next 
      			
      		Else 
      			For i = LBound(me.methods_) To UBound(me.methods_) 
      				Set result(i) = me.methods_(i)
      			Next  
      		End If
      		
      		Methods = result 
      	End Property
      
      
      	%REM
      		Property Get Properties
      		Array containing the Properties of the MajorElement
      	%END REM
      	Property Get Properties As Variant
      		Dim result() As Method
      		Dim i As Integer 
      		
      		' BEGIN CODE 
      		ReDim result(0) As Method 
      		ForAll method In me.Methods 
      			If Not (method Is Nothing) Then
      				If method.isProperty Then 
      					ReDim Preserve result(i) As Method 
      					Set result(i) = method 
      					i = i + 1 					
      				End If 
      			End If
      		End ForAll
      		
      		Properties = result 
      	End Property 
      	
      	
      
      	%REM
      		Property Get NonProperyMethods
      		Array containing Methods of the MajorElement that are NOT Properties
      	%END REM
      	Property Get NonProperyMethods As Variant
      		Dim result() As Method
      		Dim i As Integer 
      		
      		ReDim result(0) As Method 
      		ForAll method In me.Methods 
      			If Not (method Is Nothing) Then
      				If Not method.isProperty Then 
      					ReDim Preserve result(i) As Method 
      					Set result(i) = method 
      					i = i + 1 					
      				End If 
      			End If
      		End ForAll
      		
      		NonProperyMethods = result 
      	End Property 
      	
      
      	%REM
      		Property Get Subs
      		Array containing the Method Subs of the MajorElement
      	%END REM
      	Property Get Subs As Variant
      		Dim result() As Method
      		Dim i As Integer 
      		
      		ReDim result(0) As Method 
      		ForAll method In me.Methods 
      			If Not (method Is Nothing) Then
      				If method.isSub Then 
      					ReDim Preserve result(i) As Method 
      					Set result(i) = method 
      					i = i + 1 					
      				End If 
      			End If
      		End ForAll
      		
      		Subs = result 
      	End Property 
      
      
      	%REM
      		Property Get Functions
      		Array containing the Method Functions of the MajorElement
      	%END REM
      	Property Get Functions As Variant
      		Dim result() As Method
      		Dim i As Integer 
      		
      		ReDim result(0) As Method 
      		ForAll method In me.Methods
      			If Not (method Is Nothing) Then
      				If method.isFunction Then 
      					ReDim Preserve result(i) As Method 
      					Set result(i) = method 
      					i = i + 1 					
      				End If 
      			End If
      		End ForAll
      		
      		Functions = result 
      	End Property 
      
      
      	%REM
      		Property Get Events
      		Array containing the Method Events of the MajorElement
      	%END REM
      	Property Get Events As Variant
      		Dim result() As Method
      		Dim i As Integer 
      		
      		ReDim result(0) As Method 
      		ForAll method In me.Methods 
      			If Not (method Is Nothing) Then
      				If method.isEvent Then 
      					ReDim Preserve result(i) As Method 
      					Set result(i) = method 
      					i = i + 1 					
      				End If 
      			End If
      		End ForAll
      		
      		Events = result 
      	End Property 
      
      
      
      
      	%REM
      		Property Get hasMethods
      		Flag indicating if the MajorElement has Methods 
      	%END REM
      	Property Get hasMethods As Boolean 
      		hasMethods = Not (me.methods_(0) Is Nothing) 
      	End Property
      
      
      	%REM
      		Property Get hasProperties
      		Flag indicating if the MajorElement has Properties 
      	%END REM
      	Property Get hasProperties As Boolean
      		Dim result As Boolean 
      		ForAll method In me.methods_ 
      			If Not (method Is Nothing) Then
      				If method.isProperty Then 
      					result = True 
      					Exit ForAll 
      				End If 
      			End If
      		End ForAll
      		
      		hasProperties = result
      		
      	End Property
      
      
      	%REM
      		Property Get hasSubs
      		Flag indicating if the MajorElement has Subs 
      	%END REM
      	Property Get hasSubs As Boolean 
      		Dim result As Boolean 
      		ForAll method In me.methods_ 
      			If Not (method Is Nothing) Then
      				If method.isSub Then 
      					result = True 
      					Exit ForAll 
      				End If 
      			End If
      		End ForAll
      		
      		hasSubs = result
      		
      	End Property
      	
      
      	%REM
      		Property Get hasFunctions
      		Flag indicating if the MajorElement has Functions 
      	%END REM
      	Property Get hasFunctions As Boolean 
      		Dim result As Boolean 
      		ForAll method In me.methods_ 
      			If Not (method Is Nothing) Then
      				If method.isFunction Then 
      					result = True 
      					Exit ForAll 
      				End If 
      			End If
      		End ForAll
      		
      		hasFunctions = result
      		
      	End Property
      	
      
      	%REM
      		Property Get hasEvents
      		Flag indicating if the MajorElement has Properties 
      	%END REM
      	Property Get hasEvents As Boolean
      		Dim result As Boolean 
      		ForAll method In me.methods_ 
      			If Not (method Is Nothing) Then
      				If method.isEvent Then 
      					result = True 
      					Exit ForAll 
      				End If 
      			End If
      		End ForAll
      		
      		hasEvents = result
      		
      	End Property
      
      
      	%REM
      		Property Get Classes
      		Array of ObjectClass objects contained by the MajorElement 
      	%END REM
      	Property Get Classes As Variant
      		On Error GoTo ErrorTrap 
      		
      		Dim indexes List As Integer  		' k = label, v = index 
      		 
      		Dim tags As Variant 
      		
      		Dim obj As ObjectClass
      		Dim parent As ObjectClass  
      		
      		Dim result() As ObjectClass
      		
      		Dim parentlabel$
      		Dim temp$  
      		Dim i As Integer 
      		
      		
      		
      		' BEGIN CODE 
      		ReDim result(UBound(me.classes_)) As ObjectClass 
      		
      		If getContext().GeneratingScript Then 
      			' Need to sort by classname hierarchy when generating script
      			' load all the labels 
      			For i = LBound(me.classes_) To UBound(me.classes_) 
      				Set obj = me.classes_(i) 
      				
      				parentlabel$ = obj.ParentClassName
      				temp$ = ||  
      				While Not isBlankString(parentlabel$)
      					temp$ = parentlabel$ & |.| & temp$
      	
      					If IsElement(indexes(parentlabel$)) Then 
      						Set parent = me.classes_(indexes(parentlabel$)) 
      					Else 
      						Set parent = me.getClass(parentlabel$) 
      					End If
      					
      					If (parent Is Nothing) Then
      						parentlabel$ = ||
      					Else 
      						parentlabel$ = parent.ParentClassName 
      					End If  
      				Wend
      				
      				indexes(temp$ & obj.Label) = i
      			Next 
      		Else
      			' sort by class name (label property) when generating API doc (default)  
      			For i = LBound(me.classes_) To UBound(me.classes_) 
      				Set obj = me.classes_(i) 
      				indexes(obj.Label) = i   
      			Next 		
      		End If 
      		
      		' alpha sort by listtag 
      		tags = getSortedListTags(indexes) 
      		For i = LBound(tags) To UBound(tags) 
      			Set result(i) = Me.classes_(indexes(CStr(tags(i))))
      		Next 		
      
      	ExitPoint:
      		Classes = result
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      		
      	End Property 
      
      
      
      
      	%REM
      		Property Get hasClasses
      		Flag indicating if the Object has Classes 
      	%END REM
      	Property Get hasClasses As Boolean 
      		hasClasses = Not (me.classes_(0) Is Nothing) 
      	End Property
      
      
      	%REM
      		Property Get Variables
      		Array containing the Object's variables
      	%END REM
      	Property Get Variables As Variant
      		
      		Dim indexes List As Integer 
      		Dim tags As Variant 
      		
      		Dim obj As Variable 
      		
      		Dim result() As Variable
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.variables_)) As Variable
      		
      		If getContext().GeneratingAPIdoc Then 
      			For i = LBound(me.variables_) To UBound(me.variables_) 
      				Set obj = me.variables_(i) 
      				indexes(obj.Label) = i   
      			Next  
      			
      			tags = getSortedListTags(indexes) 
      			For i = LBound(tags) To UBound(tags) 
      				Set result(i) = Me.variables_(indexes(CStr(tags(i))))
      			Next 
      			
      		Else 
      			For i = LBound(me.variables_) To UBound(me.variables_) 
      				Set result(i) = me.variables_(i)  
      			Next  
      		End If
      	
      		Variables = result 
      	End Property 
      	
      	
      	%REM
      		Property Get hasVariables
      		Flag indicating if the Object has Variables 
      	%END REM
      	Property Get hasVariables As Boolean 
      		hasVariables = Not (me.variables_(0) Is Nothing) 
      	End Property	
      	
      
      
      	%REM
      		Property Get MajorElements
      		Array containing MajorElements contained by the Object
      		
      		Note: The only MajorElement objects that can be contained by an explicit MajorElement object are ObjectClass objects. 
      		Therefore, this Property is a wrapper for the MajorElement.Classes property. 
      		
      		@see MajorElement.Classes 
      	%END REM
      	Property Get MajorElements As Variant
      		MajorElements = me.Classes  
      	End Property 
      
      
      	%REM
      		Property Get hasMajorElements
      		Flag indicating if the Object has MajorElements 
      		
      		Note: The only MajorElement objects that can be contained by an explicit MajorElement object are ObjectClass objects. 
      		Therefore, this Property is a wrapper for the MajorElement.hasClasses property. 
      		
      		@see MajorElement.Classes 
      	%END REM
      	Property Get hasMajorElements As Boolean 
      		hasMajorElements = me.hasClasses
      	End Property
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      
      		Dim extendedinfo List As String 
      		
      		Dim sc As New StringsCarrier()
      		Dim mthd As Method    
      		Dim objclass As ObjectClass
      		Dim objConstant As Constant 
      		Dim objVariable As Variable
      
      		Dim array As Variant 
      
      		Dim result$
      		Dim i As Integer 
      		Dim u As Integer 
      		
      		' BEGIN CODE
      		result$ = ValuedElement..JSON
      		
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      		
      		If me.hasConstants Then
      			Call sc.clear()
      			ForAll constelement In me.constants_
      				Set objConstant = constelement
      				extendedinfo(|constant label|) = objConstant.Label
      				
      				sc.push(objConstant.JSON)
      			End ForAll
      
      			result$ = result$ & |, "constants":[| & sc.joinContent(|,|) & |]| 
      		End If
      
      		If me.hasMethods Then
      			Call sc.clear() 
      			ForAll methodelement In me.Methods 
      				Set mthd = methodelement 
      				If Not (mthd Is Nothing) Then Call sc.push(mthd.JSON)
      			End ForAll
      
      			result$ = result$ & |, "methods":[| & sc.joinContent(|,|) & |]| 
      		End If 
      
      		If me.hasClasses Then
      			Call sc.clear() 
      			ForAll classelement In me.Classes 
      				Set objclass = classelement 
      				sc.push(objclass.JSON)
      			End ForAll
      
      			result$ = result$ & |, "classes":[| & sc.joinContent(|,|) & |]| 
      		End If 		
      		
      		If me.hasVariables Then
      			Call sc.clear()
      			ForAll varelement In me.Variables
      				If Not (objVariable Is Nothing) Then 
      					Set objVariable = varelement
      					sc.push(objVariable.JSON)
      				End If 
      			End ForAll
      
      			result$ = result$ & |, "variables":[| & sc.joinContent(|,|) & |]| 
      		End If
      		
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint 
      	End Property
      
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      
      		Dim tagnames(12) As String 
      		Dim result As StringList 
      		
      		' BEGIN CODE 
      		tagnames(0) = |nestedclasssummary|
      		tagnames(1) = |constantssummary|
      		tagnames(2) = |typessummaries|
      		tagnames(3) = |variablesummaries| 
      		tagnames(4) = |propertysummaries|  
      		tagnames(5) = |methodsummaries| 
      
      		tagnames(6) = |constructordetail|
      		tagnames(7) = |codesampleblock|
      		tagnames(8) = |typesdetail|
      		tagnames(9) = |constantdetail|
      		tagnames(10) = |variabledetail|
      		tagnames(11) = |propertydetail|
      		tagnames(12) = |methoddetail|
      		
      		Set result = CodeElement..TaggedValues
      
      		ForAll tagname In tagnames 
      			If Not result.hasTag(tagname) Then Call result.setElementValue(tagname, ||) 
      		End ForAll 
      		
      		result.setElementValue |classname|, me.ClassName
      		If getContext().GeneratingAPIdoc Then result.setElementValue |codesamplelabel|, |Code Sample| 
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      
      
      
      
      	%REM
      		Property Get TaggedStringsCarriers
      		Tagged StringsCarriers for the Object. 
      		k = Tag
      		v = StringsCarrier  
      	%END REM
      	Property Get TaggedStringsCarriers As StringsCarrierList 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      
      		Dim sc As StringsCarrier
      		
      		Dim classobject As ObjectClass
      		Dim constantobject As Constant
      		Dim variableobject As Variable
      		Dim methodobject As Method 
      		Dim result As StringsCarrierList 
      
      		Dim temp As Variant 
      		
      		
      		' BEGIN CODE
      		Set result = CodeElement..TaggedStringsCarriers 
      
      
      		If getContext().GeneratingScript Then 
      			' Constants   
      			'	{{constantsvss}}
      			Set sc = New StringsCarrier() 
      			If me.hasConstants Then
      				temp = me.Constants
      				sc.push(|'{{Constants|)
      				ForAll constantelement In temp 
      					Set constantobject = constantelement
      					sc.load constantobject.Script 
      				End ForAll
      				sc.push(|'}}|)
      				sc.push(||)
      			End If
      			result.setElementValue |constantsvss|, sc
      	
      	
      			' Variables   
      			'	{{variablesvss}}
      			Set sc = New StringsCarrier() 
      			If me.hasVariables Then
      				temp = me.Variables
      				sc.push(|'{{Variables|)
      				ForAll variableelement In temp 
      					Set variableobject = variableelement
      					sc.load variableobject.Script 
      				End ForAll
      				sc.push(|'}}|)
      				sc.push(||)
      			End If
      			result.setElementValue |variablesvss|, sc
      	
      	
      			' Properties   
      			'	{{propertiesvss}}
      			Set sc = New StringsCarrier() 
      			If me.hasProperties Then
      				temp = me.Properties 
      				ForAll methodelement In temp 
      					Set methodobject = methodelement
      					sc.load methodobject.Script 
      				End ForAll
      			End If
      			result.setElementValue |propertiesvss|, sc 
      	
      	
      			' Classes   
      			'	{{classesvss}} 
      			Set sc = New StringsCarrier() 
      			If me.hasClasses Then
      				temp = me.Classes 
      				ForAll classelement In temp 
      					Set classobject = classelement
      					sc.load classobject.Script 
      				End ForAll
      			End If
      			result.setElementValue |classesvss|, sc
      	
      	
      			' Subs & Functions    
      			'	{{methodsvss}} 
      			Set sc = New StringsCarrier() 
      			If me.hasSubs Or me.hasFunctions Then
      	
      				' Subs   
      				If me.hasSubs Then
      					temp = me.Subs 
      					ForAll methodelement In temp 
      						Set methodobject = methodelement
      						sc.load methodobject.Script 
      					End ForAll
      				End If
      	
      	
      				' Functions   
      				If me.hasFunctions Then
      					temp = me.Functions 
      					ForAll methodelement In temp 
      						Set methodobject = methodelement
      						sc.load methodobject.Script 
      					End ForAll
      				End If
      	
      			End If
      			result.setElementValue |methodsvss|, sc
      		End If
      
      
      	ExitPoint: 
      		Set TaggedStringsCarriers = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      
      	%REM
      		Property Get apiDoc
      		Generated API Documentation about the object.
      	%END REM
      	Property Get apiDoc As StringsCarrier
      		On Error GoTo ErrorTrap
      		
      		Dim extendedinfo List As String
      		
      		Dim summarylinks As New StringsCarrier() 
      		Dim summaryrows As New StringsCarrier() 
      		Dim detail As New StringList()
      		
      		Dim objLibrary As Library 
      		Dim objClass As ObjectClass 
      
      		Dim objMethod As Method 
      		Dim objVariable As Variable
      
      		Dim tv As StringList 
      		Dim typesqueue As StringQueue
      		Dim classqueue As StringQueue
      		Dim propertyqueue As StringQueue 
      		Dim methodqueue As StringQueue
      		Dim variablequeue As StringQueue  
      		Dim sq As StringQueue
      		Dim stubhtml As StringsCarrier
      		Dim result As StringsCarrier 
      		
      		Dim values As Variant
      		
      		Dim propertycontent$ 
      		Dim subcontent$ 
      		Dim functioncontent$ 
      		Dim eventcontent$  
      		Dim variablecontent$
      		Dim attrib$ 
      		
      
      		Dim i%
      
      		
      		
      		' BEGIN CODE
      		getContext().GeneratingAPIdoc = True 
      		Set tv = me.TaggedValues  
      
      
      		' Constants
      		If me.hasConstants Then
      			Set variablequeue = New StringQueue()
      			Call variablequeue.load(getElementSummary(me.Constants, |Constant|)) 
      
      			If variablequeue.hasContent Then 
      				Set detail = New StringList()
      				detail.setElementValue |tablesummaryrows|, variablequeue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Constants Summary table, listing constants|
      				detail.setElementValue |tablesummaryanchorname|, |constants.summary|
      				detail.setElementValue |summarytableheading|, |Constants|
      				detail.setElementValue |tablesummaryheadrows|, SUMMARY_ROW_HEADER_CONSTANT
      
      				tv.setElementValue |constantssummary|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      				summarylinks.push |<a href="#constants.summary">Constants</a>|
      
      				Set variablequeue = getElementsDetail(me.Constants, |Constant|)
      				Set detail = New StringList() 
      				detail.setElementValue |constantdetailelements|, variablequeue.joinContent(||)
      				tv.setElementValue |constantdetail|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|ConstantDetail|)).joinContent(||)				
      			End If
      		End If
      
      		
      		' Special Instances
      		Select Case me.InstanceCode 
      			Case SIGNATURE_VALUE_LIBRARY 
      				' Major Element is a library 		
      
      				Set objLibrary = Me 
      				
      				' Types details
      				Set detail = New StringList()  
      				tv.setElementValue |typessummary|, ||
      				If objLibrary.hasTypes Then 
      					Set typesqueue = getValuedElementLinkedSummariesHTML(objLibrary.Types, objLibrary)
      
      					If typesqueue.hasContent Then 
      						Set detail = New StringList()
      						detail.setElementValue |tablesummaryrows|, typesqueue.joinContent(||)
      						detail.setElementValue |tablesummary|, |Types Summary table, listing classes and comments|
      						detail.setElementValue |tablesummaryanchorname|, |types.summary|
      						detail.setElementValue |summarytableheading|, |Types Summary|
      						detail.setElementValue |tablesummaryheadrows|, ||
      						tv.setElementValue |typessummaries|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      					End If
      
      					tv.setElementValue |summarylinks|, tv.getValue(|summaryLinks|) & {<li>&nbsp;|&nbsp;<a href="#types.summary">Types</a></li>}
      					summarylinks.push |<a href="#types.summary">Types</a>|
      				End If
      				
      			Case SIGNATURE_VALUE_CLASS 
      				' Constructor
      				tv.setElementValue |constructordetail|, tv.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|ConstructorDetail|)).joinContent(||)
      
      		End Select
      		
      		
      		Set sq = me.SummaryTableHTML
      		tv.setElementValue |summarytable|, sq.joinContent(||)
      		
      		
      		' Variables
      		If me.hasVariables Then
      			Set variablequeue = New StringQueue()
      			Call variablequeue.load(getElementSummary(me.Variables, |Variable|)) 
      
      			If variablequeue.hasContent Then 
      				Set detail = New StringList()
      				detail.setElementValue |tablesummaryrows|, variablequeue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Variable Summary table, listing variables|
      				detail.setElementValue |tablesummaryanchorname|, |variables.summary|
      				detail.setElementValue |summarytableheading|, |Variables|
      				detail.setElementValue |tablesummaryheadrows|, SUMMARY_ROW_HEADER_DEFAULT
      
      				tv.setElementValue |variablesummaries|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      				summarylinks.push |<a href="#variables.summary">Variables</a>|
      
      				Set variablequeue = getElementsDetail(me.Variables, |Variable|)
      				Set detail = New StringList() 
      				detail.setElementValue |variabledetailelements|, variablequeue.joinContent(||)
      				tv.setElementValue |variabledetail|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|VariableDetail|)).joinContent(||)				
      			End If
      		End If
      		
      		
      		' Classes 		
      		If me.hasClasses Then 
      			Set classqueue = getValuedElementLinkedSummariesHTML(me.Classes, Me)
      
      			If classqueue.hasContent Then 
      				Set detail = New StringList()
      				detail.setElementValue |tablesummaryrows|, classqueue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Classes Summary table, listing classes and comments|
      				detail.setElementValue |tablesummaryanchorname|, |classes.summary|
      				detail.setElementValue |summarytableheading|, |Classes Summary|
      				detail.setElementValue |tablesummaryheadrows|, ||
      				tv.setElementValue |nestedclasssummary|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      			End If
      
      			summarylinks.push |<a href="#classes.summary">Classes</a>|
      			
      		End If  
      
      		
      		' Methods
      		If me.hasMethods Then
      			
      			' methods summaries 
      			ForAll methodelement In me.Methods 
      				Set objMethod = methodelement 
      
      				If Not (objMethod Is Nothing) Then 
      					If objMethod.isProperty Then 
      						propertycontent$ = propertycontent$ & objMethod.apiDoc.joinContent(||)
      						
      					ElseIf objMethod.isSub Then
      						subcontent$ = subcontent$ & objMethod.apiDoc.joinContent(||)
      						
      					ElseIf objMethod.isFunction Then
      						functioncontent$ = functioncontent$ & objMethod.apiDoc.joinContent(||)
      						
      					ElseIf objMethod.isEvent Then
      						eventcontent$ = eventcontent$ & objMethod.apiDoc.joinContent(||)
      					End If  
      	
      					If |new| = LCase$(objMethod.Label) Then summarylinks.push |<a href="#constructor.detail">Constr</a>|
      				End If 	
      
      			End ForAll
      
      			' properties details
      			Set propertyqueue = New StringQueue() 
      			If me.hasProperties Then Call propertyqueue.load(getMethodSummaries(me.Properties)) 
      
      			If propertyqueue.hasContent Then 
      				Set detail = New StringList()
      				detail.setElementValue |tablesummaryrows|, propertyqueue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Property Summary table, listing methods and comments|
      				detail.setElementValue |tablesummaryanchorname|, |properties.summary|
      				detail.setElementValue |summarytableheading|, |Property Summaries|
      				detail.setElementValue |tablesummaryheadrows|, ||
      
      				tv.setElementValue |propertysummaries|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      				summarylinks.push |<a href="#properties.summary">Properties</a>|
      
      				Set propertyqueue = getMethodsDetail(me.Properties)
      				Set detail = New StringList() 
      				detail.setElementValue |propertydetailelements|, propertyqueue.joinContent(||)
      				tv.setElementValue |propertydetail|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|PropertyDetail|)).joinContent(||)				
      			End If
      
      
      			' methods details
      			Set methodqueue = New StringQueue() 
      			' do not load subs / functions / events separately 
      			If me.hasSubs Or me.hasFunctions Or me.hasEvents Then Call methodqueue.load(getMethodSummaries(me.NonProperyMethods)) 
      
      			If methodqueue.hasContent Then 
      				Set detail = New StringList() 
      				Set detail = New StringList() 
      				detail.setElementValue |tablesummaryrows|, methodqueue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Method Summary table, listing methods and comments|
      				detail.setElementValue |tablesummaryanchorname|, |methods.summary|
      				detail.setElementValue |summarytableheading|, |Method Summaries|
      				detail.setElementValue |tablesummaryheadrows|, ||
      
      				tv.setElementValue |methodsummaries|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      				summarylinks.push |<a href="#methods.summary">Methods</a>|
      
      				Set methodqueue = New StringQueue() 
      				' do not load subs / functions / events separately 
      				If me.hasSubs Or me.hasFunctions Or me.hasEvents Then Call methodqueue.load(getMethodsDetail(me.NonProperyMethods)) 
      				
      				Set detail = New StringList() 
      				detail.setElementValue |methoddetailelements|, methodqueue.joinContent(||)
      				tv.setElementValue |methoddetail|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodDetail|)).joinContent(||)				
      			End If
      		End If  	
      		
      		tv.setElementValue |properties|, propertycontent$
      		tv.setElementValue |subs|, subcontent$
      		tv.setElementValue |functions|, functioncontent$
      		tv.setElementValue |events|, eventcontent$
      		tv.setElementValue |summarylinks|, ||
      		If summarylinks.hasContent Then tv.setElementValue |summarylinks|, |<li>| & summarylinks.joinContent({&nbsp;|&nbsp;</li><li>}) & |</li>|
      
      		Set result = tv.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(CLASS_NAME))
      		
      		
      	ExitPoint: 
      		Set apiDoc = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get SummaryTableHTML
      
      		PLACEHOLDER Property meant to be extended by child classes. 	
      		
      		SummaryTable HTML content for the object
      	%END REM
      	Property Get SummaryTableHTML As StringQueue
      		Set SummaryTableHTML = New StringQueue()
      	End Property
      
      
      
      
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param Label Label (Name) for the MajorElement
      		@param ValueType Value Type of the MajorElement
      		@param Comment Comment about the MajorElement
      		@param CodeSample any sample code for the MajorElement
      		@param SignatureCode Long indicating the MajorElement Type (such as Class, Library, or VSE) and modifiers (such as Public, Private, etc) of the Object
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)
      		On Error GoTo ErrorTrap
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		ReDim me.methods_(0) As Method 
      		ReDim me.classes_(0) As ObjectClass
      		ReDim me.constants_(0) As Constant
      		ReDim me.variables_(0) As Variable
      		
      		
      	ExitPoint:
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$()
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, || 
      		Resume ExitPoint 
      	End Sub 
      
      
      	%REM
      		Sub appendMethod
      		Appends a Method to the MajorElement 
      	%END REM
      	Sub appendMethod(source As Method)
      		If Not (source Is Nothing) Then 
      			If me.hasMethods Then ReDim Preserve me.methods_(UBound(me.methods_) + 1) As Method  
      	
      			Set me.methods_(UBound(me.methods_)) = source 
      		End If 	
      	End Sub
      
      
      	%REM
      		Sub appendStringConstant
      		Appends a new String Constant as a Name Value pair.
      		
      		@param constantname$ Name of the Constant 
      		@param value$ Value of the Constant
      		
      		@throws ERR_PARAMETER_INVALID if the constantname is invalid.  
      	%END REM
      	Sub appendStringConstant(constantname$, value$)
      		
      		Dim constant_ As Constant 
      
      		Dim key$ 
      
      		key$ = getBaliStrings().fieldnamefy(constantname$)
      		If isBlankString(key$) Then Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID & |Constant name is invalid.| 
      		
      		Set constant_ = New Constant(Me, key$, value$, ||, getSignatureCode(|Public Const|))
      		Call me.appendConstant(constant_)
      	End Sub
      
      
      	%REM
      		Sub appendConstant
      		Appends a Constant object to the Object
      	%END REM
      	Sub appendConstant(source As Constant)
      		If Not (source Is Nothing) Then
      			If me.hasConstants Then ReDim Preserve me.constants_(UBound(me.constants_) + 1) As Constant
      		
      			Set me.constants_(UBound(me.constants_)) = source
      		End If
      	End Sub
      
      
      	%REM
      		Sub appendClass
      		Appends an Class to the Object 
      	%END REM
      	Sub appendClass(source As ObjectClass)
      		If Not (source Is Nothing) Then 
      			If me.hasClasses Then ReDim Preserve me.classes_(UBound(me.classes_) + 1) As ObjectClass  
      	
      			Set me.classes_(UBound(me.classes_)) = source 
      		End If 
      	End Sub
      	
      	%REM
      		Sub appendVariable
      		Appends a Variable object to the Object
      	%END REM
      	Sub appendVariable(source As Variable)
      		If Not (source Is Nothing) Then
      			If me.hasVariables Then ReDim Preserve me.variables_(UBound(me.variables_) + 1) As Variable
      		
      			Set me.variables_(UBound(me.variables_)) = source
      		End If
      	End Sub
      
      
      	%REM
      		Function getMethod
      		Gets a Method object  
      		
      		@param methodname Name of the method to retrieve.  The first Method found with a matching Label property will be returned. 
      		
      		@return Method object matching the methodname  
      	%END REM
      	Function getMethod(methodname As String) As Method 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim obj As Method 
      		Dim result As Method
      		
      		' BEGIN CODE
      		extendedinfo(|methodname|) = methodname
      		If isBlankString(methodname) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK 
      		If Not me.hasMethods Then GoTo ExitPoint 
      
      				
      		ForAll m In me.Methods 
      			Set obj = m 
      			If Not (obj Is Nothing) Then 
      				If (0 = StrComp(methodname, obj.Label, 5)) Then 
      					Set result = m 
      					Exit ForAll 
      				End If	
      			End If
      		End ForAll
      		
      	ExitPoint: 
      		Set getMethod = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      
      	%REM
      		Function getClass
      		Gets an ObjectClass object  
      		
      		@param classname Name of the Class to retrieve.  The first Class found with a matching Label property will be returned. 
      		
      		@return Class object matching the classname  
      	%END REM
      	Function getClass(classname As String) As ObjectClass 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim obj As ObjectClass 
      		Dim result As ObjectClass
      		
      		
      		' BEGIN CODE
      		extendedinfo(|classname|) = classname
      		If isBlankString(classname) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK 
      		If Not me.hasClasses Then GoTo ExitPoint 
      		
      		ForAll c In me.classes_ 
      			Set obj = c 
      			If Not (obj Is Nothing) Then 
      				If strCmp(classname, obj.Label) Then 
      					Set result = obj 
      					Exit Forall 
      				End If	
      			End If
      		End ForAll
      		
      	ExitPoint: 
      		Set getClass = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      
      
      	%REM
      		Function hasProperty
      		Indicates if the object has specific child property. 
      		
      		@param propertylabel$ Label of the Property for which to check. 
      		
      		@return Flag indicating whether or not the object has the specific property. 
      		
      		@throws ERR_PARAMETER_BLANK if propertyname$ is blank 
      		@throws ERR_PARAMETER_INVALID if propertyname$ is not an appropriate name for a property 
      	%END REM
      	Function hasProperty(propertylabel$) As Boolean 
      
      		Dim prop As Method 
      		Dim props As Variant 
      		
      		' exception variables
      		Dim extendedinfo List As String
      		
      
      		Dim result As Boolean
      		
      		' BEGIN CODE
      		extendedinfo(|propertylabel|) = propertylabel$
      		If isBlankString(propertylabel$) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK
      		If Not (0 = StrComp(propertylabel$, getBaliStrings().fieldnamefy(propertylabel$))) Then Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID
      		
      		On Error GoTo ErrorTrap
      		If me.hasProperties Then 
      			props = me.Properties 
      			ForAll element In props 
      				Set prop = element 
      				If (0 = StrComp(prop.Label, propertylabel$, 5)) Then 
      					result = True 
      					Exit ForAll  
      				End If
      			End ForAll
      		End If
      		
      	ExitPoint: 
      		hasProperty = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      End Class
      
      
      %REM
      	Class ObjectType
      	Represents an Object Type
      %END REM
      Class ObjectType As MajorElement 
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |ObjectType| 
      	End Property
      
      	
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		Dim result$
      
      		' BEGIN CODE
      		result$ = MajorElement..JSON
      
      		result$ = Replace(result$, |"label":| & toJSonValue(me.ClassName), |"classname":| & toJsonValue(me.ClassName))
      
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the ObjectType
      		@param Label Label (Name) for the ObjectType
      		@param ValueType Value Type of the ObjectType
      		@param Comment Comment about the ObjectType
      		@param CodeSample any sample code for the ObjectType
      		@param SignatureCode Long indicating the ObjectType Type (such as Class, Library, or VSE) and modifiers (such as Public, Private, etc) of the Object
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)
      		
      		' verify SignatureCode represents a Type 
      		If Not (SIGNATURE_VALUE_TYPE = (SignatureCode And SIGNATURE_VALUE_TYPE)) Then Error ERR_INVALID_SIGNATURE_CODE, MSG_INVALID_SIGNATURE_CODE & |SignatureCode: | & CStr(SignatureCode)
      	End Sub
      	
      
      End Class
      %REM
      	Class VSID
      	Represents all VSEs / Libraries (and their children) in a VSID Database.  
      %END REM
      Class VSID As MajorElement 	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |VSID| 
      	End Property
      
      	Private vses_() As VSE 
      	Private libraries_() As Library 
      
      	%REM
      		Property Get VSIDname
      		Name of the VSID
      	%END REM
      	Property Get VSIDname As String
      		VSIDname = me.Label  
      	End Property 
      
      
      	%REM
      		Property Get VSEs
      		Array containing the VSE names used by the Library
      	%END REM
      	Property Get VSEs As Variant
      		Dim result() As VSE
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.vses_)) As VSE
      		
      		For i = LBound(me.vses_) To UBound(me.vses_) 
      			Set result(i) = me.vses_(i)  
      		Next  
      		
      		VSEs = result 
      	End Property 
      
      
      	%REM
      		Property Get hasVSEs
      		Flag indicating if the VSID has VSEs 
      	%END REM
      	Property Get hasVSEs As Boolean 
      		hasVSEs = Not (me.vses_(0) Is Nothing) 
      	End Property
      	
      	
      
      	%REM
      		Property Get Libraries
      		Array containing the Library names used bye the Object 
      	%END REM
      	Property Get Libraries As Variant
      		Dim result() As Library
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.libraries_)) As Library
      		
      		For i = LBound(me.libraries_) To UBound(me.libraries_) 
      			Set result(i) = me.libraries_(i)  
      		Next  
      		
      		Libraries = result 
      	End Property 
      
      
      	%REM
      		Property Get hasLibraries
      		Flag indicating if the VSID has Libraries 
      	%END REM
      	Property Get hasLibraries As Boolean 
      		hasLibraries = Not (me.libraries_(0) Is Nothing) 
      	End Property
      	
      	
      
      	%REM
      		Property Get MajorElements
      		Array containing the Object's MajorElements 
      	%END REM
      	Property Get MajorElements As Variant
      		Dim result() As MajorElement 
      		Dim mj As MajorElement
      		Dim library As Library 
      		
      		On Error GoTo ErrorTrap
      		
      		If me.hasMajorElements Then 
      			ReDim result(0) As MajorElement 
      
      			If me.hasClasses Then 
      				ForAll classelement In me.Classes 
      					Set mj = classelement 
      					If Not (result(UBound(result)) Is Nothing) Then ReDim Preserve result(UBound(result) + 1) As MajorElement
      					Set result(UBound(result)) = mj 
      				End ForAll
      			End If
      
      			If me.hasLibraries Then 
      				ForAll libelement In me.libraries_ 
      					Set library = libelement
      					If Not (result(UBound(result)) Is Nothing) Then ReDim Preserve result(UBound(result) + 1) As MajorElement
      					Set result(UBound(result)) = libelement
      				End ForAll
      			End If
      
      			If me.hasVSEs Then 
      				ForAll lsxelement In me.vses_ 
      					Set mj = lsxelement 
      					If Not (result(UBound(result)) Is Nothing) Then ReDim Preserve result(UBound(result) + 1) As MajorElement
      					Set result(UBound(result)) = mj 
      				End ForAll
      			End If
      			
      			MajorElements = result
      		Else
      			
      			MajorElements = Null 
      		End If
      		
      	ExitPoint:
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint
      		
      	End Property 
      
      
      	%REM
      		Property Get hasMajorElements
      		Flag indicating if the Object has MajorElements 
      	%END REM
      	Property Get hasMajorElements As Boolean 
      		Dim result As Boolean 
      		
      		result = MajorElement..hasMajorElements 
      		If Not result Then result = me.hasLibraries
      		If Not result Then result = me.hasVSEs
      		
      		hasMajorElements = result 
      	End Property
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sc As New StringsCarrier 
      		
      		Dim objlib As Library 
      		Dim objVSE As VSE 
      		
      		Dim result$
      		
      		' BEGIN CODE
      		result$ = MajorElement..JSON
      		result$ = Replace(result$, |"label":| & toJSonValue(me.VSIDname), |"VSIDname":| & toJsonValue(me.VSIDname))
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      		
      		
      		If me.hasLibraries Then
      			Call sc.clear() 
      			ForAll libelement In me.libraries_ 
      				Set objlib = libelement 
      				sc.push(objlib.JSON)
      			End ForAll
      
      			result$ = result$ & |, "libraries":[| & sc.joinContent(|,|) & |]| 
      		End If 
      		
      		If me.hasVSEs Then
      			Call sc.clear() 
      			ForAll lsxelement In me.vses_ 
      				Set objVSE = lsxelement 
      				sc.push(objVSE.JSON)
      			End ForAll
      
      			result$ = result$ & |, "lsxs":[| & sc.joinContent(|,|) & |]| 
      		End If 
      		
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      
      
      
      	%REM
      		Property Get apiDoc
      		Generated API Documentation about the object.
      	%END REM
      	Property Get apiDoc As StringsCarrier
      		On Error GoTo ErrorTrap
      		
      		
      		Dim extendedinfo List As String 
      		
      		Dim summarylinks As New StringsCarrier() 
      		Dim summaryrows As New StringsCarrier()
      		
      		Dim infoqueue As StringQueue
      		Dim detail As StringList 
      		Dim tv As StringList
      		Dim result As StringsCarrier 
      		
      		Dim links As Variant 
      		
      		Dim objVSE As VSE
      		Dim objLibrary As Library
      		Dim sc As StringsCarrier  
      		
      		Dim temp$
      		
      		
      		
      		' BEGIN CODE 
      		getContext().GeneratingAPIdoc = True 
      		Set tv = me.TaggedValues 
      
      		tv.setElementValue |lsxsummary|, ||
      		If me.hasVSEs Then 
      			Set infoqueue = getValuedElementLinkedSummariesHTML(me.VSEs, Me)
      
      			If infoqueue.hasContent Then 
      				Set detail = New StringList() 
      				detail.setElementValue |tablesummaryrows|, infoqueue.joinContent(||)
      				detail.setElementValue |tablesummary|, |VSE Summaries Table|
      				detail.setElementValue |tablesummaryanchorname|, |lsxs.summary|
      				detail.setElementValue |summarytableheading|, |VSE Summaries|
      				detail.setElementValue |tablesummaryheadrows|, ||
      
      				tv.setElementValue |lsxsummary|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      			End If
      
      			summarylinks.push |<a href="#lsxs.summary">VSEs</a>|
      		End If  
      
      		tv.setElementValue |librarysummary|, ||
      		If me.hasLibraries Then 
      			Set infoqueue = getValuedElementLinkedSummariesHTML(me.Libraries, Me)
      
      			If infoqueue.hasContent Then 
      				Set detail = New StringList() 
      				detail.setElementValue |tablesummaryrows|, infoqueue.joinContent(||)
      				detail.setElementValue |tablesummary|, |Library Summaries Table|
      				detail.setElementValue |tablesummaryanchorname|, |libraries.summary|
      				detail.setElementValue |summarytableheading|, |Library Summaries|
      				detail.setElementValue |tablesummaryheadrows|, ||
      				
      				tv.setElementValue |librarysummary|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|)).joinContent(||)
      			End If
      
      			summarylinks.push |<a href="#libraries.summary">Libraries</a>|
      		End If  
      		
      		tv.setElementValue |vsidsummary|, ||
      
      
      		' add the Major Element content 
      		tv.setElementValue |majorelement|, tv.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MajorElement|)).joinContent(||)
      		
      		If summarylinks.hasContent Then 
      			temp$ = tv.getValue(|summarylinks|)
      			If isBlankString(temp$) Then
      				tv.setElementValue |summarylinks|, |<li>| & summarylinks.joinContent({&nbsp;|&nbsp;</li><li>}) & |</li>| 
      			Else
      				temp$ = Mid$(temp$, 5, Len(temp$) - 6) 
      				links = Split(temp$, {&nbsp;|&nbsp;</li><li>})
      				Set sc = New StringsCarrier() 
      				ForAll stringvalue In summarylinks.values 
      					temp$ = CStr(stringvalue) 
      					If Not isBlankString(temp$) Then links.push temp$
      				End ForAll
      				
      				tv.setElementValue |summarylinks|, |<li>| & links.joinContent({&nbsp;|&nbsp;</li><li>}) & |</li>| 
      			End If
      		End If
      		
      		Set result = tv.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(CLASS_NAME))
      		
      	ExitPoint: 
      		Set apiDoc = result
      		' do not set isGeneratingAPIdoc_ back to false here!  Only do so in final child-level classes! 
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      
      		Dim result As StringList
      		
      		' BEGIN CODE 
      		Set result = MajorElement..TaggedValues  
      		
      		result.setElementValue |vsidname|, me.VSIDname 
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      
      	%REM
      		Constructor
      
      		@param VSIDname Name of the Object
      		@param Summary information about the Object
      		@param Description Detailed Description of the Object
      	%END REM 
      	Sub New(VSIDname As String, Summary As String, Description As String), MajorElement(Nothing, VSIDname, ||, Summary, Description, SIGNATURE_VALUE_VSID) 
      		On Error GoTo ErrorTrap
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		
      		ReDim me.vses_(0) As VSE 
      		ReDim me.libraries_(0) As Library
      		
      	ExitPoint:
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$()
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||		
      		Resume ExitPoint 
      	End Sub 
      
      
      
      	%REM
      		Sub appendLibrary
      		Appends a Library to the Object 
      	%END REM
      	Sub appendLibrary(source As Library)
      		If Not (source Is Nothing) Then 
      			If me.hasLibraries Then ReDim Preserve me.libraries_(UBound(me.libraries_) + 1) As Library  
      		End If 
      		
      		Set me.libraries_(UBound(me.libraries_)) = source 
      	End Sub
      
      
      	%REM
      		Sub appendVSE
      		Appends an VSE to the Object 
      	%END REM
      	Sub appendVSE(source As VSE)
      		If Not (source Is Nothing) Then 
      			If me.hasVSEs Then ReDim Preserve me.vses_(UBound(me.vses_) + 1) As VSE  
      		End If 
      		
      		Set me.vses_(UBound(me.vses_)) = source 
      	End Sub
      
      
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()  
      		Call MajorElement..updateInternalContent()
      		me.content_(|VSIDname|) = me.VSIDname 
      		If IsElement(me.content_(|lsxname|)) Then Erase me.content_(|lsxname|)
      	End Sub 
      
      End Class
      
      
      
      
      %REM
      	Class VSIDwriter
      	Writer Class for writing BaliScript documentation and source code files. 
      %END REM
      Class VSIDwriter 
      
      	Private documentationdirectory_ As String
      	Private scriptdirectory_ As String  
      	Private updatingframeset_ As Boolean 
      	
      
      	Private Property Get CLASS_NAME As String 
      		CLASS_NAME = |VSIDwriter|
      	End Property
      
      
      	%REM
      		Property Get CLASS_PREFIX
      		Prefix of the Class:  MODULE_NAME.CLASS_NAME.
      	%END REM
      	Private Property Get CLASS_PREFIX As String 
      		CLASS_PREFIX = MODULE_NAME & |.| & CLASS_NAME & |.|
      	End Property
      	
      
      	%REM
      		Property Get isUpdatingFrameset
      		Flag indicating if the API documentation Frameset is being updated 
      	%END REM
      	Property Get isUpdatingFrameset As Boolean
      		isUpdatingFrameset = Me.updatingframeset_
      	End Property
      
      
      	%REM
      		Property Get ScriptDirectory
      		Target Directory wherein Script source files should be written. 
      	%END REM
      	Property Get ScriptDirectory As String
      		ScriptDirectory = Me.scriptdirectory_
      	End Property
      
      	
      	%REM
      		Property Set ScriptDirectory
      		Target Directory wherein VSS files should be written.
      	%END REM
      	Property Set ScriptDirectory As String
      
      		' BEGIN CODE
      		If Not isBlankString(ScriptDirectory) Then 
      			Me.scriptdirectory_ = ScriptDirectory
      			
      			If getBaliStrings().endsWith(Me.scriptdirectory_, DIRECTORY_DELIMITER) Then  
      				'strip off trailing delimiter ONLY if the length is greater than 1
      				If (Len(Me.scriptdirectory_) > 1) Then Me.scriptdirectory_ = Left$(Me.scriptdirectory_, Len(Me.scriptdirectory_) -1) 
      			End If
      			
      			' conditionally append the VOLTSCRIPT folder 		
      			If Not getBaliStrings().endsWith(Me.scriptdirectory_, FOLDERNAME_SCRIPT) Then Me.scriptdirectory_ = Me.scriptdirectory_ & DIRECTORY_DELIMITER & FOLDERNAME_SCRIPT  
      			
      		End If 		
      	End Property
      
      	
      
      	%REM
      		Property Get DocumentationDirectory
      		Target Directory wherein API documentation documentation should be written. 
      	%END REM
      	Property Get DocumentationDirectory As String
      		DocumentationDirectory = Me.documentationdirectory_
      	End Property
      
      	
      	%REM
      		Property Set DocumentationDirectory
      		Target Directory wherein API documentation documentation should be written.
      	%END REM
      	Property Set DocumentationDirectory As String
      
      		' BEGIN CODE
      		If Not isBlankString(DocumentationDirectory) Then 
      			Me.documentationdirectory_ = DocumentationDirectory
      			
      			If getBaliStrings().endsWith(Me.documentationdirectory_, DIRECTORY_DELIMITER) Then  
      				'strip off trailing delimiter ONLY if the length is greater than 1
      				If (Len(Me.documentationdirectory_) > 1) Then Me.documentationdirectory_ = Left$(Me.documentationdirectory_, Len(Me.documentationdirectory_) -1) 
      			End If
      			
      			' conditionally append the APIDOC folder 		
      			If Not getBaliStrings().endsWith(Me.documentationdirectory_, FOLDERNAME_APIDOC) Then Me.documentationdirectory_ = Me.documentationdirectory_ & DIRECTORY_DELIMITER & FOLDERNAME_APIDOC  
      			
      		End If 		
      	End Property
      	
      	
      	
      
      	%REM
      		Constructor  
      		
      		@param docdir 		API Documentation directory for the object. 
      		@param scriptdir 	Script Source directory for the object. 	 
      	%END REM 
      	Sub New(docdir As String, scriptdir As String)
      		Me.DocumentationDirectory = docdir
      		Me.ScriptDirectory = scriptdir		 
      	End Sub 
      
      
      
      	%REM
      		Function getAPIdoc_MajorElement
      		Gets the API documentation content for a MajorElement instance.
      		
      		Conditionally writes API documentation for Classes of the MajorElement 
      		
      		@param source MajorElement object for which to write the documentation
      		@param writeMajorElements Flag indicating if API documentation for child MajorElements should be written
      		
      		@return API documentation html for the MajorElement 
      
      		@throws ERR_PARAMETER_BLANK if VSIDwriter.DocumentationDirectory is blank 
      		@throws ERR_PARAMETER_BLANK if source MajorElement is Nothing 
      	%END REM
      	Function getAPIdoc_MajorElement(source As MajorElement, writeMajorElements As Boolean) As StringQueue
      		If isBlankString(Me.DocumentationDirectory) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |DocumentationDirectory is Blank.  |
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |MajorElement is Nothing.  | 
      		On Error GoTo ErrorTrap
      		
      		Dim keywords As New StringQueue()
      		Dim parentlinks As New StringStack() 
      		Dim tempqueue As StringQueue 
      		
      		Dim parent As CodeElement 
      
      		Dim taggedValues As New StringList() 
      		Dim stubcontent As StringsCarrier 
      		
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		Dim temp$
      		Dim resourcepath$
      		Dim result As StringQueue  
      		
      		
      		' BEGIN CODE 
      		If source.hasMajorElements Then 
      			Set tempqueue = getLabeledElementKeywordHTML(source.MajorElements)
      			temp$ = tempqueue.pop()
      			While Not isBlankString(temp$) 
      				keywords.push(temp$) 
      				temp$ = tempqueue.pop() 
      			Wend
      			
      			If writeMajorElements Then Call Me.writeAPIdoc_Container(source.MajorElements) 
      		End If
      		
      		If source.hasMethods Then
      			Set tempqueue = getLabeledElementKeywordHTML(source.Methods)
      			temp$ = tempqueue.pop()
      			While Not isBlankString(temp$) 
      				keywords.push(temp$) 
      				temp$ = tempqueue.pop() 
      			Wend 
      		End If
      		
      		If source.hasVariables Then
      			Set tempqueue = getLabeledElementKeywordHTML(source.Variables)
      			temp$ = tempqueue.pop()
      			While Not isBlankString(temp$)
      				keywords.push(temp$)
      				temp$ = tempqueue.pop()
      			Wend
      		End If
      
      		resourcepath$ = Me.getCodeElementResourcePath(source) 
      		extendedinfo(|resourcepath|) = resourcepath$
      		extendedinfo(|instancetype|) = source.InstanceType 
      		Set stubcontent = getVSIDstubContent(|html|).getValue(|HTML_HEAD_KEYWORD|)
      		
      		keywords.push Replace(stubcontent.joinContent(||), |{{keyword}}|, source.FQN & | | & source.InstanceType)
      		taggedValues.setElementValue |pagetitle|, source.InstanceType & |: | & source.Label
      		taggedValues.setElementValue |keywords|, keywords.joinContent(||) 
      		taggedValues.setElementValue |resourcepath|,resourcepath$
      		taggedValues.setElementValue |label|, source.Label  
      		taggedValues.setElementValue |summarylinks|, source.TaggedValues.getValue(|summarylinks|) 
      		
      		' build parent links 
      		temp$ = ||
      		Set parent = source.Parent 
      		While Not (parent Is Nothing) 
      			If SIGNATURE_VALUE_VSID <> parent.InstanceCode Then temp$ = temp$ & |..| & DIRECTORY_DELIMITER  
      			parentlinks.push |<li><a href="| & temp$ & parent.FileNameBase & |.html" title="| & |Navigate to | & parent.FQN & |">| & parent.label & |</a></li>|   
      			Set parent = parent.Parent 
      		Wend
      
      		taggedValues.setElementValue |navlistparentlinks|, parentlinks.joinContent(||)
      		Set result = generatePageHTML(taggedValues, source.apiDoc, True)		
      		
      	ExitPoint: 
      		Set getAPIdoc_MajorElement = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function		
      
      
      
      	
      	%REM
      		Function writeAPIdoc_Container
      		Writes API documentation html files for an array of BSX MajorElement Objects
      		
      		Valid object types are: VSID, VSE, Library, ObjectClass 
      			
      		@param container Array containing BSX objects for which to write the API documentation html files
      		
      		@return StringQueue containing the filepaths of the successfully written files.
      		
      		@throws ERR_PARAMETER_BLANK if VSIDwriter.DocumentationDirectory is blank 
      	%END REM
      	Function writeAPIdoc_Container(container As Variant) As StringQueue  
      		If isBlankString(Me.DocumentationDirectory) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |DocumentationDirectory is blank.  |
      		On Error GoTo ErrorTrap
      		
      		Dim result As New StringQueue() 
      		Dim clazz As ObjectClass 
      		Dim lsxinstance As VSE 
      		Dim objElement As MajorElement
      		
      		Dim filename$ 
      
      		' exception variables
      		Dim extendedinfo List As String 
      		
      
      		
      		' BEGIN CODE
      		extendedinfo(|Target Directory|) = Me.DocumentationDirectory
      
      		ForAll element In container
      			Set objElement = element 
      			filename$ = writeAPIdoc_MajorElement(objElement) 
      			
      			If Not isBlankString(filename$) Then Call result.push(filename$) 
      			
      		End ForAll
      		
      	ExitPoint: 
      		Set writeAPIdoc_Container = result
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function  
      
      
      	%REM
      		Function writeAPIdoc_MajorElement
      		Writes the documentation for a MajorElement instance.
      		
      		@param source MajorElement object for which to write the documentation
      		
      		@return filepath of the target documentation file.  
      
      		@throws ERR_PARAMETER_BLANK if VSIDwriter.DocumentationDirectory is blank 
      		@throws ERR_PARAMETER_BLANK if source MajorElement is Nothing 
      	%END REM
      	Function writeAPIdoc_MajorElement(source As MajorElement) As String 
      		If isBlankString(Me.DocumentationDirectory) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |DocumentationDirectory is Blank.  |
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |ObjectClass is Nothing.  | 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		Dim taggedValues As New StringList()
      		Dim majorelementlines As StringQueue 
      		
      		Dim html As StringQueue
      		Dim target$
      		Dim target_html$
      		Dim target_json$
      		Dim target_vss$ 
      		Dim result$
      		
      
      		' BEGIN CODE
      		extendedinfo(|Target Directory|) = Me.DocumentationDirectory
      		target$ = Me.createCodeElementFilepath(source, False) & DIRECTORY_DELIMITER & source.FileNameBase
      		target_html$ = target & |.html|
      		target_json$ = target & |.json|
      		target_vss$ = target & |.vss| 
      		extendedinfo(|Target HTML Filepath|) = target_html$ 
      		extendedinfo(|Target JSON Filepath|) = target_json$ 
      
      		Set html = Me.getAPIdoc_MajorElement(source, True) 
      		taggedValues.setElementValue |resourcepath|, FOLDERNAME_RESOURCES
      
      		If (writeAPIdoc(taggedValues, html, target_html$) > 0) _ 
      		And (writeTextFile(source.JSON, target_json$) > 0) _
      		Then result$ = target$		
      
      	ExitPoint:
      		writeAPIdoc_MajorElement = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      	
      	
      	%REM
      		Function writeAPIdoc_VSID
      		Writes the documentation for a VSID instance.
      		
      		@param source VSID object for which to write the documentation
      		
      		@return filepath of the target documentation file.  
      
      		@throws ERR_PARAMETER_BLANK if VSIDwriter.DocumentationDirectory is blank 
      		@throws ERR_PARAMETER_BLANK if source ObjectClass is Nothing 
      	%END REM
      	Function writeAPIdoc_VSID(source As VSID) As String 
      		If isBlankString(Me.DocumentationDirectory) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |DocumentationDirectory is Blank.  |
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |ObjectClass is Nothing.  | 
      		On Error GoTo ErrorTrap
      		
      		Dim result$
      		
      		' BEGIN CODE
      		result$ = Me.writeAPIdoc_MajorElement(source)
      		If isBlankString(result$) Then GoTo ExitPoint 
      
      		Call Me.writeAPIdoc_MajorElementsFiles(source)
      		Call Me.updateBalidoc_Frameset(source) 
      		
      	ExitPoint:
      		writeAPIdoc_VSID = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint
      	End Function
      	
      	
      	%REM
      		Sub write_IndexHTML
      		Writes the API documentation index.html file 
      	%END REM
      	Sub write_IndexHTML 
      		On Error GoTo ErrorTrap
      		
      		Dim detail As New StringList()  
      		Dim sq As New StringQueue() 
      		
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		
      		' BEGIN CODE 
      		detail.setElementValue |pagetitle|, |API Documentation|
      		detail.setElementValue |keywords|, ||
      		detail.setElementValue |resourcepath|, FOLDERNAME_RESOURCES
      		sq.load getVSIDstubContent(|html|).getValue(|HTML_INDEX|)
      		writeAPIdoc detail, sq, Me.DocumentationDirectory & DIRECTORY_DELIMITER & |index.html| 
      		
      	ExitPoint: 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      
      
      
      
      	%REM
      		Sub update_VSIDlist
      		Updates the API documentation vsid-list file
      		
      		@param source API documentation VSID to be checked / added to the vsid-list file
      		
      		The vsid-list file contains lines of formmated text, with each line representing a VSID
      		FORMAT: 
      		FQN|FileNameBase|Label
      		
      		@return StringQueue containing the lines written to the vsid-list file
      		
      		@throws ERR_PARAMETER_BLANK if source VSID is Nothing 
      	%END REM
      	Function update_VSIDlist(source As VSID) As StringQueue  
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source VSID is Nothing.  |
      		On Error GoTo ErrorTrap
      		
      		Dim VSIDsInfo As StringQueue ' VSID List Information for all VSIDs.  FORMAT: FQN|FileNameBase|Label
      		
      
      		Dim sl As New StringList() 
      		Dim result As New StringQueue()
      		Dim values As Variant   
      		Dim VSIDchunks(2) As String 
      		
      		Dim fileinfo$ 
      		Dim tag$ 
      		Dim target$ 
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      
      		Dim byteswritten&
      		
      
      		' BEGIN CODE 
      		extendedinfo(|Target Directory|) = Me.DocumentationDirectory
      		target$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & |vsid-list|
      		extendedinfo(|Target|) = target$ 
      		
      		Set VSIDsInfo = readTextFileToStringQueue(target$)
      		While VSIDsInfo.hasContent 
      			fileinfo$ = VSIDsInfo.pop() 
      			If Not isBlankString(fileinfo$) Then 
      				values = Split(fileinfo$, "|") 
      				sl.setElementValue(values(0)), fileinfo$
      			End If
      		Wend
      
      		If Not sl.hasTag(source.FQN) Then 
      			' only update the vsid-list if the VSID represents new content 
      			VSIDchunks(0) = source.FQN 
      			VSIDchunks(1) = source.FileNameBase
      			VSIDchunks(2) = source.Label
      			sl.setElementValue source.FQN, Join(VSIDchunks, "|") 
      			
      			values = sl.sortedListTags
      			ForAll element In values 
      				tag$ = CStr(element) 
      				result.push sl.getValue(tag$)
      			End ForAll
      			
      			byteswritten& = write_StringQueueToFile(result, target$)
      		Else 
      			values = sl.sortedListTags
      		End If
      
      
      		' Need to update result because previous method call clears it (if successful)
      		Call result.clear()
      		ForAll element In values 
      			tag$ = CStr(element) 
      			result.push sl.getValue(tag$)
      		End ForAll
      		
      		
      	ExitPoint:
      		Set update_VSIDlist = result
      		Exit Function
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      
      
      	%REM
      		Sub writeAPIdoc_MajorElementsFiles
      		Updates the API documentation majorelements file
      		
      		The majorelements file contains lines of formmated text, with each line representing a MajorElement
      		FORMAT: 
      		InstanceType|FQN|Relative Filepath|Label
      
      		@param source API documentation MajorElement whose content MajorElements information should be written to the majorelements file.
      		
      		@return StringQueue containing the lines written to the majorelements file
      		
      		@throws ERR_PARAMETER_BLANK if source Major Element is Nothing 
      	%END REM
      	Function writeAPIdoc_MajorElementsFiles(source As MajorElement) As StringQueue  
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source MajorElement is Nothing.  |
      		On Error GoTo ErrorTrap
      		
      		
      		Dim mel As MajorElement
      		Dim result As New StringQueue() 
      		Dim ss As New StringStack() 
      		
      		Dim values As Variant  
      
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim strvalue$ 
      		Dim target$
      		Dim filepath$ 
      		Dim relativepath$ 
      		
      		Dim byteswritten& 
      		
      		
      		' BEGIN CODE 
      		extendedinfo(|Target Directory|) = Me.DocumentationDirectory
      		
      		filepath$ = Me.getCodeElementFilepath(source, (SIGNATURE_VALUE_VSID <> source.InstanceCode)) & DIRECTORY_DELIMITER
      		relativepath$ = StrRight(filepath$, Me.DocumentationDirectory & DIRECTORY_DELIMITER)
      		target$ = filepath$ & |majorelements|
      		extendedinfo(|Target Filepath|) = target$ 
      		
      		If source.hasMajorElements Then 
      			ForAll element In source.MajorElements 
      				Set mel = element
      				ss.load Me.writeAPIdoc_MajorElementsFiles(mel)
      				ss.push mel.InstanceType & "|" & mel.FQN & "|" & relativepath$ & mel.FileNameBase & ".html|" & mel.Label 				
      			End ForAll
      			
      			
      			Call ss.clearDuplicates() ' do not include duplicates
      			Call ss.sort()
      			values = ss.values  
      			ForAll stringvalue In values 
      				result.push CStr(stringvalue)
      			End ForAll 
      
      			byteswritten& = write_StringQueueToFile(result, target$)
      			
      			' Need to update result because previous method call conditionally clears it (if successful)
      			Call result.clear()
      			ForAll stringvalue In values 
      				result.push CStr(stringvalue)  
      			End ForAll 
      		End If
      
      
      	ExitPoint:
      		Set writeAPIdoc_MajorElementsFiles = result
      		Exit Function
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      
      
      	%REM
      		Sub writeAPIdoc_VSIDFrameHTML
      		Writes the API documentation vsid-frame.html file for the specific VSID
      		
      		@param source API documentation VSID for which to write the vsid-frame.html file 
      		
      		@throws ERR_PARAMETER_BLANK if source VSID is Nothing 
      	%END REM
      	Sub writeAPIdoc_VSIDFrameHTML(source As VSID)
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source VSID is Nothing.  |
      		On Error GoTo ErrorTrap
      		
      		Dim mel As MajorElement 
      		Dim library As Library
      		
      		Dim divcontent As New StringsCarrier() 
      		Dim detail As New StringList() 
      		Dim classitems As New StringList() 
      		Dim typeitems As New StringList()
      		Dim sq As New StringQueue()
      
      		Dim unorderedlist As StringsCarrier 
      		Dim html As StringQueue
      		Dim fqns As StringQueue 
      
      		Dim hasTypes As Boolean
      		
      		Dim filepath$ 
      		Dim temp$
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		' BEGIN CODE 
      		filepath$ = Me.createCodeElementFilepath(source, False) & DIRECTORY_DELIMITER & |vsid-frame.html|
      		extendedinfo(|Target Filepath|) = filepath$
      		
      		If source.hasVSEs Then
      			temp$ = getMajorElementsUnorderedList(source.VSEs, |VSEs|, ||)
      			If Not isBlankString(temp$) Then divcontent.push temp$ 
      		End If		
      
      		If source.hasLibraries Then
      			temp$ = getMajorElementsUnorderedList(source.Libraries, |Libraries|, ||)
      			If Not isBlankString(temp$) Then divcontent.push temp$  
      		End If
      		
      		If source.hasMajorElements Then 
      			ForAll element In source.MajorElements 
      				Set mel = element 
      				If mel.hasClasses Then
      					Call classitems.addAll(getMajorElementsListItems(mel.Classes, mel.FileNameBase & DIRECTORY_DELIMITER))
      				End If
      				
      				If SIGNATURE_VALUE_LIBRARY = mel.InstanceCode Then
      					Set library = mel
      					If (library.hasTypes) Then
      						hasTypes = True
      						Call typeitems.addAll(getMajorElementsListItems(library.types, mel.FileNameBase & DIRECTORY_DELIMITER))
      					End If
      				End If
      			End ForAll
      		End If
      		
      		If source.hasClasses Then
      			Call classitems.addall(getMajorElementsListItems(source, ||))
      		End If
      
      		If typeitems.hasContent Then 
      			Call sq.clear()
      			Set unorderedlist = getVSIDstubContent(|html|).getValue(|UnorderedList|) 
      
      			Set fqns = sortFQNbyLabel(typeitems.listTags) 
      			While fqns.hasContent 
      				sq.push typeitems.getValue(fqns.pop())
      			Wend
      
      			Call detail.clear() 
      			detail.setElementValue |label|, |Types| 
      			detail.setElementValue |listitems|, sq.joinContent(||)
      			temp$ = detail.replaceMoustacheTags(unorderedlist).joinContent(||) 
      			If Not isBlankString(temp$) Then divcontent.push temp$ 
      		End If
      		
      		If classitems.hasContent Then 
      			Call sq.clear()
      			Set unorderedlist = getVSIDstubContent(|html|).getValue(|UnorderedList|) 
      
      			Set fqns = sortFQNbyLabel(classitems.listTags) 
      			While fqns.hasContent 
      				sq.push classitems.getValue(fqns.pop())
      			Wend
      
      			Call detail.clear() 
      			detail.setElementValue |label|, |Classes| 
      			detail.setElementValue |listitems|, sq.joinContent(||)
      			temp$ = detail.replaceMoustacheTags(unorderedlist).joinContent(||)
      			If Not isBlankString(temp$) Then divcontent.push temp$ 
      		End If
      
      		detail.setElementValue |filenamebase|, source.FileNameBase
      		detail.setElementValue |fqn|, source.FQN 
      		detail.setElementValue |divcontent|, divcontent.joinContent(||)
      		
      		detail.setElementValue |pagetitle|, source.fqn & | (Balidoc)|   
      		detail.setElementValue |resourcepath|, |../| & FOLDERNAME_RESOURCES
      		detail.setElementValue |keywords|, ||
      		
      		Set html = generateNavHTML(detail, |HTML_VSID-FRAME|, False)
      
      		writeAPIdoc detail, html, filepath$ 
      		
      	ExitPoint:
      		Exit Sub
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      
      
      	%REM
      		Sub writeAPIdoc_OverviewFrameHTML
      		Writes the API documentation OverView Frame HTML file.
      				
      		The vsid-list file contains lines of formmated text, with each line representing a VSID
      		FORMAT: 
      		FQN|Relative Filepath|Label
      
      		@param source StringQueue containing the VSID information for all current API documentation VSIDs 
      
      	%END REM
      	Sub writeAPIdoc_OverviewFrameHTML(source As StringQueue)
      		If source Is Nothing Then GoTo ExitPoint   
      		On Error GoTo ErrorTrap
      		
      		Dim detail As New StringList()
      		Dim summaryrows As New StringsCarrier()  
      		Dim html As StringQueue
      		
      		Dim values As Variant 
      		Dim chunks As Variant
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim infoline$
      		Dim summaryrow As StringsCarrier
      		Dim relativepath$
      		Dim filepath$
      		
      		' BEGIN CODE
      		filepath$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & |overview-frame.html|
      		extendedinfo(|filepath|) = filepath$ 
      		
      		Set summaryrow = getVSIDstubContent(|html|).getValue(|LinkedListItem|)
      		
      		If source.hasContent Then
      			values = source.values 
      			
      			ForAll stringvalue In values 
      				Call detail.clear() 
      				infoline$ = CStr(stringvalue)
      				extendedinfo(|infoline|) = infoline$
      				chunks = Split(infoline$, "|")
      				
      				detail.setElementValue |linktarget|, FRAMENAME_VSID
      				detail.setElementValue |fqn|, chunks(0)
      				If (UBound(chunks) > 0) Then 
      					detail.setElementValue |summarylink|, chunks(1) & DIRECTORY_DELIMITER & |vsid-frame.html| 
      					If (UBound(chunks) > 1) Then detail.setElementValue |label|, chunks(2)
      				End If 
      				summaryrows.load detail.replaceMoustacheTags(summaryrow) 
      			End ForAll			
      		End If
      
      		Call detail.clear()
      		detail.setElementValue |pagetitle|, |API documentation VSIDs|  
      		detail.setElementValue |vsids|, summaryrows.joinContent(||)  
      		detail.setElementValue |resourcepath|, FOLDERNAME_RESOURCES
      		detail.setElementValue |keywords|, Replace(getVSIDstubContent(|html|).getValue(|HTML_HEAD_KEYWORD|).joinContent(||), |{{keyword}}|, |Overview List, API documentation VSIDs|)
      		
      		Set html = generateNavHTML(detail, |HTML_OVERVIEW-FRAME|, True)
      		writeAPIdoc detail, html, filepath$ 
      	
      		
      	ExitPoint: 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      	
      
      	%REM
      		Sub writeAPIdoc_OverviewSummaryHTML
      		Writes the API documentation OverView Summary HTML file.
      
      		The vsid-list file contains lines of formmated text, with each line representing a VSID
      		FORMAT: 
      		FQN|Relative Filepath|Label
      		
      		@param source StringQueue containing the VSID information for all current API documentation VSIDs 
      		
      	%END REM
      	Sub writeAPIdoc_OverviewSummaryHTML(source As StringQueue)
      		If source Is Nothing Then GoTo ExitPoint   
      		On Error GoTo ErrorTrap
      		
      		Dim detail As New StringList()
      		Dim summaryrows As New StringsCarrier()  
      		Dim summarytable As StringsCarrier
      		Dim summaryrow As StringsCarrier
      		
      		Dim html As StringQueue 
      		
      		Dim values As Variant 
      		Dim chunks As Variant
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		Dim infoline$
      		
      
      		Dim relativepath$
      		Dim filepath$
      		
      		' BEGIN CODE
      		filepath$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & |overview-summary.html|
      		extendedinfo(|filepath|) = filepath$ 
      		
      		Set summaryrow = getVSIDstubContent(|html|).getValue(|LinkedSummaryRow|)
      		
      		If source.hasContent Then
      			values = source.values 
      			
      			ForAll stringvalue In values 
      				Call detail.clear() 
      				infoline$ = CStr(stringvalue)
      				extendedinfo(|infoline|) = infoline$
      				chunks = Split(infoline$, "|")
      				
      				detail.setElementValue |linktarget|, FRAMENAME_VSID
      				detail.setElementValue |fqn|, chunks(0)
      				If (UBound(chunks) > 0) Then 
      					detail.setElementValue |summarylink|, chunks(1) & DIRECTORY_DELIMITER & chunks(1) & |.html|
      					If (UBound(chunks) > 1) Then detail.setElementValue |label|, chunks(2)
      				End If
      				detail.setElementValue |value|, ||
      				summaryrows.load detail.replaceMoustacheTags(summaryrow) 
      			End ForAll			
      		End If
      
      		Call detail.clear()
      		detail.setElementValue |tablesummaryrows|, summaryrows.joinContent(||)
      		detail.setElementValue |tablesummary|, |Project Instances table, listing Project instances.|
      		detail.setElementValue |tablesummaryanchorname|, |vsids.summary|
      		detail.setElementValue |summarytableheading|, |Project Instances|
      		detail.setElementValue |tablesummaryheadrows|, ||
      		Set summarytable = detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|))
      		
      		Call detail.clear()
      		detail.setElementValue |pagetitle|, |API documentation VSIDs|  
      		detail.setElementValue |vsidsummary|, summarytable.joinContent(||)
      		detail.setElementValue |resourcepath|, FOLDERNAME_RESOURCES
      		detail.setElementValue |keywords|, Replace(getVSIDstubContent(|html|).getValue(|HTML_HEAD_KEYWORD|).joinContent(||), |{{keyword}}|, |Overview List, API documentation VSIDs|)
      		detail.setElementValue |label|, ||
      		detail.setElementValue |summarylinks|, ||
      		detail.setElementValue |navlistparentlinks|, ||
      		
      		
      		Set html = generatePageHTML(detail, getVSIDstubContent(|html|).getValue(|HTML_OVERVIEW-SUMMARY|), False)
      		writeAPIdoc detail, html, filepath$ 
      	
      		
      	ExitPoint: 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      	
      
      	%REM
      		Sub writeAPIdoc_MajorElementsFrameHTML
      		Writes the API documentation Nav-Content-Frame HTML file. 
      	%END REM
      	Sub writeAPIdoc_MajorElementsFrameHTML()
      		On Error GoTo ErrorTrap
      		
      		Dim detail As New StringList()
      
      		Dim melinfolist List As StringsCarrier 
      		Dim rows List As StringsCarrier
      		Dim ul As New StringsCarrier()
      		Dim summaryrows As StringsCarrier
      		Dim summaryrow As StringsCarrier 
      		Dim ulstub As New StringsCarrier()
      		
      		Dim vsidsInfo As StringQueue ' VSID List Information for all VSIDs.  
      		'			FORMAT: 
      		'			FQN|FileNameBase|Label
      		
      		
      		Dim melinfo As New StringQueue() ' MajorElement information to be written. 
      		'			Format: 
      		'			InstanceType|FQN|RelativePath|Label
      		'			
      		'			InstanceType: 	The type of MajorElement (VSID, VSE, Library, Class, etc)
      		'			FQN: 			Fully Qualified Name of the Major Element 
      		'			RelativePath: 	Relative path to the HTML File for the Major Element 
      		'			Label: 			Label for the Major Element 		
      		
      		Dim meltemp As StringQueue
      		Dim primarymajorelements(3) As String  
      
      		Dim html As StringQueue
      
      		Dim melrows As Variant 		
      
      		Dim values As Variant 
      		Dim chunks As Variant 
      
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim stringvalue$
      		Dim instancetype$ 
      		Dim fqn$ 
      		Dim relativepath$ 
      		Dim label$ 
      		Dim filepath$
      		Dim fileinfo$
      		Dim tag$
      		
      		
      		' BEGIN CODE
      		filepath$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & |vsid-list|
      		extendedinfo(|filepath|) = filepath$ 
      		
      		Set vsidsInfo = readTextFileToStringQueue(filepath$)
      		While vsidsInfo.hasContent 
      			fileinfo$ = vsidsInfo.pop() 
      			If Not isBlankString(fileinfo$) Then 
      				values = Split(fileinfo$, "|") 
      				filepath$ = values(1) 
      				filepath$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & values(1) & DIRECTORY_DELIMITER & |majorelements|
      				Set meltemp = readTextFileToStringQueue(filepath$) 
      				If Not (meltemp Is Nothing) Then 
      					If meltemp.hasContent Then Call melinfo.load(meltemp)
      				End If
      			End If
      		Wend
      
      
      		If melinfo.hasContent Then 
      			filepath$ = Me.DocumentationDirectory & DIRECTORY_DELIMITER & |majorelements-frame.html|
      			extendedinfo(|filepath|) = filepath$ 
      
      			' change the melinfo format from InstanceType|FQN|RelativePath|Label to Label FQN InstanceType|RelativePath 
      			melrows = melinfo.values 
      			Call melinfo.clear() 
      			ForAll element In melrows 
      				Call detail.clear() 
      				stringvalue$ = CStr(element) 
      				extendedinfo(|String Value|) = stringvalue$
      				' InstanceType|FQN|RelativePath|Label 
      				chunks = Split(stringvalue$, "|") 
      				instancetype$ = chunks(0)
      				fqn$ = chunks(1) 
      				relativepath$ = chunks(2) 
      				label$ = chunks(3) 		 
      				melinfo.push label$ & | | & fqn$ & | | & instancetype$ & "|" & relativepath$
      			End ForAll 			
      			
      			' Sort values
      			
      			Call melinfo.sort() 
      			values = melinfo.values 
      			
      			Set summaryrow = getVSIDstubContent(|html|).getValue(|LinkedListItem|)
      			ForAll element In values 
      				Call detail.clear() 
      				stringvalue$ = CStr(element) 
      				extendedinfo(|String Value|) = stringvalue$ 
      				
      				' Label FQN InstanceType|RelativePath
      				chunks = Split(stringvalue$, " ") 
      				instancetype$ = StrLeft(chunks(2), "|")
      				fqn$ = chunks(1) 
      				relativepath$ = StrRight(chunks(2), "|") 
      				label$ = chunks(0) 
      				
      				detail.setElementValue |linktarget|, FRAMENAME_CONTENT
      				detail.setElementValue |fqn|,  fqn$
      				detail.setElementValue |label|, label$
      				detail.setElementValue |summarylink|, relativepath$ 
      				
      				If Not IsElement(rows(instancetype$)) Then Set rows(instancetype$) = New StringsCarrier()
      				rows(instancetype$).push detail.replaceMoustacheTags(summaryrow).joinContent(||)
      			End ForAll
      
      
      			' Primary Major Element Types and Labels in the order in which they should appear
      			primarymajorelements(0) = "VSE|VSEs"
      			primarymajorelements(1) ="Library|Libraries"
      			primarymajorelements(2) = "Type|Types"
      			primarymajorelements(3) = "Class|Classes"
      			
      			ulstub.load getVSIDstubContent(|html|).getValue(|UnorderedList|)
      			
      			ForAll pme In primarymajorelements 
      				chunks = Split(pme, "|")
      				tag$ = chunks(0) 
      				instancetype$ = chunks(1) 
      				If IsElement(rows(tag$)) Then
      					Call detail.clear()
      					detail.setElementValue |label|, instancetype$  
      					detail.setElementValue |listitems|, rows(tag$).joinContent(||)  
      					ul.load detail.replaceMoustacheTags(ulstub)
      					
      					Erase rows(tag$)			
      				End If 
      			End ForAll
      			
      			
      			' Handle any additional Major Elements
      			ForAll sre In rows 
      				Call detail.clear()
      				instancetype$ = ListTag(sre) 
      				Set summaryrows = sre
      				
      				detail.setElementValue |label|, instancetype$  
      				detail.setElementValue |listitems|, summaryrows.joinContent(||)  
      				ul.load detail.replaceMoustacheTags(ulstub)
      			End ForAll
      			
      			Call detail.clear() 		
      			
      			detail.setElementValue |pagetitle|, |All Major Elements|
      			detail.setElementValue |resourcepath|, FOLDERNAME_RESOURCES
      			detail.setElementValue |keywords|, ||
      			detail.setElementValue |content|, ul.joinContent(||)  
      			
      			Set html = generateNavHTML(detail, |HTML_MAJORELEMENTS-FRAME|, False)
      			writeAPIdoc detail, html, filepath$ 
      
      		End If
      
      		
      	ExitPoint: 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      	
      
      
      
      	%REM
      		Sub updateBalidoc_Frameset
      		Updates the API documentation Frameset Files 
      		
      		@param source API documentation VSID to be checked / added to the vsid-list file
      		
      		@throws ERR_PARAMETER_BLANK if source VSID is Nothing 
      	%END REM
      	Sub updateBalidoc_Frameset(source As VSID)
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source VSID is Nothing.  |
      		On Error GoTo ErrorTrap
      		
      		Dim detail As New StringList()  
      		
      		Dim vsidsInfo As StringQueue ' VSIDs Information of all VSIDs
      		
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		
      		' BEGIN CODE
      		If Me.isUpdatingFrameset Then GoTo ExitPoint 
      		Me.updatingframeset_ = True 
      		Set vsidsInfo = Me.update_VSIDlist(source)
      		Call Me.writeAPIdoc_OverviewFrameHTML(vsidsInfo)
      		Call Me.writeAPIdoc_OverviewSummaryHTML(vsidsInfo)
      		Call Me.writeAPIdoc_VSIDFrameHTML(source) 
      		Call Me.writeAPIdoc_MajorElementsFrameHTML()
      		Call Me.write_IndexHTML()
      		
      		Me.updatingframeset_ = False  
      		
      	ExitPoint: 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Sub
      
      	
      	
      	%REM
      	Function getCodeElementFilepath
      	Generates a Filepath for a CodeElement
      	
      	Concatenates the TargetFolder and the CodeElement's Parent Hierarchy to compute the filepath 
      	
      	@param source CodeElement object from which to create the filepath 
      	@param includesource Flag indicating if the source CodeElement's FileNameBase should be included in the filepath
      	
      	@return Filepath for the CodeElement
      	
      	@throws ERR_PARAMETER_BLANK if source CodeElement is Nothing 
      	%END REM
      	Function getCodeElementFilepath(source As CodeElement, includesource As Boolean ) As String
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source CodeElement is Nothing|
      		On Error GoTo ErrorTrap
      		
      		
      		Dim parent As CodeElement 
      		Dim suffixes As New StringStack() 
      		Dim components As New StringQueue()
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		Dim tempstr$
      		Dim result$
      		
      		' BEGIN CODE
      		extendedinfo(|Target Folder|) = Me.DocumentationDirectory  
      		extendedinfo(|CodeElement|) = source.FQN  
      
      		
      		If Not isBlankString(Me.DocumentationDirectory) Then
      			tempstr$ = Me.DocumentationDirectory 
      			If getBaliStrings().endsWith(tempstr$, DIRECTORY_DELIMITER) Then tempstr$ = StrLeftBack(tempstr$, DIRECTORY_DELIMITER)  
      			Call components.push(tempstr$)
      		End If  		
      
      		If includesource Then Call suffixes.push(source.FileNameBase) 
      
      		If source.parent Is Nothing Then 
      			If SIGNATURE_VALUE_VSID = source.InstanceCode Then Call suffixes.push(source.FileNameBase) 
      		Else	
      			Set parent = source.Parent 
      			While Not (parent Is Nothing) 
      				If Not isBlankString(parent.FileNameBase) Then Call suffixes.push(parent.FileNameBase)
      				
      				Set parent = parent.Parent 
      			Wend
      		End If
      		
      		If suffixes.hasContent Then
      			tempstr$ = suffixes.pop() 
      			While Not isBlankString(tempstr$) 
      				Call components.push(tempstr$)
      				tempstr$ = suffixes.pop()	
      			Wend 
      		End If
      		
      		result$ = components.joinContent(DIRECTORY_DELIMITER)
      		
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		getCodeElementFilepath = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$() 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      
      
      	%REM
      	Function getCodeElementRootPath
      	Generates a relative filepath to the root API documentation folder for a CodeElement 
      	
      	Creates a ../.. pattern as as appropriate for the CodeElement's Parent Hierarchy 
      	
      	@param source CodeElement object from which to create the relative root filepath
      	
      	@return relative root filepath for the CodeElement
      	
      	@throws ERR_PARAMETER_BLANK if source CodeElement is Nothing 
      	%END REM
      	Function getCodeElementRootPath(source As CodeElement) As String
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source CodeElement is Nothing|
      		On Error GoTo ErrorTrap
      		
      		
      		Dim parent As CodeElement 
      		Dim components As New StringQueue()
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		Dim result$
      		
      		' BEGIN CODE
      		extendedinfo(|CodeElement|) = source.FQN  
      		
      		If source.parent Is Nothing Then 
      			If SIGNATURE_VALUE_VSID = source.InstanceCode Then Call components.push(|..|) 
      		Else
      			Set parent = source.Parent 
      			While Not (parent Is Nothing) 
      				Call components.push(|..|) 
      				Set parent = parent.Parent 
      			Wend
      		End If 
      		
      		result$ = components.joinContent(DIRECTORY_DELIMITER)
      		
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		getCodeElementRootPath = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$() 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      	
      	
      	
      
      	
      
      	%REM
      	Function getCodeElementResourcePath
      	Generates a relative filepath to the resources folder for a CodeElement 
      	
      	Creates a ../.. pattern as as appropriate for the CodeElement's Parent Hierarchy 
      	
      	@param source CodeElement object from which to create the resource relative filepath
      	
      	@return relative resource filepath for the CodeElement
      	
      	@throws ERR_PARAMETER_BLANK if source CodeElement is Nothing 
      	%END REM
      	Function getCodeElementResourcePath(source As CodeElement) As String
      		If source Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Source CodeElement is Nothing|
      		On Error GoTo ErrorTrap
      		
      		
      		Dim parent As CodeElement 
      		Dim components As New StringQueue()
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		Dim temp$
      		Dim result$
      		
      		' BEGIN CODE
      		extendedinfo(|CodeElement|) = source.FQN  
      
      		temp$ = Me.getCodeElementRootPath(source)
      		If Not isBlankString(temp$) Then components.push temp$
      		
      		components.push FOLDERNAME_RESOURCES 
      
      		result$ = components.joinContent(DIRECTORY_DELIMITER)
      		
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		getCodeElementResourcePath = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$() 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      	
      	
      	
      	%REM
      	Function createCodeElementFilepath
      	Creates a Filepath for a CodeElement
      	
      	Concatenates the TargetFolder and the CodeElement's Parent Hierarchy to compute the filepath 
      	
      	@param source CodeElement object from which to create the filepath 
      	@param includesource Flag indicating if the source CodeElement's FileNameBase should be included in the filepath
      	
      		
      	@return Filepath for the CodeElement
      	
      	@throws ERR_PARAMETER_BLANK if source CodeElement is Nothing 
      	@throws Exception if the Filepath cannot be created. 
      	%END REM
      	Function createCodeElementFilepath(source As CodeElement, includesource As Boolean) As String
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim errmsg$ 
      		Dim errcode% 
      		
      		Dim filepath$ 
      		Dim result$
      		
      		
      		' BEGIN CODE
      		filepath$ = Me.getCodeElementFilepath(source, includesource) 
      		extendedinfo(|Filepath|) = filepath$ 
      		
      		If makeDirectory(filepath$) Then result$ = filepath$ 
      		
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ 
      		createCodeElementFilepath = result$
      		Exit Function 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error$() 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Function
      	
      End Class 
      
      
      
      %REM
      	Class Method
      	Represents a Method (Sub, Function, or Property) 
      %END REM
      Class Method As CodeElement
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |Method| 
      	End Property
      
      	Private exceptions_() As ExceptionElement 
      	Private arguments_() As ValuedElement 
      
      
      
      	%REM
      		Property Get Arguments
      		Array containing the Method Arguments 
      	%END REM
      	Property Get Arguments As Variant
      		Dim result() As ValuedElement
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.arguments_)) As ValuedElement
      		
      		For i = LBound(me.arguments_) To UBound(me.arguments_) 
      			Set result(i) = me.arguments_(i)  
      		Next  
      		
      		Arguments = result 
      	End Property 
      
      
      	%REM
      		Property Get ArgumentsRemarks
      		Remarks for the Method's Arguments 
      	%END REM
      	Property Get ArgumentsRemarks As StringsCarrier 
      		On Error GoTo ErrorTrap
      	
      		' exception variables
      		Dim extendedinfo List As String 
      	
      		Dim argument As ValuedElement 
      		Dim temp As Variant 
      	
      		Dim result As New StringsCarrier()
      	
      		' BEGIN CODE
      		If me.hasArguments Then
      			temp = me.Arguments 
      			ForAll argelement In temp 
      				Set argument = argelement
      				result.load argument.Script 
      			End ForAll
      		End If
      	
      	ExitPoint: 
      		Set ArgumentsRemarks = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get ArgumentSuffix As String
      		Argument Suffix for the method 
      	%END REM
      	Property Get ArgumentSuffix As String
      		On Error GoTo ErrorTrap
      	
      		Const TAG = |argumentsuffix|
      	
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		Dim argument As ValuedElement
      		Dim remarks() As String
      		Dim tempstr$  
      		Dim result$
      		Dim i%
      
      
      		' BEGIN CODE 
      		result$ = me.getValue(TAG)
      		extendedinfo(|result|) = result$ 
      
      		If isBlankString(result$) Then 
      			If me.hasArguments Then 
      					ReDim remarks(0) As String 
      					
      					For i% = LBound(me.arguments_) To UBound(me.arguments_)
      						extendedinfo(|i%|) = CStr(i%)  
      						Set argument = me.arguments_(i%) 
      						If Not (argument Is Nothing) Then 
      							tempstr$ = argument.Signature 
      							If Not isBlankString(tempstr$) Then 
      								If Not isBlankString(remarks(UBound(remarks))) Then ReDim Preserve remarks(UBound(remarks) + 1) As String
      								remarks(UBound(remarks)) = tempstr$ 
      							End If
      						End If
      					Next
      					
      					result$ = |(| &  Join(remarks, |, |) & |)|
      		
      			ElseIf me.isProperty Then 
      				' do nothing
      			Else 
      				result$ = |()|
      			End If
      			
      			Call me.setElementValue(TAG, result$)
      		End If 
      						
      	ExitPoint: 
      		ArgumentSuffix = result$ 
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property 
      
      
      
      
      	%REM
      		Property Get hasArguments
      		Flag indicating if the Method has Arguments 
      	%END REM
      	Property Get hasArguments As Boolean 
      		hasArguments = Not (me.arguments_(0) Is Nothing) 
      	End Property
      
      
      	%REM
      		Property Get AsType
      		String representing the "As xxxx" type of the object
      	%END REM
      	Property Get AsType As String 
      		On Error GoTo ErrorTrap 
      		
      		Dim extendedinfo List As String 
      		Dim result$
      		
      		' BEGIN CODE
      		extendedinfo(|Label|) = me.Label 
      		
      		If (Not me.ParentProject Is Nothing) Then 
      			If SIGNATURE_VALUE_LIBRARY = me.ParentProject.InstanceCode Then 
      				If (0 = StrComp(|New|, me.Label, 5)) Then GoTo ExitPoint ' do not include me.AsType for New() methods in a Script Library 
      			End If
      		End If 
      
      		result$ = CodeElement..AsType 
      					 
      	ExitPoint:
      		AsType = result$
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0 
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      
      
      	%REM
      		Property Get Exceptions
      		Array containing the Method Exceptions 
      	%END REM
      	Property Get Exceptions As Variant
      		Dim result() As ExceptionElement
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.exceptions_)) As ExceptionElement
      		
      		For i = LBound(me.exceptions_) To UBound(me.exceptions_) 
      			Set result(i) = me.exceptions_(i)  
      		Next  
      		
      		Exceptions = result 
      	End Property 
      
      
      	%REM
      		Property Get hasExceptions
      		Flag indicating if the Method has Exceptions 
      	%END REM
      	Property Get hasExceptions As Boolean 
      		hasExceptions = Not (me.exceptions_(0) Is Nothing) 
      	End Property
      
      
      	%REM
      		Getter
      		Flag indicating if the Method is a Getter Property
      	%END REM
      	Property Get isGetter As Boolean 
      		isGetter = (SIGNATURE_VALUE_GET = (Me.SignatureCode And SIGNATURE_VALUE_GET))
      	End Property
      	
      
      	%REM
      		Property Get isSetter
      		Flag indicating if the Method is a Setter Property 
      	%END REM
      	Property Get isSetter As Boolean 
      		isSetter = (SIGNATURE_VALUE_SET = (Me.SignatureCode And SIGNATURE_VALUE_SET))
      	End Property
      	
      
      	%REM
      		Property Get isSub
      		Flag indicating if the Method is a Sub 
      	%END REM
      	Property Get isSub As Boolean 
      		isSub = (SIGNATURE_VALUE_SUB = (Me.SignatureCode And SIGNATURE_VALUE_SUB))
      	End Property
      	
      	
      	%REM
      		Property Get isFunction
      		Flag indicating if the Method is a Function 
      	%END REM
      	Property Get isFunction As Boolean 
      		isFunction = (SIGNATURE_VALUE_FUNCTION = (Me.SignatureCode And SIGNATURE_VALUE_FUNCTION))
      	End Property
      	
      	
      	%REM
      		Property Get isEvent
      		Flag indicating if the Method is an Event
      	%END REM
      	Property Get isEvent As Boolean 
      		isEvent = (SIGNATURE_VALUE_EVENT = (Me.SignatureCode And SIGNATURE_VALUE_EVENT))
      	End Property
      	
      	
      	%REM
      		Property Get isProperty
      		Flag indicating if the Method is a Property 
      	%END REM
      	Property Get isProperty As Boolean 
      		isProperty = (SIGNATURE_VALUE_PROPERTY = (Me.SignatureCode And SIGNATURE_VALUE_PROPERTY))
      	End Property
      	
      	
      	%REM
      		Property Get MethodType
      		String representation of the Method Type (Sub, Function, or Property) 
      	%END REM
      	Property Get MethodType As String 
      		Dim result$ 
      		
      		If me.isSub Then 
      			result$ = |Sub| 
      		ElseIf me.isFunction Then 
      			result$ = |Function|
      		ElseIf me.isProperty Then
      			result$ = |Property| 
      		End If
      
      		MethodType = result$
      		
      	End Property
      
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sc As New StringsCarrier() 
      		Dim ve As ValuedElement  
      		Dim ee As ExceptionElement 
      		Dim args As Variant
      		
      		Dim result$
      
      		Dim i As Integer 
      		Dim u As Integer 
      		
      		' BEGIN CODE
      		result$ = CodeElement..JSON
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      		
      		If me.hasArguments Then 
      			Call sc.clear() 
      			ForAll arg In me.arguments_ 
      				Set ve = arg 
      				sc.push ve.JSON
      			End ForAll
      
      			result$ = result$ & |, "arguments":[|  & sc.joinContent(|,|) & |]|
      		End If 
      
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim result As New StringList()
      		Dim detail As New StringList()  
      
      		Dim extendedinfo List As String 
      
      		Dim aa As ValuedElement
      		Dim ee As ExceptionElement 
      		Dim pc As ObjectClass 
      		Dim pp As Project 
      		Dim prop As Method  
      
      		Dim temp_a As New StringsCarrier()
      
      		
      		' BEGIN CODE  
      		Set result = CodeElement..TaggedValues
      		
      		result.setElementValue |signatureprefix|, me.SignaturePrefix
      		result.setElementValue |argumentsuffix|, me.ArgumentSuffix
      		result.setElementValue |astype|, me.AsType 	
      		result.setElementValue |methoddetailcontent|, ||
      		result.setElementValue |codesample|, me.CodeSample  
      		result.setElementValue |returns|, me.ValueType
      		
      		result.setElementValue |getset|, || 
      		If (me.isSetter) Then
      			result.setElementValue |getset|, | (Set)|
      			
      		ElseIf (me.isGetter) Then 
      			result.setElementValue |getset|, | (Get)|
      			
      		End If
      
      		
      		detail.setElementValue |methodarguments|, || 
      		detail.setElementValue |methodexceptions|, || 
      		detail.setElementValue |methodcomment|, || 
      		detail.setElementValue |methodcodesample|, || 
      		detail.setElementValue |fqn|, me.FQN 
      
      
      		If getContext().GeneratingAPIdoc Then 
      			If me.hasArguments Then 
      				Call temp_a.clear() 
      				ForAll argument In me.arguments_ 
      					Set aa = argument 
      					temp_a.load aa.apiDoc
      				End ForAll  
      				
      				detail.setElementValue |arguments|, temp_a.joinContent(||) 
      				detail.setElementValue |methodarguments|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodArguments|)).joinContent(||)
      			End If
      			
      			If me.hasExceptions Then 
      				Call temp_a.clear() 
      				ForAll exception In me.exceptions_ 
      					Set ee = exception 
      					temp_a.load ee.apiDoc 
      				End ForAll
      	
      				detail.setElementValue |exceptions|, temp_a.joinContent(||) 
      				detail.setElementValue |methodexceptions|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodExceptions|)).joinContent(||)
      			End If
      
      
      			If Not isBlankString(me.CodeSampleHTML) Then
      				detail.setElementValue |codesamplehtml|, me.CodeSampleHTML 
      				detail.setElementValue |methodcodesample|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodCodeSample|)).joinContent(||)
      			End If
      	
      			If Not isBlankString(me.apiComment) Then
      				detail.setElementValue |commenthtml|, me.apiComment
      				detail.setElementValue |methodcomment|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodComment|)).joinContent(||)
      			End If
      		End If 
      
      
      		If (me.ParentClass Is Nothing) Then 
      			detail.setElementValue |classname|, |""|
      		Else 
      			Set pc = me.ParentClass
      			extendedinfo(|ParentClass|) = pc.Label  
      			If pc.hasProperty(|CLASS_NAME|) Then  
      				Set prop = pc.getMethod(|CLASS_NAME|)
      				detail.setElementValue |classname|, prop.Label
      			Else 
      				detail.setElementValue |classname|, |"| & pc.Label & |"| 
      			End If
      		End If
      
      		If (me.ParentProject Is Nothing) Then 
      			detail.setElementValue |modulename|, |""|
      		Else 
      			Set pp = me.ParentProject 
      			extendedinfo(|ParentProject|) = pp.Label  
      			If pp.hasProperty(|MODULE_NAME|) Then  
      				Set prop = pp.getMethod(|MODULE_NAME|)
      				detail.setElementValue |modulename|, prop.Label
      			Else 
      				detail.setElementValue |modulename|, |"| & pp.Label & |"| 
      			End If
      		End If
      
      		
      		If isBlankString(me.ValueType) Then 
      			result.setElementValue |valuetype|, |Variant| 
      		Else
      			detail.setElementValue |returns|, me.ValueType  
      		End If
      
      		If detail.hasContent Then 
      			If getContext().GeneratingAPIdoc Then result.setElementValue |methoddetailcontent|, detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|MethodDetailContent|)).joinContent(||)
      			result.setElementValue |modulename|, detail.getValue(|modulename|)
      			result.setElementValue |classname|, detail.getValue(|classname|) 
      		End If 
      		
      		result.setElementValue |methodsetreturnvalue|, || 
      		If me.isFunction Or me.isGetter Then
      			If me.isValueTypeObject Then 
      				result.setElementValue |methodsetreturnvalue|, |Set | & me.Label & | = result|
      			Else
      				result.setElementValue |methodsetreturnvalue|, me.Label & | = result|
      			End If
      		End If 
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint 
      	End Property
      
      
      
      
      
      	%REM
      		Property Get TaggedStringsCarriers
      		Tagged StringsCarriers for the Object. 
      		k = Tag
      		v = StringsCarrier  
      	%END REM
      	Property Get TaggedStringsCarriers As StringsCarrierList 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      
      		Dim sc As StringsCarrier
      		
      		Dim argument As ValuedElement 
      		Dim exception As ExceptionElement
      		Dim result As StringsCarrierList 
      
      		Dim temp As Variant 
      		
      		
      		' BEGIN CODE
      		Set result = CodeElement..TaggedStringsCarriers 
      
      
      		' Arguments   
      		result.setElementValue |argumentsremarks|, me.ArgumentsRemarks 
      
      
      		' Return Value 
      		result.setElementValue |returnsremarks|, me.ReturnsRemarks
      
      
      		' Exceptions 
      		result.setElementValue |exceptionsremarks|, me.ExceptionsRemarks
      
      	ExitPoint: 
      		Set TaggedStringsCarriers = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get ReturnsRemarks
      		Remarks for the Method's Returns value 
      	%END REM
      	Property Get ReturnsRemarks As StringsCarrier 
      		On Error GoTo ErrorTrap
      	
      		' exception variables
      		Dim extendedinfo List As String 
      	
      		Dim argument As ValuedElement 
      		Dim temp As Variant 
      	
      		Dim result As New StringsCarrier()
      		Dim detail As StringList 
      	
      		' BEGIN CODE
      		If me.isFunction Or (me.isProperty And Not me.isSetter) Then
      			Set detail = New StringList() 
      			detail.setElementValue |returns|, me.ValueType
      			result.load detail.replaceMoustacheTags(getVSIDstubContent(|vss|).getValue(|MethodReturns|))
      		End If
      	
      	ExitPoint: 
      		Set ReturnsRemarks = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get ExceptionsRemarks
      		Remarks for the Method's Exceptions 
      	%END REM
      	Property Get ExceptionsRemarks As StringsCarrier 
      		On Error GoTo ErrorTrap
      	
      		' exception variables
      		Dim extendedinfo List As String 
      	
      		Dim exception As ExceptionElement
      	
      		Dim argument As ValuedElement 
      		Dim temp As Variant 
      	
      		Dim result As New StringsCarrier()
      	
      		' BEGIN CODE
      		If me.hasExceptions Then
      			temp = me.Exceptions 
      			ForAll errelement In temp 
      				Set exception = errelement 
      				result.load exception.Script 
      			End ForAll
      		End If
      	
      	ExitPoint: 
      		Set ExceptionsRemarks = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get Signature
      		Signature of the Object 
      	%END REM
      	Property Get Signature As String 
      		Dim parentconstructor$ 
      		Dim result$
      
      		result$ = me.SignaturePrefix & me.ArgumentSuffix & me.AsType
      		If getContext().GeneratingScript Then 
      			parentconstructor$ = me.getValue(|parentconstructor|) 
      			If Not isBlankString(parentconstructor$) Then result$ = result$ & |, | & parentconstructor$
      		End If 
      		
      		Signature = result$ 
      	End Property
      
      
      	%REM
      		Sub appendArgument
      		Appends an Argument to the Method 
      	%END REM
      	Sub appendArgument(source As ValuedElement)
      		If Not (source Is Nothing) Then 
      			If me.hasArguments Then ReDim Preserve me.arguments_(UBound(me.arguments_) + 1) As ValuedElement  
      		End If 
      		
      		Set me.arguments_(UBound(me.arguments_)) = source 
      	End Sub
      
      
      	%REM
      		Sub appendException
      		Appends an Exception to the Method 
      	%END REM
      	Sub appendException(source As ExceptionElement)
      		If Not (source Is Nothing) Then 
      			If me.hasExceptions Then ReDim Preserve me.exceptions_(UBound(me.exceptions_) + 1) As ExceptionElement  
      		End If 
      		
      		Set me.exceptions_(UBound(me.exceptions_)) = source 
      	End Sub
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param Label Label (Name) for the Method
      		@param ValueType Value Type of the Method
      		@param Comment Comment about the Method
      		@param CodeSample any sample code for the Method
      		@param SignatureCode Long indicating the Method Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the Object
      
      		@throws ERR_INVALID_SIGNATURE_CODE if SignatureCode conflicts with self or not valid for the object for the object 
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)
      		On Error GoTo ErrorTrap
      
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		Dim msg$ 
      		Dim errmsg$
      		Dim errcode%
      		Dim errline%
      		
      		Dim ic& 
      		
      		Dim getset As String
      
      		extendedinfo(|Label|) = Label 
      		extendedinfo(|ValueType|) = ValueType
      		extendedinfo(|Comment|) = Comment 
      		extendedinfo(|CodeSample|) = CodeSample 
      		extendedinfo(|SignatureCode|) = CStr(SignatureCode) 
      		
      		ic& = signatureCodeToInstanceCode(SignatureCode) 
      		
      		extendedinfo(|ic&|) = CStr(ic&)
      		extendedinfo(|Testing|) = |ic&|
      		' verify ic represents an Event, Sub, Function, or Property 
      		If Not ((SIGNATURE_VALUE_EVENT = ic&) _ 
      		Xor (SIGNATURE_VALUE_SUB = ic&) _
      		Xor (SIGNATURE_VALUE_FUNCTION = ic&) _ 
      		Xor (SIGNATURE_VALUE_PROPERTY = ic&)) Then Error ERR_INVALID_SIGNATURE_CODE, MSG_INVALID_SIGNATURE_CODE & |SignatureCode: | & CStr(SignatureCode)
      
      		
      		extendedinfo(|Testing|) = |SignatureCode|
      		' verify SignatureCode represents an Event, Sub, Function, or Property 
      		If Not ((SIGNATURE_VALUE_EVENT = (SignatureCode And SIGNATURE_VALUE_EVENT)) _ 
      		Xor (SIGNATURE_VALUE_SUB = (SignatureCode And SIGNATURE_VALUE_SUB)) _
      		Xor (SIGNATURE_VALUE_FUNCTION = (SignatureCode And SIGNATURE_VALUE_FUNCTION)) _ 
      		Xor (SIGNATURE_VALUE_PROPERTY = (SignatureCode And SIGNATURE_VALUE_PROPERTY))) Then Error ERR_INVALID_SIGNATURE_CODE, MSG_INVALID_SIGNATURE_CODE & |SignatureCode: | & CStr(SignatureCode)
      		
      		If me.isProperty Then
      			If me.isGetter Then 
      				getset = |Get.|
      			Else 
      				getset = |Set.| 
      			End If 
      			
      			me.content_(|qn|) = getset & me.QN 
      		End If
      		
      		
      		ReDim me.arguments_(0) As ValuedElement 
      		ReDim me.exceptions_(0) As ExceptionElement 	
      
      
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ & | at line | & CStr(errline%) & | in | & CLASS_PREFIX & |New() Constructor| 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error() 
      		errline% = Erl()
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		msg$ = || 
      		ForAll s In extendedinfo
      			If isBlankString(msg$) Then 
      				msg$ = ListTag(s) & |: | & s 
      			Else 
      				msg$ = msg$ & |, | & CRLF & ListTag(s) & |: | & s 
      			End If 
      		End ForAll
      		enhLogException CLASS_PREFIX, msg$ 
      		Resume ExitPoint
      	End Sub 
      	
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()  
      		Call CodeElement..updateInternalContent()
      	End Sub
      
      End Class
      
      %REM
      	Class ObjectClass
      	Represents an Object Class
      %END REM
      Class ObjectClass As MajorElement 
      
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |ObjectClass| 
      	End Property
      
      
      	%REM
      		Property Get ConstructorSignature
      		Signature for constructing new instances of the object. 
      	%END REM
      	Property Get ConstructorSignature As String 
      		On Error GoTo ErrorTrap
      		
      		Dim m As Method 
      		
      		' exception variables
      		Dim extendedinfo List As String 
      		
      		
      		Dim result$
      		
      		' BEGIN CODE
      		Set m = me.getMethod(|New|)
      		If Not (m Is Nothing) Then result$ = m.Signature
      		
      	ExitPoint: 
      		ConstructorSignature = result$
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      	
      	
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim result As StringList
      		
      		' BEGIN CODE
      		Set result = MajorElement..TaggedValues
      
      		' conditionally add unexposed constructor message 
      		If |UnexposedNew| = me.getValue(|classattribnewnotexposed|) Then 
      			result.setElementValue |constructormessage|, |Constructor is unexposed|
      		Else
      			result.setElementValue |constructormessage|, ||
      		End If
      
      		
      		
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      	%REM
      		Property Get SummaryTableHTML
      		SummaryTable HTML content for the object
      	%END REM
      	Property Get SummaryTableHTML As StringQueue
      		On Error GoTo ErrorTrap
      	
      		' exception variables
      		Dim extendedinfo List As String 
      	
      		Dim result As New StringQueue()
      		Dim tv As New StringList() 
      		Dim detail As New StringList()
      
      		Dim summaryrows As New StringsCarrier() 
      
      		Dim stubhtml As StringsCarrier
      		Dim sq As StringQueue
      	
      		Dim values As Variant
      		
      		Dim attrib$
      		Dim i% 
      		
      	
      		' BEGIN CODE
      		If getContext().GeneratingAPIdoc Then
      			Set tv = me.TaggedValues 
      			
      			detail.setElementValue |Project ID|, tv.getValue(|projectid|)
      			detail.setElementValue |Version|, tv.getValue(|version|) 
      			detail.setElementValue |Class ID|, tv.getValue(|classid|)
      			attrib$ = tv.getvalue(|lsxclassid|)
      			If Not isBlankString(attrib$) Then Call detail.setElementValue(|VSE Class ID|, attrib$)
      			
      			detail.setElementValue |Class Type|, tv.getValue(|classtype|) 
      			If |Derived| = tv.getValue(|classtype|) Then detail.setElementValue |Derived From|, tv.getValue(|classderivetype|)
      	
      	
      			' Attributes 
      			If tv.hasTag(|attributes|) Then
      				detail.setElementValue |Attributes|, tv.getValue(|attributes|) 
      				If me.hasAttributes Then 
      					values = me.Attributes.values
      					ForAll element In values 
      						attrib$ = CStr(element) 
      													
      						If (|Collection| = attrib$) Then 
      							
      							Set sq = New StringQueue()
      							sq.push(|<table style="margin:-12px 0 0 -10px;">|)
      							sq.push(|<tr>|)
      							sq.push(|<td class="colFirst" rowspan="2">| & tv.getvalue(|attributes|) & |</td>|)
      							sq.push(|<td class="colOne"><span class="memberNameLabel">Collected Items Type</span></td>|)
      							sq.push(|<td class="colLast">| & tv.getvalue(|colitemtype|) & |</td>|)
      							sq.push(|</tr>|)
      							sq.push(|<tr>|)
      							sq.push(|<td class="colFirst"><span class="memberNameLabel">Collection Index</span></td>|)
      							sq.push(|<td class="colLast">| & tv.getvalue(|colindextype|) & |</td>|)
      							sq.push(|</tr>|)
      							sq.push(|</table>|)
      							
      							detail.setElementValue |Attributes|, sq.joinContent(||)
      						End If
      					End ForAll
      				End If 
      				
      				tv.removeElement |attributes|
      			End If
      			
      	
      			Set stubhtml = getVSIDstubContent(|html|).getValue(|LabeledSummaryRow|)
      			
      			i% = 1 
      			values = detail.getContent() 
      			ForAll stringValue In values 
      				Call tv.clear()  
      				tv.setElementValue |label|, ListTag(stringValue) 
      				tv.setElementValue |value|, CStr(stringValue) 
      	
      				If isEven(i%) Then 
      					tv.setElementValue |rowclass|, |rowColor|
      				Else 
      					tv.setElementValue |rowclass|, |altColor|
      				End If
      				
      				summaryrows.push tv.replaceMoustacheTags(stubhtml).joinContent(||) 
      				i% = i% + 1 
      			End ForAll
      	
      			Call detail.clear()  
      			detail.setElementValue |tablesummaryrows|, summaryrows.joinContent(||)
      			detail.setElementValue |tablesummary|, |Class Summary Table|
      			detail.setElementValue |tablesummaryanchorname|, |class.summary|
      			detail.setElementValue |summarytableheading|, |Class Summary|
      			detail.setElementValue |tablesummaryheadrows|, ||
      	
      			result.load detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|))
      		End If 
      	
      	
      	ExitPoint: 
      		Set SummaryTableHTML = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		Dim result$
      
      		' BEGIN CODE
      		result$ = MajorElement..JSON
      
      		result$ = Replace(result$, |"label":| & toJSonValue(me.ClassName), |"classname":| & toJsonValue(me.ClassName))
      
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param ClassName Name of the Class
      		@param ParentClassName Name of the Parent Class (overridden by Parent Object if Parent Object is an ObjectClass) 
      		@param Comment Comment about the Class
      		@param CodeSample any sample code for the Object
      		@param SignatureCode Long indicating the Object Type (such as Class, Library, or VSE) and modifiers (such as Public, Private, etc) of the Object
      	%END REM 
      	Sub New(Parent As CodeElement, ClassName As String, ParentClassName As String, Comment As String, CodeSample As String, SignatureCode As Long) 
      		Dim pp As Project
      		
      		' verify SignatureCode represents a Class 
      		If Not (SIGNATURE_VALUE_CLASS = (SignatureCode And SIGNATURE_VALUE_CLASS)) Then Error ERR_INVALID_SIGNATURE_CODE, MSG_INVALID_SIGNATURE_CODE & |SignatureCode: | & CStr(SignatureCode)
      
      		' conditionally set the ParentClassName 
      		If Not isBlankString(ParentClassName) Then 
      			If (me.ParentClass Is Nothing) Then Call me.setElementValue(|parentclassname|, ParentClassName)  
      		End If
      		
      		
      		Set pp = me.ParentProject
      		If Not (pp Is Nothing) Then 
      			If pp.InstanceCode <> SIGNATURE_VALUE_VSE Then Call me.removeElement(|lsxclassid|) ' VSE Class ID only applies to classes within VSE Projects. 
      		End If
      		
      		
      	End Sub
      	
      	
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()
      		Call MajorElement..updateInternalContent()
      		me.content_(|classname|) = me.ClassName    
      		me.content_(|parentclassname|) = me.ParentClassName
      		If isBlankString(me.content_(|parentclassname|)) Then me.content_(|parentclassname|) = |None|
      		me.content_(|constructorsignature|) = me.ConstructorSignature 
      	End Sub 
      
      End Class
      
      
      
      %REM
      	Class Project 
      	Common base-level class for VSID Library or VSID VSE classes. 
      %END REM
      Class Project As MajorElement 
      
      	%REM
      		Property Get CLASS_NAME
      		Name of the Class
      	%END REM
      	Private Property Get CLASS_NAME As String 
      		CLASS_NAME = |Project|
      	End Property
      	
      
      	%REM
      		Property Get Summary
      		Summary of the Project
      	%END REM
      	Property Get Summary As String
      		Summary = me.getValue(|comment|) 
      	End Property 
      
      
      	%REM
      		Property Get Description
      		Description of the Project
      	%END REM
      	Property Get Description As String
      		Description = me.getValue(|description|) 
      	End Property 
      	
      	
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim result As StringList
      		
      		' BEGIN CODE 
      		Set result = MajorElement..TaggedValues 
      
      		result.setElementValue |summary|, me.Summary 
      		result.setElementValue |description|, me.Description
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      	
      
      	%REM
      		Property Get SummaryTableHTML
      		SummaryTable HTML content for the object
      	%END REM
      	Property Get SummaryTableHTML As StringQueue
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String
      		
      		Dim objLib As Library 
      		Dim objVSE As VSE 
      		 
      		
      		Dim result As New StringQueue()
      		Dim tv As New StringList() 
      		Dim detail As New StringList()
      
      		Dim summaryrows As New StringsCarrier() 
      
      		Dim stubhtml As StringsCarrier
      		Dim sc As StringsCarrier 
      		
      		Dim values As Variant
      		
      		Dim attrib$
      		Dim i% 
      		
      		
      		' BEGIN CODE
      		If getContext().GeneratingAPIdoc Then
      			Set tv = me.TaggedValues 
      	
      			attrib$ = me.getValue(|baseid|) 
      			If Not isBlankString(attrib$) Then detail.setElementValue |Base ID Value|, attrib$  
      			
      			If me.hasAttributes Then detail.setElementValue |attributes|, me.Attributes.joinContent(|, |)		
      	
      			Select Case me.InstanceCode 
      				Case SIGNATURE_VALUE_VSE
      					Set objVSE = Me 
      	
      					attrib$ = objVSE.getValue(|baseguid|) 
      					If Not isBlankString(attrib$) Then detail.setElementValue |Base GUID|, attrib$  
      					
      					attrib$ = objVSE.getValue(|characterset|) 
      					If Not isBlankString(attrib$) Then detail.setElementValue |Character Set|, attrib$  
      					
      					attrib$ = objVSE.getValue(|lsxcreator|) 
      					If Not isBlankString(attrib$) Then detail.setElementValue |Original Author|, attrib$  
      					
      					attrib$ = tv.getvalue(|lsxclassid|)
      					If Not isBlankString(attrib$) Then Call detail.setElementValue(|VSE Class ID|, attrib$)
      					
      					If objVSE.hasPlatforms Then 
      						Set sc = objVSE.Platforms 
      						detail.setElementValue |Platforms|, sc.joinContent(|, |)
      					End If
      					
      					
      				Case SIGNATURE_VALUE_LIBRARY 
      					Set objLib = Me
      					attrib$ = objLib.getValue(|scriptcreator|) 
      					If Not isBlankString(attrib$) Then detail.setElementValue |Script Creator|, attrib$
      					
      					If objLib.hasIncludeExternalLibraries Then 
      						Set sc = objLib.IncludeExternalLibraries 
      						If sc.size > 1 Then 
      							detail.setElementValue |Include External Libraries|, sc.joinContent(|, |)	
      						Else 
      							detail.setElementValue |Include External Library|, sc.joinContent(|, |)
      						End If
      					End If
      					
      					If objLib.hasUseLibraries Then 
      						Set sc = objLib.UseLibraries 
      						If sc.size > 1 Then 
      							detail.setElementValue |Uses Libraries|, sc.joinContent(|, |)	
      						Else 
      							detail.setElementValue |Uses Library|, sc.joinContent(|, |)
      						End If
      					End If
      					
      					If objLib.hasUseVSEs Then 
      						Set sc = objLib.UseVSEs 
      						If sc.size > 1 Then 
      							detail.setElementValue |Uses VSEs|, sc.joinContent(|, |)	
      						Else 
      							detail.setElementValue |Uses VSE|, sc.joinContent(|, |)
      						End If
      					End If
      					
      				Case Else 
      					' do nothing
      			End Select
      			
      	
      			Set stubhtml = getVSIDstubContent(|html|).getValue(|LabeledSummaryRow|)
      			
      			i% = 1 
      			values = detail.getContent() 
      			ForAll stringValue In values 
      				Call tv.clear()  
      				tv.setElementValue |label|, ListTag(stringValue) 
      				tv.setElementValue |value|, CStr(stringValue) 
      	
      				If isEven(i%) Then 
      					tv.setElementValue |rowclass|, |rowColor|
      				Else 
      					tv.setElementValue |rowclass|, |altColor|
      				End If
      				
      				summaryrows.push tv.replaceMoustacheTags(stubhtml).joinContent(||) 
      				i% = i% + 1 
      			End ForAll
      	
      			Call detail.clear()  
      			detail.setElementValue |tablesummaryrows|, summaryrows.joinContent(||)
      			detail.setElementValue |tablesummary|, Me.CLASS_NAME & | Summary Table|
      			detail.setElementValue |tablesummaryanchorname|, LCase(Me.CLASS_NAME) & |.summary|
      			detail.setElementValue |summarytableheading|, Me.CLASS_NAME & | Summary|
      			detail.setElementValue |tablesummaryheadrows|, ||
      	
      			result.load detail.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|SummaryTable|))
      		End If 
      		
      	ExitPoint: 
      		Set SummaryTableHTML = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      
      
      	%REM
      		Constructor
      
      		@param Parent Parent Object for the Object
      		@param LibraryName Name of the Object
      		@param Summary Summary information about the Object
      		@param Description Detailed Description of the Object
      		@param SignatureCode Long indicating the Object Type (Library or VSE) and modifiers (such as Public, Private, etc) of the Object
      	%END REM 
      	Sub New(Parent As CodeElement, LibraryName As String, Summary As String, Description As String, SignatureCode As Long), MajorElement(Parent, LibraryName, ||, Summary, ||, SignatureCode)
      		me.setElementValue |description|, Description
      		me.setElementValue |codesample|, ||
      		me.setElementValue |codesamplehtml|, ||
      		me.isCodeSampleHTMLset_ = True 
      	End Sub  
      	
      	
      	
      
      End Class
      
      %REM
      	Class VSE
      	Represents a VoltScript Extension Object
      %END REM
      Class VSE As Project 	
      	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |VSE| 
      	End Property
      
      
      	%REM
      		Property Get VSEName
      		Name of the VSE
      	%END REM
      	Property Get VSEName As String
      		VSEName = me.Label  
      	End Property 
      
      
      
      	%REM
      		Property Get BaseID
      		BaseID value of the VSE
      	%END REM
      	Property Get BaseID As String
      		BaseID = me.getValue(|baseid|)   
      	End Property 
      
      
      	%REM
      		Property Get BaseGUID
      		Base Globally Unique Identifier of the VSE
      	%END REM
      	Property Get BaseGUID As String
      		BaseGUID = me.getValue(|baseguid|)  
      	End Property 
      
      
      	%REM
      		Property Get CharacterSet
      		Chararacter Set of the VSE
      	%END REM
      	Property Get CharacterSet As String
      		CharacterSet = me.getValue(|characterset|)  
      	End Property 
      
      	%REM
      		Property Get hasPlatforms
      		Flag indicating if the object has Platforms 
      	%END REM
      	Property Get hasPlatforms As Boolean
      		Dim sc As StringsCarrier 
      		
      		If me.stringscarriers_.hasTag(|platforms|) Then 
      			Set sc = me.stringscarriers_.getValue(|platforms|)	
      			If Not (sc Is Nothing) Then hasPlatforms = sc.hasContent 
      		End If
      	End Property
      
      
      	%REM
      		Property Get Platforms
      		Platforms supported by the VSE
      		
      		@return StringsCarrier containing all supported platforms
      	%END REM
      	Property Get Platforms As StringsCarrier
      		If me.hasPlatforms Then Set Platforms = me.stringscarriers_.getValue(|platforms|)
      	End Property 
      
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      
      		Dim result$
      		
      		' BEGIN CODE
      		result$ = MajorElement..JSON
      		result$ = Replace(result$, |"label":| & toJSonValue(me.VSEName), |"lsxname":| & toJsonValue(me.VSEName))
      
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      		
      		If me.stringscarriers_.getValue(|platforms|).hasContent Then result$ = result$ & |, "platforms":| & me.Platforms.JSON 
      		result$ = result$ & |}| 
      
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      	%REM
      		Constructor
      
      		@param Parent Object for the Object
      		@param VSEName Name of the Object
      		@param Summary information about the Object
      		@param Description Detailed Description of the Object
      		
      		@throws ERR_PARAMETER_BLANK if Parent is Nothing
      	%END REM 
      	Sub New(Parent As CodeElement, VSEName As String, Summary As String, Description As String), Project(Parent, VSEName, Summary, Description, SIGNATURE_VALUE_VSE)
      		If Parent Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |VSE Constructor requires a Parent|
      	
      		Dim sc As New StringsCarrier() 
      		me.stringscarriers_.setElementValue |platforms|, sc
      	End Sub 
      
      
      	%REM 
      		Sub appendPlatform
      		Appends a Supported Platform To the VSE
      		
      		@param platform$ Supported Platform To be appended
      	%END REM
      	Sub appendPlatform(platform$)
      		Call me.stringscarriers_.getValue(|platforms|).push(platform$) 
      	End Sub
      
      
      
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()  
      		Call MajorElement..updateInternalContent()
      		me.content_(|lsxname|) = me.VSEName 
      		me.content_(|description|) = me.Description 
      		me.content_(|summary|) = me.Summary 
      		If IsElement(me.content_(|parentclass|)) Then Erase me.content_(|parentclass|)
      		If IsElement(me.content_(|classname|)) Then Erase me.content_(|classname|)
      	End Sub 
      
      End Class
      
      
      %REM
      	Class Library
      	Represents a VoltScript Library
      %END REM
      Class Library As Project 
      	
      	Private types_() As ObjectType
      	Private options_ As StringsCarrier
      	
      	Private Property Get CLASS_NAME As String 
      		CLASS_NAME = |Library|
      	End Property 
      
      
      	%REM
      		Property Get LibraryName
      		Name of the Library 
      	%END REM
      	Property Get LibraryName As String
      		LibraryName = me.Label  
      	End Property 
      
      
      	%REM
      		Property Get Options
      		String Array containing Options for the Library
      	%END REM
      	Property Get Options As Variant
      		
      		Dim result As Variant
      		Dim value As String 
      		Dim idx% 
      		
      		result = me.options_.unique 
      		If me.options_.hasContent Then 
      			ForAll element In result
      				element = |Option | & element 
      			End ForAll
      		End If 		 
      		
      		Options = result 
      	End Property 
      
      
      	%REM
      		Property Get hasOptions
      		Flag indicating if the Library has Options 
      	%END REM
      	Property Get hasOptions As Boolean 
      		hasOptions = me.options_.hasContent 
      	End Property
      
      	
      
      
      	%REM
      		Property Get Types
      		Array containing Types contained by the Object
      	%END REM
      	Property Get Types As Variant
      		
      		Dim indexes List As Integer 
      		Dim tags As Variant 
      		
      		Dim obj As ObjectType 
      		
      		Dim result() As ObjectType
      		Dim i As Integer 
      		
      		ReDim result(UBound(me.types_)) As ObjectType
      		
      		If getContext().GeneratingAPIdoc Then 
      			For i = LBound(me.types_) To UBound(me.types_) 
      				Set obj = me.types_(i) 
      				indexes(obj.Label) = i   
      			Next  
      			
      			tags = getSortedListTags(indexes) 
      			For i = LBound(tags) To UBound(tags) 
      				Set result(i) = Me.types_(indexes(CStr(tags(i))))
      			Next 
      			
      		Else 
      			For i = LBound(me.types_) To UBound(me.types_) 
      				Set result(i) = me.types_(i)  
      			Next  
      		End If
      		
      		Types = result 
      	End Property 
      
      
      	%REM
      		Property Get hasTypes
      		Flag indicating if the Object has Types 
      	%END REM
      	Property Get hasTypes As Boolean 
      		hasTypes = Not (me.types_(0) Is Nothing) 
      	End Property
      
      	
      	%REM
      		Property Get hasMajorElements
      		Overridden to check for Types and Classes
      		
      		@see MajorElement.Classes 
      	%END REM
      	Property Get hasMajorElements As Boolean 
      		hasMajorElements = me.hasClasses Or me.hasTypes
      	End Property
      
      	%REM
      		Property Get MajorElements
      		Array containing MajorElements contained by the Object
      
      		Note: The only MajorElement objects that can be contained by an explicit MajorElement object are ObjectClass objects. 
      		Therefore, this Property is a wrapper for the MajorElement.Classes property. 
      		
      		@see MajorElement.Classes 
      	%END REM
      	Property Get MajorElements As Variant
      		If (Me.hasClasses And Me.hasTypes) Then
      			MajorElements = ArrayAppend(me.Classes, me.Types)
      		ElseIf (Me.hasClasses) Then
      			MajorElements = Me.Classes
      		Else
      			MajorElements = Me.Types
      		End If
      	End Property 
      	
      	
      	%REM
      		Property Get TaggedStringsCarriers
      		Tagged StringsCarriers for the Object. 
      		k = Tag
      		v = StringsCarrier  
      	%END REM
      	Property Get TaggedStringsCarriers As StringsCarrierList 
      		On Error GoTo ErrorTrap
      		
      		' exception variables
      		Dim extendedinfo List As String 
      
      		Dim sc As StringsCarrier
      		
      		Dim s As String 
      		
      		Dim typeobject As ObjectType 
      		Dim result As StringsCarrierList 
      
      		Dim temp As Variant 
      		
      		
      		' BEGIN CODE
      		Set result = MajorElement..TaggedStringsCarriers 
      
      		If getContext().GeneratingScript Then 
      	
      			' Options
      			' {{optionsvss}}
      			Set sc = New StringsCarrier()
      			If me.hasOptions Then 
      				temp = me.Options 
      				ForAll stringelement In temp 
      					sc.push CStr(stringelement)	
      				End ForAll
      			End If
      			result.setElementValue |optionsvss|, sc 
      				
      	
      			' Dependencies
      			' {{dependenciesvss}}
      			Set sc = New StringsCarrier() 
      	
      			' Use
      			If me.stringscarriers_.getValue(|use|).hasContent Then 
      				temp = me.stringscarriers_.getValue(|use|).values 
      				ForAll stringelement In temp 
      					sc.push |Use "| & CStr(stringelement) & |"|	
      				End ForAll
      				
      				sc.push || 
      			End If
      	
      			' UseVSE
      			If me.stringscarriers_.getValue(|uselsx|).hasContent Then 
      				temp = me.stringscarriers_.getValue(|uselsx|).values 
      				ForAll stringelement In temp 
      					sc.push |UseVSE "*| & CStr(stringelement) & |"|	
      				End ForAll
      				
      				sc.push || 
      			End If
      	
      			' %Include
      			If me.stringscarriers_.getValue(|%include|).hasContent Then 
      				temp = me.stringscarriers_.getValue(|%include|).values 
      				ForAll stringelement In temp 
      					sc.push |%Include "| & CStr(stringelement) & |"|	
      				End ForAll
      				
      				sc.push || 
      			End If
      			
      			result.setElementValue |dependenciesvss|, sc 
      	
      	
      			' Types   
      			' {{typesvss}}
      			Set sc = New StringsCarrier() 
      			If me.hasTypes Then
      				temp = me.Types 
      				ForAll typeelement In temp 
      					Set typeobject = typeelement
      					sc.load typeobject.Script 
      				End ForAll
      			End If
      			result.setElementValue |typesvss|, sc
      	
      		End If
      
      	ExitPoint: 
      		Set TaggedStringsCarriers = result
      		Exit Property 
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedinfo
      		Resume ExitPoint
      	End Property
      
      
      
      	
      	%REM
      		Property Get hasIncludeExternalLibraries
      		Flag indicating if the object has IncludeExternalLibraries 
      	%END REM
      	Property Get hasIncludeExternalLibraries As Boolean
      		Dim sc As StringQueue 
      		
      		If me.stringscarriers_.hasTag(|%include|) Then 
      			Set sc = me.stringscarriers_.getValue(|%include|)	
      			If Not (sc Is Nothing) Then hasIncludeExternalLibraries = sc.hasContent 
      		End If
      	End Property
      
      
      	%REM
      		Property Get IncludeExternalLibraries
      		External Libraries needed by this Library 
      		
      		@return StringsCarrier containing names of External Libraries to be included
      	%END REM
      	Property Get IncludeExternalLibraries As StringQueue
      		If me.hasIncludeExternalLibraries Then Set IncludeExternalLibraries = me.stringscarriers_.getValue(|%include|)
      	End Property 
      
      
      	%REM
      		Property Get hasUseLibraries
      		Flag indicating if the object has UseLibraries 
      	%END REM
      	Property Get hasUseLibraries As Boolean
      		Dim sc As StringQueue 
      		
      		If me.stringscarriers_.hasTag(|use|) Then 
      			Set sc = me.stringscarriers_.getValue(|use|)	
      			If Not (sc Is Nothing) Then hasUseLibraries = sc.hasContent 
      		End If
      	End Property
      
      
      	%REM
      		Property Get UseLibraries
      		Libraries Used by this Library
      		
      		@return StringsCarrier containing names of Libraries used by this Library
      	%END REM
      	Property Get UseLibraries As StringQueue
      		If me.hasUseLibraries Then Set UseLibraries = me.stringscarriers_.getValue(|use|)
      	End Property 
      
      
      	%REM
      		Property Get hasUseVSE
      		Flag indicating if the object has UseVSE 
      	%END REM
      	Property Get hasUseVSEs As Boolean
      		Dim sc As StringQueue 
      		
      		If me.stringscarriers_.hasTag(|uselsx|) Then 
      			Set sc = me.stringscarriers_.getValue(|uselsx|)	
      			If Not (sc Is Nothing) Then hasUseVSEs = sc.hasContent 
      		End If
      	End Property
      
      
      	%REM
      		Property Get UseVSEs
      		VSEs used by the Library
      		
      		@return StringQueue containing names of VSEs used by this Libary
      	%END REM
      	Property Get UseVSEs As StringQueue
      		If me.hasUseVSEs Then Set UseVSEs = me.stringscarriers_.getValue(|uselsx|)
      	End Property 
      
      
      	
      	%REM
      		Constructor
      
      		@param Parent Object for the Object
      		@param LibraryName of the Object
      		@param Summary information about the Object
      		@param Description Detailed Description of the Object
      		
      		@throws ERR_PARAMETER_BLANK if Parent is Nothing
      	%END REM 
      	Sub New(Parent As CodeElement, LibraryName As String, Summary As String, Description As String), Project(Parent, LibraryName, Summary, Description, SIGNATURE_VALUE_LIBRARY)
      		If Parent Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |Library Constructor requires a Parent|
      		Dim sc As StringQueue 
      		
      		ReDim me.types_(0) As ObjectType
      		ReDim me.variables_(0) As Variable
      		
      		Set sc = New StringQueue()
      		me.stringscarriers_.setElementValue |%include|, sc 
      		
      		Set sc = New StringQueue()
      		me.stringscarriers_.setElementValue |use|, sc 
      		
      		Set sc = New StringQueue()
      		me.stringscarriers_.setElementValue |uselsx|, sc  
      		
      		Set me.options_ = New StringsCarrier() 
      	End Sub  
      
      
      	%REM
      		Sub appendUseLibrary
      		appends a Library Name to the "Use" option of the object
      		
      		@param libraryname$ Library to append. 
      	%END REM
      	Sub appendUseLibrary(libraryname$)
      		Call me.stringscarriers_.getValue(|use|).push(libraryname$) 
      	End Sub
      
      
      	%REM
      		Function removeUseLibrary
      		removes a Library Name frome the "Use" option of the object
      		
      		@param libraryname$ Library to be removed. 
      		
      		@return Flag indicating if the Library Name was found and removed.  
      	%END REM
      	Function removeUseLibrary(libraryname$) As Boolean
      		removeUseLibrary = me.stringscarriers_.getValue(|use|).yank(libraryname$) 
      	End Function
      
      
      
      	%REM
      		Sub appendUseVSE
      		appends a VSE Name to the "UseVSE" option of the object
      		
      		@param lsxname$ VSE to append. 
      	%END REM
      	Sub appendUseVSE(lsxname$)
      		Call me.stringscarriers_.getValue(|uselsx|).push(lsxname$) 
      	End Sub
      
      
      	%REM
      		Function removeUseVSE
      		removes an VSE Name frome the "UseVSE" option of the object
      		
      		@param lsxname$ VSE to be removed. 
      		
      		@return Flag indicating if the VSE Name was found and removed.  
      	%END REM
      	Function removeUseVSE(lsxname$) As Boolean
      		removeUseVSE = me.stringscarriers_.getValue(|uselsx|).yank(lsxname$) 
      	End Function
      
      
      
      	%REM
      		Sub appendIncludeExternalLibrary
      		appends an External Library Name to the "%Include" option of the object
      		
      		@param library$ Library to append. 
      	%END REM
      	Sub appendIncludeExternalLibrary(libraryname$)
      		Call me.stringscarriers_.getValue(|%include|).push(libraryname$) 
      	End Sub
      
      
      	%REM
      		Function removeIncludeExternalLibrary
      		removes an External Library Name frome the "%Include" option of the object
      		
      		@param libraryname$ Library to be removed. 
      		
      		@return Flag indicating if the Library Name was found and removed.  
      	%END REM
      	Function removeIncludeExternalLibrary(libraryname$) As Boolean
      		removeIncludeExternalLibrary = me.stringscarriers_.getValue(|%include|).yank(libraryname$) 
      	End Function
      
      
      	%REM
      		Sub appendOption
      		Appends an Option to the Library 
      	
      		@param source Formatted string representing the option to be added
      		examples: 		
      			Declare
      			Public
      			Base 1 
      			Compare NoCase NoPitch
      	%END REM
      	Sub appendOption(source As String)
      		If Not isBlankString(source) Then Call me.options_.push(source) 
      	End Sub
      	
      	
      	%REM
      		Sub appendType
      		Appends a Type to the Object 
      	%END REM
      	Sub appendType(source As ObjectType)
      		If Not (source Is Nothing) Then 
      			If me.hasTypes Then ReDim Preserve me.types_(UBound(me.types_) + 1) As ObjectType
      		End If 
      		
      		Set me.types_(UBound(me.types_)) = source 
      	End Sub
      	
      	
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      
      		Dim sc As New StringsCarrier()
      		Dim objType As ObjectType
      		
      		Dim result$
      
      		
      		' BEGIN CODE
      		result$ = MajorElement..JSON
      		
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      		
      		If me.hasTypes Then
      			Call sc.clear
      			ForAll typeelement In me.Types
      				Set objType = typeelement
      				sc.push(objtype.JSON)
      			End ForAll
      
      			result$ = result$ & |, "types":[| & sc.joinContent(|,|) & |]| 
      		End If
      		
      		result$ = result$ & |}| 
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      End Class
      
      
      %REM
      	Class Constant
      	Represents a Constant 
      %END REM
      Class Constant As CodeElement
      	
      	Private Property Get CLASS_NAME As String
      		CLASS_NAME = |Constant| 
      	End Property
      
      
      	%REM
      		Property Get AsType
      		Overridden - Constants to not have an "as type"
      		
      		@return Value of the Constant
      	%END REM
      	Property Get AsType As String 
      		AsType = me.Value 
      	End Property
      
      
      	%REM
      		Property Get JSON
      		JSON representation of the object
      	%END REM
      	Property Get JSON As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sc As New StringsCarrier() 
      		Dim ve As ValuedElement  
      		Dim ee As ExceptionElement 
      		Dim args As Variant
      		
      		Dim result$
      
      		Dim i As Integer 
      		Dim u As Integer 
      		
      		' BEGIN CODE
      		result$ = CodeElement..JSON
      
      		' rip of the trailing } 
      		If getBaliStrings().endsWith(result$, |}|) Then result$ = Left$(result$, Len(result$) -1) 
      
      		result$ = result$ & |}| 
      		
      		
      	ExitPoint:
      		JSON = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      
      	%REM
      		Property Get TaggedValues
      		Tagged Values of the object 
      	%END REM
      	Property Get TaggedValues As StringList
      		On Error GoTo ErrorTrap
      		
      		Dim result As New StringList()
      		Dim detail As New StringList()  
      
      		Dim sc As StringsCarrier
      		Dim scl As New StringsCarrierList() 
      
      		Dim aa As ValuedElement
      		Dim ee As ExceptionElement 
      
      		Dim temp_a$
      
      		
      		' BEGIN CODE  
      		Set result = CodeElement..TaggedValues 
      		
      		result.setElementValue |signatureprefix|, Me.SignaturePrefix
      		result.setElementValue |astype|, me.AsType 	
      
      	ExitPoint:
      		Set TaggedValues = result
      		Exit Property
      	ErrorTrap:
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint 
      	End Property
      
      
      	%REM
      		Property Get Value
      		String representation of the Constant's value 
      	%END REM
      	Property Get Value As String 
      		Value = me.getValue(|value|) 
      	End Property
      	
      	
      	%REM
      		Property Get Signature
      		Signature of the Object 
      	%END REM
      	Property Get Signature As String 
      		On Error GoTo ErrorTrap
      		
      		Dim sq As StringQueue 
      		Dim result$
      		
      		Set sq = getSignatureElements(me.SignatureCode)
      		sq.push me.Label
      		sq.push |=|
      		sq.push me.Value  
      
      		result = sq.joinContent(| |)
      		
      	ExitPoint:
      		Signature = result$
      		Exit Property
      	ErrorTrap: 
      		On Error GoTo 0
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, ||
      		Resume ExitPoint	
      		
      	End Property
      
      
      
      	%REM
      		Constructor
      		
      		@param Parent Object for the Object
      		@param Label Label (Name) for the Constant
      		@param Value of the Constant 
      		@param Comment Comment about the Constant
      		@param SignatureCode Long indicating the Method Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the Object
      
      		@throws ERR_INVALID_SIGNATURE_CODE if SignatureCode conflicts with self or not valid for the object for the object 
      	%END REM 
      	Sub New(Parent As CodeElement, Label As String, Value As String, Comment As String, SignatureCode As Long), CodeElement(Parent, Label, ||, Comment, ||, SignatureCode)
      		me.setElementValue |value|, Value
      	End Sub 
      	
      	%REM
      		Sub updateInternalContent
      		Updates the object's content  
      	%END REM
      	Private Sub updateInternalContent()  
      		Call CodeElement..updateInternalContent()
      	End Sub
      	
      	%REM
      		Sub appendAttribute
      		Overridden
      		
      		ignored - Constants do not have Attributes
      		
      		@param attribute$ Attribute to append. 
      	%END REM
      	Sub appendAttribute(attribute$)
      		' do nothing - Constants do not have Attributes
      	End Sub
      
      
      	%REM
      		Function removeAttribute
      		Overridden
      		
      		ignored - Constants do not have Attributes
      				
      		@param attribute$ Attribute to be removed. 
      		
      		@return False  
      	%END REM
      	Function removeAttribute(attribute$) As Boolean
      		removeAttribute = False ' Constants do not have Attributes
      	End Function
      
      
      
      End Class
      %REM
      	Class Context
      	Context Carrier 
      %END REM
      Class Context 
      
      	Private isGeneratingAPIdoc_ As Boolean 
      	Private isGeneratingScript_ As Boolean 
      
      	%REM
      		Property Get CLASS_NAME
      		Name of the Class
      	%END REM
      	Private Property Get CLASS_NAME As String 
      		CLASS_NAME = |Context|
      	End Property
      	
      
      	%REM
      		Property Get CLASS_PREFIX
      		Prefix of the Class:  MODULE_NAME.CLASS_NAME.
      	%END REM
      	Private Property Get CLASS_PREFIX As String 
      		CLASS_PREFIX = MODULE_NAME & |.| & CLASS_NAME & |.|
      	End Property
      	
      	
      	%REM
      		Property Get GeneratingAPIdoc
      		Flag indicating if currently generating API documentation
      	%END REM
      	Property Get GeneratingAPIdoc As Boolean
      		GeneratingAPIdoc = me.isGeneratingAPIdoc_ 
      	End Property 
      
      
      	%REM
      		Property Set GeneratingAPIdoc
      		Flag indicating if currently generating API documentation
      	%END REM
      	Property Set GeneratingAPIdoc As Boolean
      		me.isGeneratingAPIdoc_ = GeneratingAPIdoc
      		If me.isGeneratingAPIdoc_ Then me.isGeneratingScript_ = False   
      	End Property 
      
      
      	%REM
      		Property Get GeneratingScript
      		Flag indicating if currently generating Script Code stubs 
      	%END REM
      	Property Get GeneratingScript As Boolean
      		GeneratingScript = me.isGeneratingScript_ 
      	End Property 
      	
      
      	%REM
      		Property Set GeneratingScript
      		Flag indicating if currently generating Script Code stubs 
      	%END REM
      	Property Set GeneratingScript As Boolean
      		me.isGeneratingScript_ = GeneratingScript
      		If me.isGeneratingScript_ Then me.isGeneratingAPIdoc_ = False   
      	End Property 
      	
      
      
      	%REM
      		Constructor
      	%END REM 
      	Sub New() 
      		On Error GoTo ErrorTrap
      		
      
      		' exception variables
      		Dim extendedinfo List As String 
      		Dim errmsg$
      		Dim errcode%
      		Dim errline%
      		
      		
      		' BEGIN CODE 
      		
      
      
      
      	ExitPoint: 
      		If (0 <> errcode%) Then Error errcode%, errmsg$ & | at line | & CStr(errline%) & | in | & CLASS_PREFIX & |New() Constructor| 
      		Exit Sub 
      	ErrorTrap:
      		On Error GoTo 0
      		errcode% = Err() 
      		errmsg$ = Error() 
      		errline% = Erl()
      		pushExceptionCarrier MODULE_NAME, CLASS_NAME, extendedInfo
      		Resume ExitPoint
      	End Sub 
      
      
      	
      
      End Class
      '++LotusScript Development Environment:2:1:getCodeElementInstanceType:23:8
      %REM
      	Function getCodeElementInstanceType
      	Gets the Code Element Instance Type String for the specified instance code. 
      	
      	@param instancecode Instance Code of the Code Element 
      	
      	Supported Instance Codes: 
      		SIGNATURE_VALUE_CONST
      		SIGNATUE_VALUE_VARIABLE
      		SIGNATURE_VALUE_SUB
      		SIGNATURE_VALUE_FUNCTION
      		SIGNATURE_VALUE_EVENT
      		SIGNATURE_VALUE_PROPERTY
      		SIGNATURE_VALUE_TYPE
      		SIGNATURE_VALUE_CLASS
      		SIGNATURE_VALUE_VSE
      		SIGNATURE_VALUE_LIBRARY
      		SIGNATURE_VALUE_VSID
      		SIGNATURE_VALUE_REMARK
      	
      	@return String indicating the Instance Type of the Code Element.  Empty String "" if unknown instance type.    
      %END REM
      Function getCodeElementInstanceType(instancecode&) As String 
      
      	Dim result$
      	
      	
      	' BEGIN CODE
      	Select Case instancecode& 
      		Case SIGNATURE_VALUE_CONST: 
      			result$ = |Constant|
      			
      		Case SIGNATURE_VALUE_VARIABLE: 
      			result$ = |Variable|
      			
      		Case SIGNATURE_VALUE_SUB: 
      			result$ = |Sub|
      			
      		Case SIGNATURE_VALUE_FUNCTION: 
      			result$ = |Function|
      			
      		Case SIGNATURE_VALUE_EVENT: 
      			result$ = |Event|
      			
      		Case SIGNATURE_VALUE_PROPERTY: 
      			result$ = |Property|
      			
      		Case SIGNATURE_VALUE_TYPE: 
      			result$ = |Type|
      			
      		Case SIGNATURE_VALUE_CLASS: 
      			result$ = |Class|
      			
      		Case SIGNATURE_VALUE_VSE: 
      			result$ = |VSE|
      			
      		Case SIGNATURE_VALUE_LIBRARY: 
      			result$ = |Library|
      			
      		Case SIGNATURE_VALUE_VSID: 
      			result$ = |VSID|
      			
      		Case SIGNATURE_VALUE_REMARK: 
      			result$ = |%REM|
      			
      		Case Else 
      			' do nothing
      	End Select
      	
      	
      ExitPoint: 
      	getCodeElementInstanceType = result$
      	Exit Function 
      End Function
      
      '++LotusScript Development Environment:2:1:getMajorElementsListItems:16:8
      
      
      %REM
      	Function getMajorElementsListItems
      	Gets ListItems HTML from an array of MajorElements  
      	
      	@param source Array of MajorElements 
      	@param summarylinkprefix Prefix for the list item summary link
      	
      	@return StringList representing the ListItems from an array of MajorElements
      		k = MajorElement.FQN
      		v = ListItem HTML
      	
      	@throws ERR_PARAMETER_INVALID if the source is anything other than an Array of Major Elements. 
      %END REM
      Function getMajorElementsListItems(source As Variant, summarylinkprefix$) As StringList
      	On Error GoTo ErrorTrap
      	
      	
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	
      	Dim mel As MajorElement 
      	Dim detail As New StringList() 
      	Dim result As New StringList() ' k = MajorElement FQN, v=LinkedListItem constructed from MajorElement 
      	
      	Dim summaryrow As StringsCarrier
      	 
      	
      	
      	' BEGIN CODE
      	extendedinfo(|Source Type|) = TypeName(source) 
      	extendedinfo(|Summary Link Prefix|) = summarylinkprefix$
      	If Not IsArray(source) Then Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID & |Source is not an Array of MajorElements.  |
      	
      	Set summaryrow = getVSIDstubContent(|html|).getValue(|LinkedListItem|)
      	
      	ForAll element In source 
      		If Not IsObject(element) Then Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID & |Source is not an Array of MajorElements.  |
      		extendedinfo(|Element Type|) = TypeName(element) 
      		
      		Set mel = element 
      		detail.setElementValue |summarylink|, summarylinkprefix$ & mel.FileNameBase & |.html|
      		detail.setElementValue |linktarget|, FRAMENAME_CONTENT
      		detail.setElementValue |fqn|, mel.FQN
      		detail.setElementValue |label|, mel.Label
      		result.setElementValue mel.FQN, detail.replaceMoustacheTags(summaryrow).joinContent(||) 
      	End ForAll 
      	
      ExitPoint: 
      	Set getMajorElementsListItems = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:3:LeftOFs Get:5:8
      %REM
      	Property Get LeftOFs
      	String array containing certain working "Left Of" characters 
      %END REM
      Private Property Get LeftOFs As Variant 
      
      	Static result(4) As String 
      	Static isLoaded As Boolean 
      
      	' BEGIN CODE
      	If Not isLoaded Then
      		isLoaded = True  
      		result(0) = |'|
      		result(1) = |%|
      		result(2) = |"|
      		result(3) = |{|
      		result(4) = |(|
      	End If
      
      ExitPoint: 
      	LeftOFs = result
      	Exit Property 
      End Property
      
      '++LotusScript Development Environment:2:1:sortFQNbyLabel:13:8
      
      
      %REM
      	Function sortFQNbyLabel
      	Sorts an Array of FQN values by the Label portion 
      		FQN = FQNPrefix.Label 
      		Sorts by Label.FQNPrefix 
      
      	@param source Array of FQN Strings 
      	
      	@return StringQueue containing FQN values, sorted by Label portion first. 				
      %END REM
      Function sortFQNbyLabel(source As Variant) As StringQueue
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	
      	Dim templist As New StringList()
      	Dim result As New StringQueue() 
      	
      	Dim chunks As Variant
      	Dim fqn$ 
      	Dim labelfirst$ 
      	
      	Dim idx%
      	
      	
      	' BEGIN CODE
      	extendedinfo(|Typename(source)|) = TypeName(source) 
      	ForAll element In source 
      		fqn$ = CStr(element)
      		chunks = Split(fqn$, |.|) 
      		If (UBound(chunks) > LBound(chunks)) Then 
      			labelfirst$ = chunks(UBound(chunks))
      
      			For idx% = UBound(chunks) -1 To LBound(chunks) Step -1 
      				chunks(idx% + 1) = chunks(idx%) 
      			Next 
      
      			chunks(LBound(chunks)) = labelfirst$
      		End If
      		 
      		labelfirst$ = Join(chunks, |.|)
      		templist.setElementValue labelfirst$, fqn$  
      	End ForAll
      	
      	chunks = templist.sortedListTags 
      	ForAll element In chunks 
      		result.push templist.getValue(CStr(element)) 
      	End ForAll
      	
      	
      ExitPoint: 
      	Set sortFQNbyLabel = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:3:SignatureBeginners Get:5:8
      %REM
      	Property Get SignatureBeginners
      	String array containing Signature Beginner Keywords
      %END REM
      Private Property Get SignatureBeginners As Variant 
      
      	Static result(13) As String 
      	Static isLoaded As Boolean 
      
      	' BEGIN CODE
      	If Not isLoaded Then
      		isLoaded = True  
      		result(0) = |Const|
      		result(1) = |Dim|
      		result(2) = |Dec|
      		result(3) = |Sub|
      		result(4) = |Function|
      		result(5) = |Event|
      		result(6) = |Property|
      		result(7) = |Type|
      		result(8) = |Class|
      		result(9) = |Public|
      		result(10) = |Private|
      		result(11) = |Static|
      		result(12) = |Final|
      		result(13) = |List|
      	End If
      
      ExitPoint: 
      	SignatureBeginners = result
      	Exit Property 
      End Property
      
      '++LotusScript Development Environment:2:1:getSignatureModifiers:43:8
      %REM
      	Function getSignatureModifiers
      	Returns a StringQueue containing the various Signature modifiers (Public, Private, Static, Final) for an associated value. 
      	
      	Performs a bitwise comparison on the source value to determine the elements of the returned array 
      	Source value compared to the following constants:
      	
      	Const SIGNATURE_VALUE_GET 		= 1
      	Const SIGNATURE_VALUE_SET 		= 2
      	
      	Const SIGNATURE_VALUE_SUB 		= 4
      	Const SIGNATURE_VALUE_FUNCTION	= 8 
      	Const SIGNATURE_VALUE_EVENT 	= 16
      	Const SIGNATURE_VALUE_PROPERTY 	= 32
      	
      	Const SIGNATURE_VALUE_TYPE 		= 64
      	Const SIGNATURE_VALUE_CLASS 	= 128 
      	
      	Const SIGNATURE_VALUE_PUBLIC 	= 256
      	Const SIGNATURE_VALUE_PRIVATE 	= 512
      	
      	Const SIGNATURE_VALUE_STATIC 	= 1024
      	Const SIGNATURE_VALUE_FINAL 	= 2048
      	
      	Const SIGNATURE_VALUE_VSE 		= 4096 
      	Const SIGNATURE_VALUE_LIBRARY 	= 8192
      	Const SIGNATURE_VALUE_VSID 		= 16384
      	
      	
      	The order of possible values to be returned is: 
      		Final, Static, Private, Public
      	
      		For example, if the source value is 1313, then the array values returned are "Static" and public "Public" (1024 + 256 + 32 + 1) (values for 32 and 1 are not returned)
      
      	If a conflict occurs with the returned value type (such as "Public" and "Private") an error will be thrown.  
      						
      	@param source Long value to check
      	
      	@return StringQueue generated from bitwise comparison of the source to the referenced constants.
      	
      	@throws ERR_INVALID_SIGNATURE_CODE if source is negative or resolves to conflicting results. 
      %END REM
      Function getSignatureModifiers(source As Long) As StringQueue 
      	On Error GoTo ErrorTrap
      	
      	Dim result As New StringQueue()
      	Dim extendedinfo List As String  
      	
      	Dim sq As StringQueue 
      
      	Dim errcode%
      	Dim errmsg$ 
      	
      	Dim element$
      	
      	' BEGIN CODE
      	Set sq = getSignatureElements(source)
      	While sq.hasContent 
      		element$ = sq.pop() 
      		If strCmp(|Final|, element$) _ 
      		Or strCmp(|Static|, element$) _ 
      		Or strCmp(|Private|, element$) _ 
      		Or strCmp(|Public|, element$) _  
      		Then Call result.push(element$) 
      	Wend 
      
      	
      ExitPoint:
      	If (0 <>  errcode%) Then Error errcode%, errmsg$ 
      	
      	Set getSignatureModifiers = result
      	Exit Function
      ErrorTrap:
      	On Error GoTo 0 
      	errcode% = Err()
      	errmsg$ = Error$()
      	extendedinfo(|partial signature|) = result.joinContent(| |)
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint  
      End Function
      
      
      
      
      
      
      
      '++LotusScript Development Environment:2:1:getVSIDwriter:7:8
      
      
      %REM
      	Function getVSIDwriter
      	Gets the VSIDwriter object for the session. 
      %END REM
      Static Function getVSIDwriter() As VSIDwriter 
      	On Error GoTo ErrorTrap
      	
      	Dim result As VSIDwriter
      	
      	' BEGIN CODE
      	If result Is Nothing Then Set result = New VSIDwriter(||, ||) 
      	
      ExitPoint: 
      	Set getVSIDwriter = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, ||
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:generatePageHTML:13:8
      
      
      %REM
      	Function generatePageHTML
      	Generates the final Page HTML content for the API documentation 
      	
      	@param taggedValues StringList containing values to replace tags in the various HTML stub (header, nav, footer, etc.) files 
      	@param apidoc API documentation HTML content to be inserted into the final page HTML 
      	@param includeNavBar Flag indicating if the Navigation Bars (HTML_NAVBAR_TOP, HTML_NAVBAR_BOTTOM should be included. 
      		
      	@return HTML content for the API documentation. 
      %END REM
      Function generatePageHTML(taggedValues As StringList, apidoc As StringsCarrier, includeNavBar As Boolean) As StringQueue
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	Dim result As New StringQueue()
      	
      	 
      	' BEGIN CODE
      	If (apidoc Is Nothing) Then Set apidoc = New StringsCarrier() 
      	If (taggedValues Is Nothing) Then
      		result.load getVSIDstubContent(|html|).getValue(|HTML_BEGIN|)  
      		result.load getVSIDstubContent(|html|).getValue(|HTML_HEADER|)
      		
      		If includeNavBar Then 
      			result.load getVSIDstubContent(|html|).getValue(|HTML_NAVBAR_TOP|) 
      			result.load apidoc 
      			result.load getVSIDstubContent(|html|).getValue(|HTML_NAVBAR_BOTTOM|)
      		Else
      			result.load apidoc 
      		End If
      		
      		result.load getVSIDstubContent(|html|).getValue(|HTML_END|)
      		
      	Else 
      		result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_BEGIN|))  
      		result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_HEADER|)) 
      		
      		If includeNavBar Then 
      			result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_NAVBAR_TOP|)) 
      			result.load apidoc 
      			result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_NAVBAR_BOTTOM|)) 
      		Else
      			result.load apidoc 
      		End If
      		
      		result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_END|))	
      	End If
      	
      	
      ExitPoint: 
      	Set generatePageHTML = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getAdditionalPropertyKeys:20:8
      
       
       
      
      %REM
      	Function getAdditionalPropertyKeys
      	Gets additional property keys used for pulling information from a document
      	
      	@param code  	Instance Code specifying the object instance type for which Property Keys should be retrieved:
      		
      		SIGNATURE_VALUE_VSE: 		Get Property Keys for VSE Ojbect Classes
      		SIGNATURE_VALUE_LIBRARY: 	Get Property Keys for (Script) Library Object Classes.
      		SIGNATURE_VALUE_TYPE: 		Get Property Keys for ObjectType instances.
      				
      	
      	@return Array of Strings containing the additional property keys 
      	
      	@throws ERR_PARAMETER_INVALID if instancecode% is not a valid instance type code
      %END REM
      Function getAdditionalPropertyKeys(code As Long) As Variant
      	On Error GoTo ErrorTrap 
      
      	Static classkeys_library(4) As String
      	Static classkeys_lsx(8) As String 
      	Static typekeys(3) As String 
      
      	Static isInstantiated As Boolean  
      	
      	Dim result As Variant
      	
      	Dim extendedinfo List As String 
      	Dim errcode%
      	Dim errmsg$ 
      	 
      	
      	' BEGIN CODE
      	extendedinfo(|isInstantiated|) = CStr(isInstantiated)
      	extendedinfo(|code|) = CStr(code)
      	  
      	If Not isInstantiated Then 
      		classkeys_library(0) = |classtype|
      		classkeys_library(1) = |classderivetype|
      		classkeys_library(2) = |projectid|
      		classkeys_library(3) = |version|
      		classkeys_library(4) = |classid|
      		
      		classkeys_lsx(0) = |classtype|
      		classkeys_lsx(1) = |classderivetype|
      		classkeys_lsx(2) = |colitemtype|
      		classkeys_lsx(3) = |colindextype|
      		classkeys_lsx(4) = |classattribnewnotexposed|
      		classkeys_lsx(5) = |projectid|
      		classkeys_lsx(6) = |version|
      		classkeys_lsx(7) = |classid|
      		classkeys_lsx(8) = |lsxclassid| 
      		
      		typekeys(0) = |classtype|
      		typekeys(1) = |projectid|
      		typekeys(2) = |version|
      		typekeys(3) = |classid|
      
      		isInstantiated = True
      	End If
      
      
      	Select Case code 
      		Case SIGNATURE_VALUE_VSE
      			 result = classkeys_lsx
      			  
      		Case SIGNATURE_VALUE_LIBRARY
      			result = classkeys_library
      			
      		Case SIGNATURE_VALUE_TYPE 
      			result = typekeys
      			
      		Case Else
      			Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID & |Instance Code: | & CStr(code) & |.  |
      	End Select	
      	
      	
      ExitPoint:
      	If (0 <> errcode%) Then Error errcode%, errmsg$ 
      	getAdditionalPropertyKeys = result 
      	Exit Function 
      ErrorTrap: 
      	On Error GoTo 0
      	errcode% = Err()
      	errmsg$ = Error() 
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint 	
      End Function
      
      '++LotusScript Development Environment:2:1:getVSIDstubContent:13:8
      
      
      %REM
      	Function getVSIDstubContent
      	Gets a "singleton" instance of the VSID stub StringsCarrierList object for the associated key.
      	
      	@param key Identifier used to specify which BSX stub StringsCarrierList to return 
      	
      	@return VSID stub StringsCarrierList associated with key 
      	
      	@throws ERR_PARAMETER_BLANK if key is blank. 	 
      %END REM
      Function getVSIDstubContent(key$) As StringsCarrierList
      	
      	Static scl_ List As StringsCarrierList 
      	Dim result As StringsCarrierList
      	
      	If isBlankString(key$) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |key is blank.  |
      	
      	If IsElement(scl_(key$)) Then Set result = scl_(key$) 
      	
      	If result Is Nothing Then 
      		Set result = New StringsCarrierList() 
      		Set scl_(key$) = result 
      	End If
      	
      	
      ExitPoint:  
      	Set getVSIDstubContent = result
      End Function
      
      '++LotusScript Development Environment:2:1:getSignatureCode:12:8
      
      
      
      %REM
      	Function getSignatureCode
      	Calculates the Signature Code for a given source string. 
      	
      	@param source String from which to generate the signature value  
      	
      	@return Numeric code indicating the Method Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the Signature
      %END REM
      Function getSignatureCode(source As String) As Long 
      	On Error GoTo ErrorTrap 
      	
      	Dim extendedinfo List As String 
      	Dim msg$ 
      	Dim errmsg$ 
      	Dim errcode%
      	
      	Dim chunks As Variant
      	Dim result As Long  
      	
      	Dim working$ 
      	Dim word$ 
      	Dim idx% 
      	Dim isAllowed As Boolean 
      	
      	
      	' BEGIN CODE 	
      	extendedinfo(|source|) = source 
      	working$ = source 
      	extendedinfo(|working|) = working$ 
      
      	' Do not process anything to the right of the characters ', %, ", {, (, or a SINGLE | 	  
      	For idx% = LBound(leftofs) To UBound(LeftOFs) 
      		word$ = leftofs(idx%)
      		If (InStr(working$, word$) > 0) Then working$ = StrLeft(working$, word$)
      	Next 
      		 	
      	idx% = InStr(working$, "|") 
      	If (idx% > 0) Then 
      		If (InStr(working$, "||") <> idx%) Then working$ = Left$(working$, idx% - 1) 
      	End If
      
      	extendedinfo(|working|) = working$ 	
      	If isBlankString(working$) Then GoTo ExitPoint
      	
      	' only process if working text begins with a member of signature beginners
      	chunks = Split(Trim$(working$), | |)
      	word$ = chunks(LBound(chunks)) 
      	chunks = SignatureBeginners
      	For idx% = LBound(chunks) To UBound(chunks) 
      		If strCmp(word$, chunks(idx%)) Then 
      			isAllowed = True 
      			Exit For 
      		End If
      	Next
      	If Not isAllowed Then GoTo ExitPoint 
      	
      	chunks = Split(Trim$(working$), | |)
      	ForAll element In chunks 
      		Select Case LCase(element) 
      			Case |set|: 
      				result = result + SIGNATURE_VALUE_SET 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      				
      			Case |get|: 
      				result =result + SIGNATURE_VALUE_GET 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |dim|
      				result = result + SIGNATURE_VALUE_VARIABLE 
      				
      				If Not (SIGNATURE_VALUE_PRIVATE = (result And SIGNATURE_VALUE_PRIVATE)) Then 
      					If Not (SIGNATURE_VALUE_PUBLIC = (result And SIGNATURE_VALUE_PUBLIC)) Then 
      						' scope has not been explicitly declared.  
      						' force a PRIVATE scope. 
      						result = result + SIGNATURE_VALUE_PRIVATE
      					End If
      				End If
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |const|
      				result = result + SIGNATURE_VALUE_CONST 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |sub|: 
      				result = result + SIGNATURE_VALUE_SUB 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |function|: 
      				result = result + SIGNATURE_VALUE_FUNCTION
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |event|: 
      				result = result + SIGNATURE_VALUE_EVENT 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |property|: 
      				result = result + SIGNATURE_VALUE_PROPERTY 
      				
      				
      			Case |type|: 
      				result = result + SIGNATURE_VALUE_TYPE 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |class|: 
      				result = result + SIGNATURE_VALUE_CLASS
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |private|: 
      				result = result + SIGNATURE_VALUE_PRIVATE
      				
      				
      			Case |public|: 
      				result = result + SIGNATURE_VALUE_PUBLIC
      				
      				
      			Case |final|: 
      				result = result + SIGNATURE_VALUE_FINAL
      				
      				
      			Case |static|: 
      				result = result + SIGNATURE_VALUE_STATIC
      				
      				
      			Case |lsx|: 
      				result = result + SIGNATURE_VALUE_VSE
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |library|: 
      				result = result + SIGNATURE_VALUE_LIBRARY
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case |vsid|: 
      				result = result + SIGNATURE_VALUE_VSID 
      				Exit ForAll ' next word is the name portion of the signature and should not be included.
      			
      				
      			Case Else 
      				' do nothing
      				
      		End Select
      	End ForAll
      	
      	
      	If (SIGNATURE_VALUE_PUBLIC = result) Then 
      		' special case for library and class public variables
      		idx% = InStr(LCase$(working$), | as |) 
      		If ((idx% > 8) And ((4 + idx%) < Len(working$))) Then result = result + SIGNATURE_VALUE_VARIABLE ' satisfies minimal length for pattern "Public a as foo" 
      	End If	
      	
      
      ExitPoint:
      	If (0 <> errcode%) Then Error errcode%, errmsg$ 
      	getSignatureCode = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	errcode% = Err() 
      	errmsg$ = Error() 
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	msg$ = || 
      	ForAll s In extendedinfo
      		If isBlankString(msg$) Then 
      			msg$ = ListTag(s) & |: | & s 
      		Else 
      			msg$ = msg$ & |, | & CRLF & ListTag(s) & |: | & s 
      		End If 
      	End ForAll
      	enhLogException LIB_PREFIX, msg$ 
      	Resume ExitPoint	
      End Function 
      
      '++LotusScript Development Environment:2:1:getValuedElementLinkedSummariesHTML:12:8
      
      
      %REM
      	Function getValuedElementLinkedSummariesHTML
      	Gets ValuedElement Summaries from an array of ValuedElement Objects. 
      	
      	@param source Array of ValuedElement objects. 
      	@param parent Parent CodeElement to the source array
      	
      	@return StringQueue containing API documentation summaries of each ValuedElement 
      %END REM
      Function getValuedElementLinkedSummariesHTML(source As Variant, parent As CodeElement) As StringQueue  
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	Dim taggedValues As StringList 
      	Dim obj As ValuedElement
      	
      	Dim result As New StringQueue()
      	Dim rowOdd As New StringsCarrier() 
      	Dim rowEven As New StringsCarrier() 
      	
      	Dim linkprefix$ 
      	Dim summaryrow$
      	Dim i%
      	
      	
      	' BEGIN CODE 
      	summaryrow$ = getVSIDstubContent(|html|).getValue(|LinkedSummaryRow|).joinContent(||)
      	rowEven.push Replace(summaryrow$, |{{rowclass}}|, |rowColor|)
      	rowOdd.push Replace(summaryrow$, |{{rowclass}}|, |altColor|) 
      	
      	
      	If Not (parent Is Nothing) Then 
      		If SIGNATURE_VALUE_VSID <> parent.InstanceCode Then linkprefix$ = parent.FileNameBase & DIRECTORY_DELIMITER
      	End If 
      	
      	i% = 1
      	ForAll element In source 
      		Set obj = element 
      		If Not (obj Is Nothing) Then 
      			Set taggedValues = obj.TaggedValues 
      			taggedValues.setElementValue |summarylink|, linkprefix$ & obj.FileNameBase & |.html| 
      			taggedValues.setElementValue |value|, obj.apiComment
      
      			If isEven(i) Then 
      				result.push taggedValues.replaceMoustacheTags(rowEven).joinContent(||) 
      			Else 
      				result.push taggedValues.replaceMoustacheTags(rowOdd).joinContent(||)
      			End If
      			
      			i% = i% + 1 
      		End If 
      	End ForAll
      
      	
      ExitPoint: 
      	Set getValuedElementLinkedSummariesHTML = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getLabeledElementKeywordHTML:13:8
      
      
      
      
      %REM
      	Function getLabeledElementKeywordHTML
      	Gets LabeledElement Keyword HTML from an array of LabeledElement Objects. 
      	
      	@param source Array of LabeledElement objects. 
      	
      	@return StringQueue containing HTML Keyword content for each LabeledElement  
      %END REM
      Private Function getLabeledElementKeywordHTML(labeledelements As Variant) As StringQueue  
      	On Error GoTo ErrorTrap
      	
      	Static keywordstub As String
      	Static loaded As Boolean  
      	
      	Dim le As LabeledElement 
      	Dim result As New StringQueue()
      	
      
      	' BEGIN CODE 
      	If (Not loaded) Then 
      		keywordstub = getVSIDstubContent(|html|).getValue(|HTML_HEAD_KEYWORD|).joinContent(||)
      		loaded = True 
      	End If
      	
      	ForAll element In labeledelements 
      		Set le = element 
      		If Not (le Is Nothing) Then 
      			result.push(Replace(keywordstub$, |{{keyword}}|, le.Label & |()|))
      		End If 
      	End ForAll
      
      	
      ExitPoint: 
      	Set getLabeledElementKeywordHTML = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, || 
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getMajorElementsUnorderedList:16:8
      
      
      
      %REM
      	Function getMajorElementsUnorderedList
      	Gets UnorderedList HTML from an array of Major Elements  
      	
      	@param source Array of MajorElements 
      	@param label Label for the Unordered List 
      	@param summarylinkprefix Prefix for the list item summary link
      		
      	@return HTML representing an UnorderedList for the Major Elements.
      	
      	@throws ERR_PARAMETER_INVALID if the source is anything other than an Array of Major Elements. 
      %END REM
      Function getMajorElementsUnorderedList(source As Variant, label$, summarylinkprefix$) As String 
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	
      	Dim detail As New StringList() 
      	Dim listitems As StringList ' k = MajorElement FQN, v=LinkedListItem constructed from MajorElement 
      	
      	Dim ul As New StringQueue() 
      	
      	Dim listtags As Variant 
      	
      	Dim unorderedlist  As StringsCarrier
      	
      	Dim result$
      	
      	' BEGIN CODE
      	extendedinfo(|Source Type|) = TypeName(source) 
      	extendedinfo(|Label|) = label$ 
      	extendedinfo(|Summary Link Prefix|) = summarylinkprefix$
      	If Not IsArray(source) Then Error ERR_PARAMETER_INVALID, MSG_PARAMETER_INVALID & |Source is not an Array of MajorElements.  |
      	
      	Set listitems = getMajorElementsListItems(source, summarylinkprefix$) 
      	If listitems.hasContent Then 
      		Set unorderedlist = getVSIDstubContent(|html|).getValue(|UnorderedList|) 
      
      		listtags = listitems.sortedListTags 
      		ForAll tagvalue In listtags 
      			ul.push listitems.getValue(CStr(tagvalue)) 
      		End ForAll
      
      		Call detail.clear() 
      		detail.setElementValue |label|, label$ 
      		detail.setElementValue |listitems|, ul.joinContent(||)
      		result$ = detail.replaceMoustacheTags(unorderedlist).joinContent(||) 
      	End If
      	
      	
      ExitPoint: 
      	getMajorElementsUnorderedList = result$
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:signatureCodeToInstanceCode:11:8
      
      
      %REM
      	Function signatureCodeToInstanceCode
      	Extracts an InstanceCode from a Signature Code 
      	
      	@param signaturecode  Signature Code from which to extract the Instance Code 
      	
      	@return Extracted Instance Code.  Zero if unsuccessful. 
      %END REM
      Function signatureCodeToInstanceCode(signaturecode As Long) As Long 
      	On Error GoTo ErrorTrap
      	
      	Dim result As Long
      	
      	' BEGIN CODE
      	If (0 = signaturecode) Then GoTo ExitPoint 
      	
      	ForAll ic In getInstanceCodes() 
      		If ic = (signaturecode And ic) Then
      			result = ic 
      			Exit ForAll 
      		End If 
      	End ForAll
      	
      ExitPoint: 
      	signatureCodeToInstanceCode = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:readTextFileToStringQueue:13:8
      
      
      
      %REM
      	Function readTextFileToStringQueue
      	Reads the contents of a text file into a StringQueue 
      	
      	@param source$ Filepath of file to be read.
      	
      	@return StringQueue containing the lines of text from the source file.  
      		If the file identified by source filepath cannot be found or is empty, an empty StringQueue will be returned
      %END REM
      Function readTextFileToStringQueue(source$) As StringQueue 
      	On Error GoTo ErrorTrap
      
      	Dim result As New StringQueue() 
      
      	' exception variables
      	Dim extendedinfo List As String 
      	
      
      	Dim directory$
      	Dim filepath$ 	
      	Dim text$ 
      	Dim file As Integer 
      
      	Dim isOpen As Boolean 
      
      	' BEGIN CODE
      	extendedinfo(|Source Filepath|) = source$
      	
      	directory$ = StrLeftBack(source$, DIRECTORY_DELIMITER) 
      	If Not makeDirectory(directory$) Then GoTo ExitPoint  ' The directory does not exist and could not be created.
      	
      	' Check for existence 	
      	filepath$ = Dir$(source$, 0)
      	If isBlankString(filepath$) Then GoTo ExitPoint   
      	
      	
      	file% = FreeFile() 
      	Open source$ For Input Access Read As #file% 
      	isOpen = True
      	
      	Do While Not EOF(file%)
      		Line Input #file%, text$ 
      		result.push text$ 
      	Loop
      
      ExitPoint: 
      	If isOpen Then 
      		isOpen = False 
      		Close #file% 
      	End If
      	Set readTextFileToStringQueue = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getElementsDetail:12:8
      
      
      %REM
      	Function getElementsDetail
      	Gets Element Detail html from an array of Element Objects. 
      	
      	@param elements				Array of Element objects (Methods or Variables). 
      	@param elementtypename 		TypeName of the element (Method or Variable) 
      	
      	@return StringQueue containing API documentation details of each Element 
      %END REM
      Function getElementsDetail(elements As Variant, elementtypename As String) As StringQueue  
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	Dim taggedValues As StringList
      	Dim elementdetailstub As StringsCarrier
      	
      	Dim result As New StringQueue()
      	
      	Dim i%
      	
      	' BEGIN CODE 
      	extendedinfo(|ElementTypeName|) = elementtypename 
      	Set elementdetailstub = getVSIDstubContent(|html|).getValue(elementtypename & |DetailElement|)
      	
      	If IsArray(elements) Then 
      		For i% = LBound(elements) To UBound(elements) 
      			If IsObject(elements(i%)) Then 
      				extendedinfo(|TypeName(elements(i%))|) = TypeName(elements(i%)) 
      				If Not (elements(i%) Is Nothing) Then 
      					Set taggedValues = elements(i%).TaggedValues
      					taggedValues.setElementValue |rowclass|, |altColor|
      					result.load taggedValues.replaceMoustacheTags(elementdetailstub)
      										
      				End If
      			End If			
      		Next
      	End If
      	
      
      
      	
      ExitPoint: 
      	Set getElementsDetail = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:generateNavHTML:14:8
      
      
      
      %REM
      	Function generateNavHTML
      	Generates the Navigation Page HTML content for the API documentation 
      	
      	@param taggedValues StringList containing values to replace tags in the various HTML stub (header, nav, footer, etc.) files 
      	@param bsxstubid$ Identifier for the BSX Stub HTML file to use. 
      	@param includeHeader Flag indicating if the HTML_HEADER should be included. 
      	
      	@return HTML content for the API documentation. 
      %END REM
      Function generateNavHTML(taggedValues As StringList, bsxstubid$, includeHeader As Boolean) As StringQueue
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	Dim result As New StringQueue() 
      	
      	
      	' BEGIN CODE
      	extendedinfo(|bsx stub id|) = bsxstubid$ 
      	
      	If (taggedValues Is Nothing) Then
      		result.load getVSIDstubContent(|html|).getValue(|HTML_BEGIN|)
      		If includeHeader Then result.load getVSIDstubContent(|html|).getValue(|HTML_HEADER|)
      		result.load getVSIDstubContent(|html|).getValue(bsxstubid$) 
      	Else 
      		result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_BEGIN|))
      		If includeHeader Then result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(|HTML_HEADER|)) 
      		result.load taggedValues.replaceMoustacheTags(getVSIDstubContent(|html|).getValue(bsxstubid$))	
      	End If
      	
      	
      ExitPoint: 
      	Set generateNavHTML = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getInstanceCodes:9:8
      
      
      %REM
      	Function getInstanceCodes
      	Gets Instance Codes for CodeElement instance types (VSID, VSE, Library, Class, Type, Property, Event, Function, Sub) 
      	
      	@return Array of Integers containing the Instance Codes
      %END REM
      Static Function getInstanceCodes() As Variant
      	Dim result(11) As Long
      	Dim isInstantiated As Boolean  
      	
      	' BEGIN CODE
      	If Not isInstantiated Then 
      		result(0) = SIGNATURE_VALUE_VSID
      		result(1) = SIGNATURE_VALUE_VSE
      		result(2) = SIGNATURE_VALUE_LIBRARY
      		result(3) = SIGNATURE_VALUE_CLASS
      		result(4) = SIGNATURE_VALUE_TYPE
      		result(5) = SIGNATURE_VALUE_PROPERTY
      		result(6) = SIGNATURE_VALUE_EVENT
      		result(7) = SIGNATURE_VALUE_FUNCTION
      		result(8) = SIGNATURE_VALUE_SUB
      		result(9) = SIGNATURE_VALUE_VARIABLE
      		result(10) = SIGNATURE_VALUE_CONST
      		result(11) = SIGNATURE_VALUE_REMARK
      		
      		isInstantiated = True 
      	End If
      	
      ExitPoint:
      	getInstanceCodes = result
      End Function 
      
      '++LotusScript Development Environment:2:1:getMoustacheTagsLeadingText:11:8
      
      
      %REM
      	Function getMoustacheTagsLeadingTest
      	Extracts Moustache Tags and their leading text from a string 
      	
      	@param source$ String from which to extract the Moustache Tags and their leading text 
      	
      	@return StringList containing leading text for all found Moustache Tags (k=tag, v=whitespace) 
      %END REM
      Private Function getMoustacheTagsLeadingText(source$) As StringList 
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	Dim temp As Variant 
      	
      	Dim result As New StringList()
      	Dim textline$ 
      	Dim trimmedline$
      	Dim leadingtext$ 
      	Dim tag$ 
      	
      	Dim idx_tagbegin%
      	Dim idx_tagend%
      	Dim taglength%
      	Dim sourcelength& 	
      	
      	' BEGIN CODE
      	extendedinfo(|source|) = source$
      	sourcelength& = Len(source$) 
      	extendedinfo(|sourcelength|) = CStr(sourcelength&)
      	textline$ = source$ 
      	trimmedline$ = FullTrim(textline$)
      
      	Do While Not isBlankString(trimmedline$)
      		If Not getBaliStrings().beginsWith(trimmedline$, |{{|) Then Exit Do 
      
      		idx_tagbegin% = InStr(textline$, |{{|) 
      		If idx_tagbegin% < 1 Then Exit Do
      		
      		idx_tagend% = InStr(idx_tagbegin%, textline$, |}}|)
      		taglength% = idx_tagend% - (idx_tagbegin% + 2)
      		If taglength% < 1 Then Exit Do
      		
      		If idx_tagbegin% > 1 Then leadingtext$ = leadingtext$ & Left(textline$, idx_tagbegin% -1)
      		tag$ = Mid$(textline$, idx_tagbegin% + 2, taglength%) 
      		result.setElementValue tag$, leadingtext$
      		textline$ = Mid$(textline$, idx_tagend% + 2, Len(textline$)) 
      		trimmedline$ = FullTrim(textline$) 
      	Loop 	
      	
      ExitPoint: 
      	Set getMoustacheTagsLeadingText = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getMethodSummaries:11:8
      
      
      %REM
      	Function getMethodSummaries
      	Gets Method Summaries from an array of Method Objects. 
      	
      	@param source Array of Method objects. 
      	
      	@return StringQueue containing API documentation summaries of each Method 
      %END REM
      Function getMethodSummaries(methods As Variant) As StringQueue  
      	Set getMethodSummaries = getElementSummary(methods, |Method|)
      End Function
      
      '++LotusScript Development Environment:2:1:writeAPIdoc:21:8
      
      %REM
      	Function writeAPIdoc
      	Writes API documentation to a file 
      	
      	Replaces moustache tag {{apidocgenerated}} in source with API documentation Generation Text.
      		API documentation Generation Text: "Generated by APIdoc (APIDOC_VERSION) on <TIMESTAMP> -->
      
      	IMPORTANT NOTE: Existing files will be OVERWRITTEN!  It is up to the calling code to pre-check for existence of file.
      			
      	@param taggedValues StringList containing values to replace tags in the various HTML stub (header, nav, footer, etc.) files 
      	@param source Text to be written to a file. 
      	@param target$ Filepath of file to be written. 
      	
      	@return Number of bytes written to the target file.   
      
      	@throws ERR_PARAMETER_BLANK if taggedValues is Nothing.
      	@throws ERR_PARAMETER_BLANK if target filepath is blank.
      	@throws ERR_OPERATION_FAILED or other file system exception on failure.  
      %END REM
      Function writeAPIdoc(taggedValues As StringList, source As StringQueue, target$) As Long 
      	Dim result&
      		
      	If taggedValues Is Nothing Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK & |TaggedValues is Nothing.  |
      	
      	' BEGIN CODE
      	taggedValues.setElementValue |apidocgenerated|, |Generated by APIdoc (| & APIDOC_VERSION & |) on | & Format$(Now, |ddd mmm dd yyyy at hh:nn:ss|) 
      	taggedValues.setElementValue |yyyy-mm-dd|, Format$(Now, |yyyy-mm-dd|) 
      	result& = taggedValues.replaceMoustacheTags(source).writeToFile(target$)
      	
      ExitPoint: 
      	If (result& > 0) Then enhLogAction LIB_PREFIX, |Wrote | & Format$(result&, FORMAT_WHOLE_THOUSANDS) & | bytes to | & target$ & |.|
      	writeAPIdoc = result& 
      End Function
      
      '++LotusScript Development Environment:2:1:getSignatureElements:49:8
      
      
      
      %REM
      	Function getSignatureElements
      	Returns a StringQueue containing the various Signature elements (Type, Class, Property, Sub, etc) for an associated value. 
      	
      	Performs a bitwise comparison on the source value to determine the elements of the returned array 
      	Source value compared to the following constants:
      	
      	Const SIGNATURE_VALUE_GET 		= 1
      	Const SIGNATURE_VALUE_SET 		= 2
      	
      	Const SIGNATURE_VALUE_SUB 		= 4
      	Const SIGNATURE_VALUE_FUNCTION	= 8 
      	Const SIGNATURE_VALUE_EVENT 	= 16
      	Const SIGNATURE_VALUE_PROPERTY 	= 32
      	
      	Const SIGNATURE_VALUE_TYPE 		= 64
      	Const SIGNATURE_VALUE_CLASS 	= 128 
      	
      	Const SIGNATURE_VALUE_PUBLIC 	= 256
      	Const SIGNATURE_VALUE_PRIVATE 	= 512
      	
      	Const SIGNATURE_VALUE_STATIC 	= 1024
      	Const SIGNATURE_VALUE_FINAL 	= 2048
      	
      	Const SIGNATURE_VALUE_VSE 		= 4096 
      	Const SIGNATURE_VALUE_LIBRARY 	= 8192
      	Const SIGNATURE_VALUE_VSID 		= 16384
      	
      	
      	The order of possible values to be returned is: 
      		VSID (standalone) 
      		VSE (standalone) 
      		Library (standalone)
      		Static, Private, Public, Class, Type, Property, Event, Function, Sub, Set, Get
      	
      		For example, if the source value is 1313, then the array values returned are "Static", "Public", "Property", and "Get" (1024 + 256 + 32 + 1). 
      
      	If a conflict occurs with the returned value type (such as "Sub" and "Function", or "Get" and "Set") an error will be thrown.  
      						
      	@param source Long value to check
      	
      	@return StringQueue generated from bitwise comparison of the source to the referenced constants.
      	
      	@throws ERR_INVALID_SIGNATURE_CODE if source is negative or resolves to conflicting results. 
      %END REM
      Function getSignatureElements(source As Long) As StringQueue 
      	On Error GoTo ErrorTrap
      	
      	Dim result As New StringQueue()
      	Dim extendedinfo List As String  
      	Dim msg$ 
      	Dim msgfail$ 
      
      	Dim errcode%
      	
      	
      	' BEGIN CODE
      	msgfail$ = MSG_INVALID_SIGNATURE_CODE & |Signature Code: | & CStr(source) & |.  |
      	
      	
      	' first check for negative
      	If source < 0 Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      	
      	
      	' check for VSID 
      	If SIGNATURE_VALUE_VSID = (source And SIGNATURE_VALUE_VSID) Then
      		' VSID Signatures may have no other elements
      		extendedinfo(|checking|) = |VSID| 
      		If (source <> SIGNATURE_VALUE_VSID) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$
      		result.push |VSID|
      		GoTo ExitPoint 
      	End If  
      
      
      	' check for VSE 
      	If SIGNATURE_VALUE_VSE = (source And SIGNATURE_VALUE_VSE) Then
      		' VSE Signatures may have no other elements 
      		extendedinfo(|checking|) = |VSE| 
      		If (source <> SIGNATURE_VALUE_VSE) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$
      		result.push |VSE|
      		GoTo ExitPoint 
      	End If  
      	
      
      	' check for LIBRARY 
      	If SIGNATURE_VALUE_LIBRARY = (source And SIGNATURE_VALUE_LIBRARY) Then
      		' LIBRARY Signatures may have no other elements 
      		extendedinfo(|checking|) = |LIBRARY| 
      		If (source <> SIGNATURE_VALUE_LIBRARY) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$
      		result.push |Library|
      		GoTo ExitPoint 
      	End If  
      	
      
      	' check for STATIC 
      	If (SIGNATURE_VALUE_STATIC = (source And SIGNATURE_VALUE_STATIC)) Then
      		' Classes and Types may not be static  
      		extendedinfo(|checking|) = |STATIC| 
      		If (SIGNATURE_VALUE_TYPE = (source And SIGNATURE_VALUE_TYPE)) Or (SIGNATURE_VALUE_CLASS = (source And SIGNATURE_VALUE_CLASS)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		result.push |Static|
      	End If 
      
      	
      	' check for FINAL 
      	extendedinfo(|checking|) = |FINAL| 
      	If (SIGNATURE_VALUE_FINAL = (source And SIGNATURE_VALUE_FINAL)) Then result.push |Final|
      
      	
      	' check Public / Private 
      	extendedinfo(|checking|) = |Public/Private| 
      	If (SIGNATURE_VALUE_PUBLIC = (source And SIGNATURE_VALUE_PUBLIC)) And (SIGNATURE_VALUE_PRIVATE = (source And SIGNATURE_VALUE_PRIVATE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      	If (SIGNATURE_VALUE_PRIVATE = (source And SIGNATURE_VALUE_PRIVATE)) Then result.push |Private|
      	If (SIGNATURE_VALUE_PUBLIC = (source And SIGNATURE_VALUE_PUBLIC)) Then result.push |Public|
      
      
      	' check Class 
      	If (SIGNATURE_VALUE_CLASS = (source And SIGNATURE_VALUE_CLASS)) Then 
      		extendedinfo(|checking|) = |Class| 
      		If (SIGNATURE_VALUE_TYPE = (source And SIGNATURE_VALUE_TYPE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_PROPERTY = (source And SIGNATURE_VALUE_PROPERTY)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_EVENT = (source And SIGNATURE_VALUE_EVENT)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_FUNCTION = (source And SIGNATURE_VALUE_FUNCTION)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Or (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      
      		result.push |Class| 
      	End If	
      
      
      	' check Type 
      	If (SIGNATURE_VALUE_TYPE = (source And SIGNATURE_VALUE_TYPE)) Then 
      		extendedinfo(|checking|) = |Type| 
      		If (SIGNATURE_VALUE_PROPERTY = (source And SIGNATURE_VALUE_PROPERTY)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_EVENT = (source And SIGNATURE_VALUE_EVENT)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_FUNCTION = (source And SIGNATURE_VALUE_FUNCTION)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Or (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		
      		result.push |Type| 
      	End If	
      	
      	
      	' check Property 
      	If (SIGNATURE_VALUE_PROPERTY = (source And SIGNATURE_VALUE_PROPERTY)) Then
      		extendedinfo(|checking|) = |Property| 
      		If (SIGNATURE_VALUE_EVENT = (source And SIGNATURE_VALUE_EVENT)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_FUNCTION = (source And SIGNATURE_VALUE_FUNCTION)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      
      		result.push |Property| 
      
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) And (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then 
      			extendedinfo(|SIGNATURE_VALUE_PROPERTY|) = |Property is both Setter and Getter. |
      			Error ERR_INVALID_SIGNATURE_CODE, msgfail$
      			
      		ElseIf (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Then 
      			result.push |Get|	
      			
      		ElseIf (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then 
      			result.push |Set|
      			
      		Else 			
      			extendedinfo(|SIGNATURE_VALUE_PROPERTY|) = |Property neither Setter nor Getter. |
      			Error ERR_INVALID_SIGNATURE_CODE, msgfail$
      		End If 
      
      	End If
      
      
      	' check Event 
      	If (SIGNATURE_VALUE_EVENT = (source And SIGNATURE_VALUE_EVENT)) Then 
      		extendedinfo(|checking|) = |Event| 
      		If (SIGNATURE_VALUE_FUNCTION = (source And SIGNATURE_VALUE_FUNCTION)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Or (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		
      		result.push |Event| 
      	End If
      
      	
      	' check Function 
      	If (SIGNATURE_VALUE_FUNCTION = (source And SIGNATURE_VALUE_FUNCTION)) Then 
      		extendedinfo(|checking|) = |Function| 
      		If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Or (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		
      		result.push |Function| 
      	End If
      
      
      	' check Sub 
      	If (SIGNATURE_VALUE_SUB = (source And SIGNATURE_VALUE_SUB)) Then 
      		extendedinfo(|checking|) = |Sub| 
      		If (SIGNATURE_VALUE_GET = (source And SIGNATURE_VALUE_GET)) Or (SIGNATURE_VALUE_SET = (source And SIGNATURE_VALUE_SET)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		
      		result.push |Sub| 
      	End If
      	
      	
      	' check Constant 
      	If (SIGNATURE_VALUE_CONST = (source And SIGNATURE_VALUE_CONST)) Then 
      		extendedinfo(|checking|) = |Const| 
      		If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      		
      		result.push |Const| 
      	End If
      	
      	 
      	If (SIGNATURE_VALUE_VARIABLE = (source And SIGNATURE_VALUE_VARIABLE)) Then 
      		' do nothing on variables	
      	End If
      	
      	
      ExitPoint:
      	If (0 <>  errcode%) Then Error ERR_INVALID_SIGNATURE_CODE, msgfail$ 
      	
      	Set getSignatureElements = result
      	Exit Function
      ErrorTrap:
      	On Error GoTo 0 
      	errcode% = Err()
      	extendedinfo(|partial signature|) = result.joinContent(| |)
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	msg$ = || 
      	ForAll s In extendedinfo 
      		If isBlankString(msg$) Then 
      			msg$ = ListTag(s) & |: | & s 
      		Else 
      			msg$ = msg$ & CRLF & ListTag(s) & |: | & s
      		End If
      	End ForAll
      	enhLogException LIB_PREFIX, msg$ 
      	Resume ExitPoint  
      End Function
      
      
      
      
      
      
      
      '++LotusScript Development Environment:2:1:getContext:5:8
      %REM
      	Function getContext
      	Gets the Context Object instance
      %END REM
      Static Function getContext() As Context 
      	On Error GoTo ErrorTrap
      	
      	Static result As Context
      	
      	' BEGIN CODE
      	If result Is Nothing Then Set result = New Context() 
      	
      ExitPoint: 
      	Set getContext = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, ||
      	Resume ExitPoint
      End Function
      
      '++LotusScript Development Environment:2:1:getModifierElements:26:8
      
      
      
      
      %REM
      	Function getModifierElements
      	Returns a StringQueue containing the various Signature modifiers (Public, Private, Static, etc) for an associated value.
      	
      	Wrapper method for getSignatureElements() 
      	
      	*Only includes modifiers: Static, Private, Public, Set, and Get
      	
      	The order of possible values to be returned is: 
      		Static, Private, Public, Set, Get
      	
      	If a conflict occurs with the returned value type (such as "Sub" and "Function", or "Get" and "Set") an error will be thrown.  
      		
      	@param source Long value to check
      	
      	@return StringQueue generated from bitwise comparison of the source to the referenced constants.
      	
      	@throws ERR_INVALID_SIGNATURE_CODE if source is negative or resolves to conflicting results.   
      	
      	@see getModifierElements() 
      %END REM 
      Private Function getModifierElements(source As Long) As StringQueue 
      	Dim sq As StringQueue 
      	Dim result As New StringQueue()
      	Dim modifier$
      	
      	Set sq = getSignatureElements(source)
      	modifier$ = sq.pop() 
      	While Not isBlankString(modifier$) 
      		Select Case modifier$ 
      			Case |Static|, |Private|, |Public|, |Set|, |Get|: 
      				result.push(modifier$) 
      
      			Case Else: 
      				' do nothing
      			
      		End Select
      		
      		modifier$ = sq.pop() 
      	Wend
      		
      ExitPoint:
      	Set getModifierElements = result
      End Function
      
      '++LotusScript Development Environment:2:1:getMethodsDetail:11:8
      
      
      %REM
      	Function getMethodsDetail
      	Gets Method Detail html from an array of Method Objects. 
      	
      	@param source Array of Method objects. 
      	
      	@return StringQueue containing API documentation Method Detail for each Method 
      %END REM
      Function getMethodsDetail(methods As Variant) As StringQueue  
      	Set getMethodsDetail = getElementsDetail(methods, |Method|)
      End Function
      
      '++LotusScript Development Environment:2:1:getElementSummary:13:8
      
      
      
      %REM
      	Function getElementSummary
      	Gets Element Summaries from an array of Method, Variable, or Constant Objects. 
      	
      	@param elements 			Array of Element objects (Method, Variable, or Constant). 
      	@param elementtypename 		TypeName of the element (Method, Variable, or Constant) 
      	
      	@return StringQueue containing API documentation summaries of each Element 
      %END REM
      Function getElementSummary(elements As Variant, elementtypename As String) As StringQueue  
      	On Error GoTo ErrorTrap
      	
      	' exception variables
      	Dim extendedinfo List As String 
      	
      	Dim taggedValues As StringList
      	
      	Dim result As New StringQueue()
      	Dim variablesummaryrow$
      	
      	Dim rowOdd As New StringsCarrier() 
      	Dim rowEven As New StringsCarrier() 
      	
      	Dim i%
      	
      	
      	' BEGIN CODE 
      	extendedinfo(|ElementTypeName|) = elementtypename 
      	variablesummaryrow$ = getVSIDstubContent(|html|).getValue(elementtypename & |SummaryRow|).joinContent(||) 
      	rowEven.push Replace(variablesummaryrow$, |{{rowclass}}|, |rowColor|)
      	rowOdd.push Replace(variablesummaryrow$, |{{rowclass}}|, |altColor|) 
      	
      	If IsArray(elements) Then 
      		For i% = LBound(elements) To UBound(elements) 
      			If IsObject(elements(i%)) Then 
      				extendedinfo(|TypeName(elements(i%))|) = TypeName(elements(i%)) 
      				If Not (elements(i%) Is Nothing) Then 
      					Set taggedValues = elements(i%).TaggedValues
      					If isEven(i) Then
      						result.push taggedValues.replaceMoustacheTags(rowEven).joinContent(||) 
      					Else 
      						result.push taggedValues.replaceMoustacheTags(rowOdd).joinContent(||)  
      					End If				
      
      				End If
      			End If			
      		Next
      	End If
      	
      
      ExitPoint: 
      	Set getElementSummary = result
      	Exit Function 
      ErrorTrap:
      	On Error GoTo 0
      	pushExceptionCarrier MODULE_NAME, ||, extendedinfo
      	Resume ExitPoint
      End Function
    signed: true
    nonsummary: true
  - name: $TITLE
    type: text
    data: BSXdocumentationUtils
    signed: true
remaining: []