{"label":"BSXnotesUtils","comment":"Created Jul 2022 by Devin Olson/USA/PNPHCL\n\tBaliSX Notes Object Utilities","valuetype":"","filenamebase":"BSXnotesUtils_Library","fqnprefix":"VSID","qn":"BSXnotesUtils","codesample":"","signaturecode":65536,"instancecode":65536,"description":"","codesamplehtml":"","scriptcreator":"Devin Olson","signature":"Library BSXnotesUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Created Jul 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tBaliSX Notes Object Utilities&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Created Jul 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tBaliSX Notes Object Utilities","inlinecomment":" \t &apos; Created Jul 2022 by Devin Olson/USA/PNPHCL\n\tBaliSX Notes Object Utilities", "constants":[{"label":"ADT_SUCCESS","comment":"","valuetype":"","filenamebase":"ADTSUCCESS_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ADTSUCCESS","codesample":"","signaturecode":2056,"instancecode":8,"value":true,"f_returnsobject":0,"signature":"Public Const ADT_SUCCESS = True","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ADT_FAIL","comment":"","valuetype":"","filenamebase":"ADTFAIL_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ADTFAIL","codesample":"","signaturecode":2056,"instancecode":8,"value":false,"f_returnsobject":0,"signature":"Public Const ADT_FAIL = False","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"FORMNAME_TOOLKIT_CONFIG","comment":"","valuetype":"","filenamebase":"FORMNAMETOOLKITCONFIG_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"FORMNAMETOOLKITCONFIG","codesample":"","signaturecode":2056,"instancecode":8,"value":"|Toolkit Configuration|","f_returnsobject":0,"signature":"Public Const FORMNAME_TOOLKIT_CONFIG = |Toolkit Configuration|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_VSID","comment":"","valuetype":"","filenamebase":"PREFIXVSID_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXVSID","codesample":"","signaturecode":2056,"instancecode":8,"value":"|vsid.|","f_returnsobject":0,"signature":"Public Const PREFIX_VSID = |vsid.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_APIDOC_SCRIPT","comment":"","valuetype":"","filenamebase":"PREFIXAPIDOCSCRIPT_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXAPIDOCSCRIPT","codesample":"","signaturecode":2056,"instancecode":8,"value":"FIX_VSID &amp;amp; |vss.|","f_returnsobject":0,"signature":"Public Const PREFIX_APIDOC_SCRIPT = FIX_VSID &amp;amp; |vss.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_APIDOC_CSS","comment":"","valuetype":"","filenamebase":"PREFIXAPIDOCCSS_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXAPIDOCCSS","codesample":"","signaturecode":2056,"instancecode":8,"value":"PREFIX_VSID &amp;amp; |css.|","f_returnsobject":0,"signature":"Public Const PREFIX_APIDOC_CSS = PREFIX_VSID &amp;amp; |css.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_APIDOC_HTML","comment":"","valuetype":"","filenamebase":"PREFIXAPIDOCHTML_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXAPIDOCHTML","codesample":"","signaturecode":2056,"instancecode":8,"value":"PREFIX_VSID &amp;amp; |html.|","f_returnsobject":0,"signature":"Public Const PREFIX_APIDOC_HTML = PREFIX_VSID &amp;amp; |html.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_APIDOC_IMAGE","comment":"","valuetype":"","filenamebase":"PREFIXAPIDOCIMAGE_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXAPIDOCIMAGE","codesample":"","signaturecode":2056,"instancecode":8,"value":"PREFIX_VSID &amp;amp; |image.|","f_returnsobject":0,"signature":"Public Const PREFIX_APIDOC_IMAGE = PREFIX_VSID &amp;amp; |image.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PREFIX_APIDOC_JS","comment":"","valuetype":"","filenamebase":"PREFIXAPIDOCJS_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PREFIXAPIDOCJS","codesample":"","signaturecode":2056,"instancecode":8,"value":"PREFIX_VSID &amp;amp; |js.|","f_returnsobject":0,"signature":"Public Const PREFIX_APIDOC_JS = PREFIX_VSID &amp;amp; |js.|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"DATATYPE_VOLTSCRIPT","comment":"VoltScript Object data types (VSS Object).","valuetype":"","filenamebase":"DATATYPEVOLTSCRIPT_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"DATATYPEVOLTSCRIPT","codesample":"","signaturecode":2056,"instancecode":8,"value":4,"f_returnsobject":0,"signature":"Public Const DATATYPE_VOLTSCRIPT = 4","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript Object data types (VSS Object).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript Object data types (VSS Object).","inlinecomment":" \t &apos; VoltScript Object data types (VSS Object).","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"DATATYPE_NOTES","comment":"Notes Object data types, such as NotesSession, NotesDatabase, etc","valuetype":"","filenamebase":"DATATYPENOTES_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"DATATYPENOTES","codesample":"","signaturecode":2056,"instancecode":8,"value":2,"f_returnsobject":0,"signature":"Public Const DATATYPE_NOTES = 2","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Notes Object data types, such as NotesSession, NotesDatabase, etc&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Notes Object data types, such as NotesSession, NotesDatabase, etc","inlinecomment":" \t &apos; Notes Object data types, such as NotesSession, NotesDatabase, etc","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"DATATYPE_ADT","comment":"C++ Automatic Data Types (VSE Object).","valuetype":"","filenamebase":"DATATYPEADT_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"DATATYPEADT","codesample":"","signaturecode":2056,"instancecode":8,"value":3,"f_returnsobject":0,"signature":"Public Const DATATYPE_ADT = 3","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;C++ Automatic Data Types (VSE Object).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"C++ Automatic Data Types (VSE Object).","inlinecomment":" \t &apos; C++ Automatic Data Types (VSE Object).","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"DATATYPE_SCALAR","comment":"Scalar DataType such as Integer, String, etc.","valuetype":"","filenamebase":"DATATYPESCALAR_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"DATATYPESCALAR","codesample":"","signaturecode":2056,"instancecode":8,"value":1,"f_returnsobject":0,"signature":"Public Const DATATYPE_SCALAR = 1","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Scalar DataType such as Integer, String, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Scalar DataType such as Integer, String, etc.","inlinecomment":" \t &apos; Scalar DataType such as Integer, String, etc.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PROJECTTYPE_EXTENSION","comment":"VoltScript Extension (VSE) Project Types","valuetype":"","filenamebase":"PROJECTTYPEEXTENSION_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PROJECTTYPEEXTENSION","codesample":"","signaturecode":2056,"instancecode":8,"value":1,"f_returnsobject":0,"signature":"Public Const PROJECTTYPE_EXTENSION = 1","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript Extension (VSE) Project Types&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript Extension (VSE) Project Types","inlinecomment":" \t &apos; VoltScript Extension (VSE) Project Types","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"PROJECTTYPE_LIBRARY","comment":"PROJECTTYPE_LIBRARY","valuetype":"","filenamebase":"PROJECTTYPELIBRARY_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"PROJECTTYPELIBRARY","codesample":"","signaturecode":2056,"instancecode":8,"value":2,"f_returnsobject":0,"signature":"Public Const PROJECTTYPE_LIBRARY = 2","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;PROJECTTYPE_LIBRARY&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"PROJECTTYPE_LIBRARY","inlinecomment":" \t &apos; PROJECTTYPE_LIBRARY","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_APP_NAME","comment":"","valuetype":"","filenamebase":"ITEMNAMEAPPNAME_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMEAPPNAME","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_AppName|","f_returnsobject":0,"signature":"Public Const ITEMNAME_APP_NAME = |F_AppName|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_CLASS_ARCHIVE","comment":"","valuetype":"","filenamebase":"ITEMNAMECLASSARCHIVE_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMECLASSARCHIVE","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_VSEClassArchive|","f_returnsobject":0,"signature":"Public Const ITEMNAME_CLASS_ARCHIVE = |F_VSEClassArchive|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_CLASS_NAME","comment":"","valuetype":"","filenamebase":"ITEMNAMECLASSNAME_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMECLASSNAME","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_ClassName|","f_returnsobject":0,"signature":"Public Const ITEMNAME_CLASS_NAME = |F_ClassName|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_CLASSID_COUNTER","comment":"","valuetype":"","filenamebase":"ITEMNAMECLASSIDCOUNTER_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMECLASSIDCOUNTER","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_LSXClassID|","f_returnsobject":0,"signature":"Public Const ITEMNAME_CLASSID_COUNTER = |F_LSXClassID|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_METHOD_ARCHIVE","comment":"","valuetype":"","filenamebase":"ITEMNAMEMETHODARCHIVE_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMEMETHODARCHIVE","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_VSEPMEArchive|","f_returnsobject":0,"signature":"Public Const ITEMNAME_METHOD_ARCHIVE = |F_VSEPMEArchive|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"ITEMNAME_METHODID_COUNTER","comment":"","valuetype":"","filenamebase":"ITEMNAMEMETHODIDCOUNTER_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"ITEMNAMEMETHODIDCOUNTER","codesample":"","signaturecode":2056,"instancecode":8,"value":"|F_LSXPMEID|","f_returnsobject":0,"signature":"Public Const ITEMNAME_METHODID_COUNTER = |F_LSXPMEID|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"VIEWNAME_PROJECTS_LSX","comment":"","valuetype":"","filenamebase":"VIEWNAMEPROJECTSLSX_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"VIEWNAMEPROJECTSLSX","codesample":"","signaturecode":2056,"instancecode":8,"value":"|LSX Projects|","f_returnsobject":0,"signature":"Public Const VIEWNAME_PROJECTS_LSX = |LSX Projects|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"VIEWNAME_PROJECTS_VSE","comment":"","valuetype":"","filenamebase":"VIEWNAMEPROJECTSVSE_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"VIEWNAMEPROJECTSVSE","codesample":"","signaturecode":2056,"instancecode":8,"value":"|VSE Projects|","f_returnsobject":0,"signature":"Public Const VIEWNAME_PROJECTS_VSE = |VSE Projects|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"VIEWNAME_PROJECTS_SCRIPT","comment":"","valuetype":"","filenamebase":"VIEWNAMEPROJECTSSCRIPT_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"VIEWNAMEPROJECTSSCRIPT","codesample":"","signaturecode":2056,"instancecode":8,"value":"|Script Projects|","f_returnsobject":0,"signature":"Public Const VIEWNAME_PROJECTS_SCRIPT = |Script Projects|","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_OK","comment":"","valuetype":"","filenamebase":"WIZARDOK_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDOK","codesample":"","signaturecode":2056,"instancecode":8,"value":0,"f_returnsobject":0,"signature":"Public Const WIZARD_OK = 0","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_YESNO","comment":"","valuetype":"","filenamebase":"WIZARDYESNO_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDYESNO","codesample":"","signaturecode":2056,"instancecode":8,"value":36,"f_returnsobject":0,"signature":"Public Const WIZARD_YESNO = 36","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_ERR","comment":"","valuetype":"","filenamebase":"WIZARDERR_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDERR","codesample":"","signaturecode":2056,"instancecode":8,"value":16,"f_returnsobject":0,"signature":"Public Const WIZARD_ERR = 16","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_EXCLAM","comment":"","valuetype":"","filenamebase":"WIZARDEXCLAM_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDEXCLAM","codesample":"","signaturecode":2056,"instancecode":8,"value":48,"f_returnsobject":0,"signature":"Public Const WIZARD_EXCLAM = 48","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_YES","comment":"","valuetype":"","filenamebase":"WIZARDYES_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDYES","codesample":"","signaturecode":2056,"instancecode":8,"value":6,"f_returnsobject":0,"signature":"Public Const WIZARD_YES = 6","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"WIZARD_NO","comment":"","valuetype":"","filenamebase":"WIZARDNO_Constant","fqnprefix":"VSID.BSXnotesUtils","qn":"WIZARDNO","codesample":"","signaturecode":2056,"instancecode":8,"value":7,"f_returnsobject":0,"signature":"Public Const WIZARD_NO = 7","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Const"]}], "methods":[{"label":"ArchiveTag","comment":"Generates an Archive Tag from two strings. \nPATTERN: (s1)[s2]","valuetype":"String","filenamebase":"ArchiveTag_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"ArchiveTag","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(S1 As String, S2 As String)","signature":"Public Function ArchiveTag(S1 As String, S2 As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates an Archive Tag from two strings. &lt;br /&gt;PATTERN: (s1)[s2]&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates an Archive Tag from two strings. &lt;br /&gt;PATTERN: (s1)[s2]","inlinecomment":" \t &apos; Generates an Archive Tag from two strings. \nPATTERN: (s1)[s2]","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"S1","comment":"1st string for the tag","valuetype":"String","filenamebase":"S1_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsArchiveTag","qn":"S1","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;1st string for the tag&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"1st string for the tag","inlinecomment":" \t &apos; 1st string for the tag"},{"label":"S2","comment":"2nd string for the tag","valuetype":"String","filenamebase":"S2_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsArchiveTag","qn":"S2","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;2nd string for the tag&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"2nd string for the tag","inlinecomment":" \t &apos; 2nd string for the tag"}]},{"label":"generateLibrary","comment":"Generates a BSXdocumentationUtils.VSE object for a VSE","valuetype":"Library","filenamebase":"generateLibrary_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"generateLibrary","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As NotesDocument, parent As CodeElement)","signature":"Public Function generateLibrary(source As NotesDocument, parent As CodeElement) As Library","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a BSXdocumentationUtils.VSE object for a VSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a BSXdocumentationUtils.VSE object for a VSE","inlinecomment":" \t &apos; Generates a BSXdocumentationUtils.VSE object for a VSE","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"NotesDocument representing the Library from which to generate the Library Object  ","valuetype":"NotesDocument","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateLibrary","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NotesDocument representing the Library from which to generate the Library Object  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NotesDocument representing the Library from which to generate the Library Object  ","inlinecomment":" \t &apos; NotesDocument representing the Library from which to generate the Library Object  "},{"label":"parent","comment":"Parent VSID object.","valuetype":"CodeElement","filenamebase":"parent_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateLibrary","qn":"parent","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parent VSID object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parent VSID object.","inlinecomment":" \t &apos; Parent VSID object."}]},{"label":"generateVSE","comment":"Generates a BSXdocumentationUtils.VSE object for a VSE","valuetype":"VSE","filenamebase":"generateVSE_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"generateVSE","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As NotesDocument, parent As CodeElement)","signature":"Public Function generateVSE(source As NotesDocument, parent As CodeElement) As VSE","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a BSXdocumentationUtils.VSE object for a VSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a BSXdocumentationUtils.VSE object for a VSE","inlinecomment":" \t &apos; Generates a BSXdocumentationUtils.VSE object for a VSE","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"NotesDocument representing the VSE from which to generate the VSE Object  ","valuetype":"NotesDocument","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateVSE","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NotesDocument representing the VSE from which to generate the VSE Object  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NotesDocument representing the VSE from which to generate the VSE Object  ","inlinecomment":" \t &apos; NotesDocument representing the VSE from which to generate the VSE Object  "},{"label":"parent","comment":"Parent VSID for the VSE","valuetype":"CodeElement","filenamebase":"parent_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateVSE","qn":"parent","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parent VSID for the VSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parent VSID for the VSE","inlinecomment":" \t &apos; Parent VSID for the VSE"}]},{"label":"generateVSID","comment":"Generates a BSXdocumentationUtils.VSID object for the VSID Database\n\t\n**IMPORTANT NOTE:  &amp;quot;Project&amp;quot; forms are associated with &amp;quot;VSE&amp;quot; classes  \n\t\nThe VSID class represents the VSID Database, and can contain MULTIPLE VSE classes generated from MULTIPLE Project forms!!!","valuetype":"VSID","filenamebase":"generateVSID_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"generateVSID","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(includeVSEs As Boolean, includeLibraries As Boolean)","signature":"Public Function generateVSID(includeVSEs As Boolean, includeLibraries As Boolean) As VSID","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a BSXdocumentationUtils.VSID object for the VSID Database&lt;br /&gt;\t&lt;br /&gt;**IMPORTANT NOTE:  &amp;quot;Project&amp;quot; forms are associated with &amp;quot;VSE&amp;quot; classes  &lt;br /&gt;\t&lt;br /&gt;The VSID class represents the VSID Database, and can contain MULTIPLE VSE classes generated from MULTIPLE Project forms!!!&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a BSXdocumentationUtils.VSID object for the VSID Database&lt;br /&gt;\t&lt;br /&gt;**IMPORTANT NOTE:  &amp;quot;Project&amp;quot; forms are associated with &amp;quot;VSE&amp;quot; classes  &lt;br /&gt;\t&lt;br /&gt;The VSID class represents the VSID Database, and can contain MULTIPLE VSE classes generated from MULTIPLE Project forms!!!","inlinecomment":" \t &apos; Generates a BSXdocumentationUtils.VSID object for the VSID Database\n\t\n**IMPORTANT NOTE:  &amp;quot;Project&amp;quot; forms are associated with &amp;quot;VSE&amp;quot; classes  \n\t\nThe VSID class represents the VSID Database, and can contain MULTIPLE VSE classes generated from MULTIPLE Project forms!!!","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"includeVSEs","comment":"Flag indicating if VSE (form = &amp;quot;project&amp;quot;) content should be included. ","valuetype":"Boolean","filenamebase":"includeVSEs_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateVSID","qn":"includeVSEs","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if VSE (form = &amp;quot;project&amp;quot;) content should be included. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if VSE (form = &amp;quot;project&amp;quot;) content should be included. ","inlinecomment":" \t &apos; Flag indicating if VSE (form = &amp;quot;project&amp;quot;) content should be included. "},{"label":"includeLibraries","comment":"Flag indicating if Script Library (form = &amp;quot;project_script&amp;quot;) content should be included.","valuetype":"Boolean","filenamebase":"includeLibraries_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgenerateVSID","qn":"includeLibraries","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if Script Library (form = &amp;quot;project_script&amp;quot;) content should be included.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if Script Library (form = &amp;quot;project_script&amp;quot;) content should be included.","inlinecomment":" \t &apos; Flag indicating if Script Library (form = &amp;quot;project_script&amp;quot;) content should be included."}]},{"label":"getConstructorUNIDforClassName","comment":"Gets the UniversalID of the Constructor Method document (&amp;quot;New&amp;quot; Method) for the specified child class of a Project ","valuetype":"String","filenamebase":"getConstructorUNIDforClassName_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getConstructorUNIDforClassName","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(project As NotesDocument, classname As String)","signature":"Public Function getConstructorUNIDforClassName(project As NotesDocument, classname As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the UniversalID of the Constructor Method document (&amp;quot;New&amp;quot; Method) for the specified child class of a Project &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the UniversalID of the Constructor Method document (&amp;quot;New&amp;quot; Method) for the specified child class of a Project ","inlinecomment":" \t &apos; Gets the UniversalID of the Constructor Method document (&amp;quot;New&amp;quot; Method) for the specified child class of a Project ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"project","comment":"the Project NotesDocument for which to retrieve the child Class document UniversalID ","valuetype":"NotesDocument","filenamebase":"project_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetConstructorUNIDforClassName","qn":"project","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Project NotesDocument for which to retrieve the child Class document UniversalID &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Project NotesDocument for which to retrieve the child Class document UniversalID ","inlinecomment":" \t &apos; the Project NotesDocument for which to retrieve the child Class document UniversalID "},{"label":"classname","comment":" Name of the child class.","valuetype":"String","filenamebase":"classname_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetConstructorUNIDforClassName","qn":"classname","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt; Name of the child class.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":" Name of the child class.","inlinecomment":" \t &apos;  Name of the child class."}]},{"label":"getDataTypeCategory","comment":"Gets the Category Number for the specific Data Type","valuetype":"Integer","filenamebase":"getDataTypeCategory_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getDataTypeCategory","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(datatypename As String)","signature":"Public Function getDataTypeCategory(datatypename As String) As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the Category Number for the specific Data Type&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the Category Number for the specific Data Type","inlinecomment":" \t &apos; Gets the Category Number for the specific Data Type","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"datatypename","comment":"Name of the Data Type","valuetype":"String","filenamebase":"datatypename_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetDataTypeCategory","qn":"datatypename","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the Data Type&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the Data Type","inlinecomment":" \t &apos; Name of the Data Type"}]},{"label":"getItemNamesPotentialHTML","comment":"Gets item names for a specific form that may potentially contain HTML content","valuetype":"StringStack","filenamebase":"getItemNamesPotentialHTML_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getItemNamesPotentialHTML","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(form As String)","signature":"Public Function getItemNamesPotentialHTML(form As String) As StringStack","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets item names for a specific form that may potentially contain HTML content&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets item names for a specific form that may potentially contain HTML content","inlinecomment":" \t &apos; Gets item names for a specific form that may potentially contain HTML content","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"form","comment":"Name of the Form for which to get the item names ","valuetype":"String","filenamebase":"form_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetItemNamesPotentialHTML","qn":"form","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the Form for which to get the item names &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the Form for which to get the item names ","inlinecomment":" \t &apos; Name of the Form for which to get the item names "}]},{"label":"getToolKitConfigDoc","comment":"getToolKitConfigDoc","valuetype":"NotesDocument","filenamebase":"getToolKitConfigDoc_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getToolKitConfigDoc","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(clearcache As Boolean)","signature":"Public Function getToolKitConfigDoc(clearcache As Boolean) As NotesDocument","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;getToolKitConfigDoc&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"getToolKitConfigDoc","inlinecomment":" \t &apos; getToolKitConfigDoc","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"clearcache","comment":"Flag indicating to clear the cache ","valuetype":"Boolean","filenamebase":"clearcache_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetToolKitConfigDoc","qn":"clearcache","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating to clear the cache &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating to clear the cache ","inlinecomment":" \t &apos; Flag indicating to clear the cache "}]},{"label":"getUNIDforClassName","comment":"Gets the UniversalID for a specified child class of a Project ","valuetype":"String","filenamebase":"getUNIDforClassName_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getUNIDforClassName","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(project As NotesDocument, classname As String)","signature":"Public Function getUNIDforClassName(project As NotesDocument, classname As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the UniversalID for a specified child class of a Project &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the UniversalID for a specified child class of a Project ","inlinecomment":" \t &apos; Gets the UniversalID for a specified child class of a Project ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"project","comment":"the Project NotesDocument for which to retrieve the child Class document UniversalID","valuetype":"NotesDocument","filenamebase":"project_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetUNIDforClassName","qn":"project","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Project NotesDocument for which to retrieve the child Class document UniversalID&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Project NotesDocument for which to retrieve the child Class document UniversalID","inlinecomment":" \t &apos; the Project NotesDocument for which to retrieve the child Class document UniversalID"},{"label":"classname","comment":"Name of the child class.","valuetype":"String","filenamebase":"classname_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetUNIDforClassName","qn":"classname","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the child class.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the child class.","inlinecomment":" \t &apos; Name of the child class."}]},{"label":"getUNIDsByForm","comment":"Gets the UniversalIDs of all Documents matching a specified form.","valuetype":"StringQueue","filenamebase":"getUNIDsByForm_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getUNIDsByForm","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(form As String)","signature":"Public Function getUNIDsByForm(form As String) As StringQueue","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the UniversalIDs of all Documents matching a specified form.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the UniversalIDs of all Documents matching a specified form.","inlinecomment":" \t &apos; Gets the UniversalIDs of all Documents matching a specified form.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"form","comment":"Name of the form for which to retrive the UniversalIDs","valuetype":"String","filenamebase":"form_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsgetUNIDsByForm","qn":"form","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the form for which to retrive the UniversalIDs&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the form for which to retrive the UniversalIDs","inlinecomment":" \t &apos; Name of the form for which to retrive the UniversalIDs"}]},{"label":"GenerateLSXClassID","comment":"Generates a classid for a new class in an LSX wizard project. \n\tThis function checks the archive item in the project doc first, to preserve old IDs.\nreo\t07/14/2007\tCreated","valuetype":"Long","filenamebase":"GenerateLSXClassID_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"GenerateLSXClassID","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(ProjectDoc As NotesDocument, ClassName As String, CreateIfNotFound As Boolean)","signature":"Public Function GenerateLSXClassID(ProjectDoc As NotesDocument, ClassName As String, CreateIfNotFound As Boolean) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a classid for a new class in an LSX wizard project. &lt;br /&gt;\tThis function checks the archive item in the project doc first, to preserve old IDs.&lt;br /&gt;reo\t07/14/2007\tCreated&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a classid for a new class in an LSX wizard project. &lt;br /&gt;\tThis function checks the archive item in the project doc first, to preserve old IDs.&lt;br /&gt;reo\t07/14/2007\tCreated","inlinecomment":" \t &apos; Generates a classid for a new class in an LSX wizard project. \n\tThis function checks the archive item in the project doc first, to preserve old IDs.\nreo\t07/14/2007\tCreated","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"ProjectDoc","comment":"Project Document for LSX","valuetype":"NotesDocument","filenamebase":"ProjectDoc_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXClassID","qn":"ProjectDoc","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Project Document for LSX&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Project Document for LSX","inlinecomment":" \t &apos; Project Document for LSX"},{"label":"ClassName","comment":"Name of the class","valuetype":"String","filenamebase":"ClassName_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXClassID","qn":"ClassName","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the class","inlinecomment":" \t &apos; Name of the class"},{"label":"CreateIfNotFound","comment":"Flag indicating if a new LSX ClassID should be generated","valuetype":"Boolean","filenamebase":"CreateIfNotFound_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXClassID","qn":"CreateIfNotFound","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if a new LSX ClassID should be generated&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if a new LSX ClassID should be generated","inlinecomment":" \t &apos; Flag indicating if a new LSX ClassID should be generated"}]},{"label":"GenerateLSXMethodID","comment":"Each property/event/method in an LSX DLL has an ID value associated with it that is compiled into lotuscript. \n \nTo prevent reshuffling of these IDs every time we regenerate the code for the DLL, we keep an archive of all the p/m/e names we&amp;apos;ve used thus far and their ID values, only extending the list. \n \nThis provides a degree of backwards compatibility across compiled LotusScript and new versions of LSX DLLs.\n  \t\nNOTE: This function saves the current LSX project document!\n\t\n\tWe&amp;apos;re currently called by the form methods: Method.QuerySave(), Property.QuerySave(), and Event.QuerySave()\n \tWe&amp;apos;re also called by CreateNewMethodDocument to handle the New() function for each class.\n \t\nreo\t07/14/2007\tCreated","valuetype":"Long","filenamebase":"GenerateLSXMethodID_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"GenerateLSXMethodID","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(ProjectDoc As NotesDocument, ClassName As String, MethodName As String, AddIfNotFound As Boolean)","signature":"Public Function GenerateLSXMethodID(ProjectDoc As NotesDocument, ClassName As String, MethodName As String, AddIfNotFound As Boolean) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Each property/event/method in an LSX DLL has an ID value associated with it that is compiled into lotuscript. &lt;br /&gt; &lt;br /&gt;To prevent reshuffling of these IDs every time we regenerate the code for the DLL, we keep an archive of all the p/m/e names we&amp;apos;ve used thus far and their ID values, only extending the list. &lt;br /&gt; &lt;br /&gt;This provides a degree of backwards compatibility across compiled LotusScript and new versions of LSX DLLs.&lt;br /&gt;  \t&lt;br /&gt;NOTE: This function saves the current LSX project document!&lt;br /&gt;\t&lt;br /&gt;\tWe&amp;apos;re currently called by the form methods: Method.QuerySave(), Property.QuerySave(), and Event.QuerySave()&lt;br /&gt; \tWe&amp;apos;re also called by CreateNewMethodDocument to handle the New() function for each class.&lt;br /&gt; \t&lt;br /&gt;reo\t07/14/2007\tCreated&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Each property/event/method in an LSX DLL has an ID value associated with it that is compiled into lotuscript. &lt;br /&gt; &lt;br /&gt;To prevent reshuffling of these IDs every time we regenerate the code for the DLL, we keep an archive of all the p/m/e names we&amp;apos;ve used thus far and their ID values, only extending the list. &lt;br /&gt; &lt;br /&gt;This provides a degree of backwards compatibility across compiled LotusScript and new versions of LSX DLLs.&lt;br /&gt;  \t&lt;br /&gt;NOTE: This function saves the current LSX project document!&lt;br /&gt;\t&lt;br /&gt;\tWe&amp;apos;re currently called by the form methods: Method.QuerySave(), Property.QuerySave(), and Event.QuerySave()&lt;br /&gt; \tWe&amp;apos;re also called by CreateNewMethodDocument to handle the New() function for each class.&lt;br /&gt; \t&lt;br /&gt;reo\t07/14/2007\tCreated","inlinecomment":" \t &apos; Each property/event/method in an LSX DLL has an ID value associated with it that is compiled into lotuscript. \n \nTo prevent reshuffling of these IDs every time we regenerate the code for the DLL, we keep an archive of all the p/m/e names we&amp;apos;ve used thus far and their ID values, only extending the list. \n \nThis provides a degree of backwards compatibility across compiled LotusScript and new versions of LSX DLLs.\n  \t\nNOTE: This function saves the current LSX project document!\n\t\n\tWe&amp;apos;re currently called by the form methods: Method.QuerySave(), Property.QuerySave(), and Event.QuerySave()\n \tWe&amp;apos;re also called by CreateNewMethodDocument to handle the New() function for each class.\n \t\nreo\t07/14/2007\tCreated","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"ProjectDoc","comment":"Project Document","valuetype":"NotesDocument","filenamebase":"ProjectDoc_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXMethodID","qn":"ProjectDoc","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Project Document&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Project Document","inlinecomment":" \t &apos; Project Document"},{"label":"ClassName","comment":"Name of the Class","valuetype":"String","filenamebase":"ClassName_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXMethodID","qn":"ClassName","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the Class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the Class","inlinecomment":" \t &apos; Name of the Class"},{"label":"MethodName","comment":"Name of the Method","valuetype":"String","filenamebase":"MethodName_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXMethodID","qn":"MethodName","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the Method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the Method","inlinecomment":" \t &apos; Name of the Method"},{"label":"AddIfNotFound","comment":"Flag indicating that a new LSXMethodID should be generated if one cannot be found for the current Project, Class, and Method. ","valuetype":"Boolean","filenamebase":"AddIfNotFound_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsGenerateLSXMethodID","qn":"AddIfNotFound","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating that a new LSXMethodID should be generated if one cannot be found for the current Project, Class, and Method. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating that a new LSXMethodID should be generated if one cannot be found for the current Project, Class, and Method. ","inlinecomment":" \t &apos; Flag indicating that a new LSXMethodID should be generated if one cannot be found for the current Project, Class, and Method. "}]},{"label":"importProjects","comment":"Imports all Project documents and their descendents from another (VSE Wizard / VSID / VSID) database.","valuetype":"StringQueue","filenamebase":"importProjects_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"importProjects","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As NotesDatabase)","signature":"Public Function importProjects(source As NotesDatabase) As StringQueue","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Imports all Project documents and their descendents from another (VSE Wizard / VSID / VSID) database.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Imports all Project documents and their descendents from another (VSE Wizard / VSID / VSID) database.","inlinecomment":" \t &apos; Imports all Project documents and their descendents from another (VSE Wizard / VSID / VSID) database.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Database from which to import the Project documents and their descendents ","valuetype":"NotesDatabase","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsimportProjects","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Database from which to import the Project documents and their descendents &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Database from which to import the Project documents and their descendents ","inlinecomment":" \t &apos; Database from which to import the Project documents and their descendents "}]},{"label":"isValidGUID","comment":"","valuetype":"Boolean","filenamebase":"isValidGUID_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"isValidGUID","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function isValidGUID(source As String) As Boolean","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to test. ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsisValidGUID","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to test. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to test. ","inlinecomment":" \t &apos; String to test. "}]},{"label":"resetCollectionAncestorIDs","comment":"Conditionally resets the ancestor ID fields (F_ProjectID, F_ClassID, F_TypeID) for documents matching UniversalIDs","valuetype":"Integer","filenamebase":"resetCollectionAncestorIDs_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"resetCollectionAncestorIDs","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(unids As StringQueue)","signature":"Public Function resetCollectionAncestorIDs(unids As StringQueue) As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Conditionally resets the ancestor ID fields (F_ProjectID, F_ClassID, F_TypeID) for documents matching UniversalIDs&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Conditionally resets the ancestor ID fields (F_ProjectID, F_ClassID, F_TypeID) for documents matching UniversalIDs","inlinecomment":" \t &apos; Conditionally resets the ancestor ID fields (F_ProjectID, F_ClassID, F_TypeID) for documents matching UniversalIDs","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"unids","comment":"unids UniversalIDs of all documents to reset. \n\tNOTE: UniversalIDs will be popped from this StringQueue, causing it to be EMPTY after this method exits successfully.","valuetype":"StringQueue","filenamebase":"unids_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsresetCollectionAncestorIDs","qn":"unids","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;unids UniversalIDs of all documents to reset. &lt;br /&gt;\tNOTE: UniversalIDs will be popped from this StringQueue, causing it to be EMPTY after this method exits successfully.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"unids UniversalIDs of all documents to reset. &lt;br /&gt;\tNOTE: UniversalIDs will be popped from this StringQueue, causing it to be EMPTY after this method exits successfully.","inlinecomment":" \t &apos; unids UniversalIDs of all documents to reset. \n\tNOTE: UniversalIDs will be popped from this StringQueue, causing it to be EMPTY after this method exits successfully."}]},{"label":"updateProjects","comment":"Updates all Project documents and their descendants.","valuetype":"Integer","filenamebase":"updateProjects_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"updateProjects","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function updateProjects() As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Updates all Project documents and their descendants.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Updates all Project documents and their descendants.","inlinecomment":" \t &apos; Updates all Project documents and their descendants.","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"writeAPIdoc_supportFiles","comment":"Writes the supporting files for balidoc (css, images, etc) to the target directory. ","valuetype":"StringQueue","filenamebase":"writeAPIdocsupportFiles_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"writeAPIdocsupportFiles","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(writer As VSIDwriter)","signature":"Public Function writeAPIdoc_supportFiles(writer As VSIDwriter) As StringQueue","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Writes the supporting files for balidoc (css, images, etc) to the target directory. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Writes the supporting files for balidoc (css, images, etc) to the target directory. ","inlinecomment":" \t &apos; Writes the supporting files for balidoc (css, images, etc) to the target directory. ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"writer","comment":"VSID API Documentation Writer to use ","valuetype":"VSIDwriter","filenamebase":"writer_ValuedElement","fqnprefix":"VSIDBSXnotesUtilswriteAPIdocsupportFiles","qn":"writer","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VSID API Documentation Writer to use &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VSID API Documentation Writer to use ","inlinecomment":" \t &apos; VSID API Documentation Writer to use "}]},{"label":"CreateLSXArchivesIfMissing","comment":"Checks for the existence for class and method ID archive items on the project document. If they do not exist, we reorder the class and method IDs and archive them to be backwards compatible in the future.\nThis method changes and saves the project doc. (RO)\n\t\nreo\t08/03/2007\tCreated","valuetype":"","filenamebase":"CreateLSXArchivesIfMissing_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"CreateLSXArchivesIfMissing","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(ProjectDoc As NotesDocument)","signature":"Public Sub CreateLSXArchivesIfMissing(ProjectDoc As NotesDocument)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks for the existence for class and method ID archive items on the project document. If they do not exist, we reorder the class and method IDs and archive them to be backwards compatible in the future.&lt;br /&gt;This method changes and saves the project doc. (RO)&lt;br /&gt;\t&lt;br /&gt;reo\t08/03/2007\tCreated&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks for the existence for class and method ID archive items on the project document. If they do not exist, we reorder the class and method IDs and archive them to be backwards compatible in the future.&lt;br /&gt;This method changes and saves the project doc. (RO)&lt;br /&gt;\t&lt;br /&gt;reo\t08/03/2007\tCreated","inlinecomment":" \t &apos; Checks for the existence for class and method ID archive items on the project document. If they do not exist, we reorder the class and method IDs and archive them to be backwards compatible in the future.\nThis method changes and saves the project doc. (RO)\n\t\nreo\t08/03/2007\tCreated","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"ProjectDoc","comment":"Document for which to create the LSX Archives.","valuetype":"NotesDocument","filenamebase":"ProjectDoc_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsCreateLSXArchivesIfMissing","qn":"ProjectDoc","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Document for which to create the LSX Archives.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Document for which to create the LSX Archives.","inlinecomment":" \t &apos; Document for which to create the LSX Archives."}]},{"label":"CreateNewMethodDocument","comment":"Creates a new Method document for the specified class document. ","valuetype":"","filenamebase":"CreateNewMethodDocument_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"CreateNewMethodDocument","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As NotesDocument)","signature":"Public Sub CreateNewMethodDocument(source As NotesDocument)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new Method document for the specified class document. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new Method document for the specified class document. ","inlinecomment":" \t &apos; Creates a new Method document for the specified class document. ","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"Class document to which the method should become a response. ","valuetype":"NotesDocument","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsCreateNewMethodDocument","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class document to which the method should become a response. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class document to which the method should become a response. ","inlinecomment":" \t &apos; Class document to which the method should become a response. "}]},{"label":"DeleteFileSilently","comment":"Quietly kills a specified file.  ","valuetype":"","filenamebase":"DeleteFileSilently_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"DeleteFileSilently","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(theFileName As String)","signature":"Public Sub DeleteFileSilently(theFileName As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Quietly kills a specified file.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Quietly kills a specified file.  ","inlinecomment":" \t &apos; Quietly kills a specified file.  ","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"theFileName","comment":"filepath of the file that should be deleted. ","valuetype":"String","filenamebase":"theFileName_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsDeleteFileSilently","qn":"theFileName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;filepath of the file that should be deleted. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"filepath of the file that should be deleted. ","inlinecomment":" \t &apos; filepath of the file that should be deleted. "}]},{"label":"DumpSkeletons","comment":"Dump the UNID of the Skeleton documents to a text file.\nCan be called from the LSX Skeletons view.","valuetype":"","filenamebase":"DumpSkeletons_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"DumpSkeletons","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub DumpSkeletons()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Dump the UNID of the Skeleton documents to a text file.&lt;br /&gt;Can be called from the LSX Skeletons view.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Dump the UNID of the Skeleton documents to a text file.&lt;br /&gt;Can be called from the LSX Skeletons view.","inlinecomment":" \t &apos; Dump the UNID of the Skeleton documents to a text file.\nCan be called from the LSX Skeletons view.","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"loadVSIDstubContent","comment":"Loads the VSID Stub Content StringsCarrierList with content from VSIDxxx File Resources which match the suffix","valuetype":"","filenamebase":"loadVSIDstubContent_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"loadVSIDstubContent","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(vsidsuffix As String)","signature":"Public Sub loadVSIDstubContent(vsidsuffix As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads the VSID Stub Content StringsCarrierList with content from VSIDxxx File Resources which match the suffix&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads the VSID Stub Content StringsCarrierList with content from VSIDxxx File Resources which match the suffix","inlinecomment":" \t &apos; Loads the VSID Stub Content StringsCarrierList with content from VSIDxxx File Resources which match the suffix","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"vsidsuffix","comment":"suffix for VSIDxxx named File Resources to match ","valuetype":"String","filenamebase":"vsidsuffix_ValuedElement","fqnprefix":"VSIDBSXnotesUtilsloadVSIDstubContent","qn":"vsidsuffix","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;suffix for VSIDxxx named File Resources to match &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"suffix for VSIDxxx named File Resources to match ","inlinecomment":" \t &apos; suffix for VSIDxxx named File Resources to match "}]},{"label":"getAttributeNameStubs","comment":"Gets a string array containining Name Stubs for VSE Attributes","valuetype":"Variant","filenamebase":"getAttributeNameStubs_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getAttributeNameStubs","codesample":"","signaturecode":10304,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Static Public Function getAttributeNameStubs() As Variant","modifiers":"Static Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a string array containining Name Stubs for VSE Attributes&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a string array containining Name Stubs for VSE Attributes","inlinecomment":" \t &apos; Gets a string array containining Name Stubs for VSE Attributes","codesamplehtml":"", "attributes":["Static"], "signatureelements":["Static","Public","Function"]},{"label":"getAttributeNameStubs_Script","comment":"Gets a string array containining Name Stubs for VSS Attributes","valuetype":"Variant","filenamebase":"getAttributeNameStubsScript_Method","fqnprefix":"VSID.BSXnotesUtils","qn":"getAttributeNameStubsScript","codesample":"","signaturecode":10304,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Static Public Function getAttributeNameStubs_Script() As Variant","modifiers":"Static Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a string array containining Name Stubs for VSS Attributes&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a string array containining Name Stubs for VSS Attributes","inlinecomment":" \t &apos; Gets a string array containining Name Stubs for VSS Attributes","codesamplehtml":"", "attributes":["Static"], "signatureelements":["Static","Public","Function"]}], "types":[{"classname":"Argument","comment":"","valuetype":"","filenamebase":"Argument_ObjectType","fqnprefix":"VSID.BSXnotesUtils","qn":"Argument","codesample":"","signaturecode":2560,"instancecode":512,"projectid":"562890C54B61589385258AE2006E39AF","signature":"Public Type Argument","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "variables":[]}]}
