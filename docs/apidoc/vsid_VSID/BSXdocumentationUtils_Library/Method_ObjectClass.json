{"classname":"Method","comment":"Represents a Method (Sub, Function, or Property) ","valuetype":"CodeElement","filenamebase":"Method_ObjectClass","fqnprefix":"VSID.BSXdocumentationUtils","qn":"Method","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"CodeElement","classtype":"Derived","classderivetype":"CodeElement","projectid":"7D1A2972E666A25885258AE100482F18","classid":"D4B7363678FE843585258AE1006CE85A","signature":"Public Class Method As CodeElement","modifiers":"Public","classname":"Method","constructorsignature":"Public Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a Method (Sub, Function, or Property) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a Method (Sub, Function, or Property) ","inlinecomment":" \t &apos; Represents a Method (Sub, Function, or Property) ","codesamplehtml":"", "methods":[{"label":"ArgumentRemarks","comment":"Remarks for the Method&amp;apos;s Arguments ","valuetype":"StringsCarrier","filenamebase":"ArgumentRemarks_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.ArgumentRemarks","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get ArgumentRemarks As StringsCarrier","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Remarks for the Method&amp;apos;s Arguments &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Remarks for the Method&amp;apos;s Arguments ","inlinecomment":" \t &apos; Remarks for the Method&amp;apos;s Arguments ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"Arguments","comment":"Array containing the Method Arguments ","valuetype":"Variant","filenamebase":"Arguments_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.Arguments","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get Arguments As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array containing the Method Arguments &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array containing the Method Arguments ","inlinecomment":" \t &apos; Array containing the Method Arguments ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"ArgumentSuffix","comment":"Argument Suffix for the method  \nUsed for constructing a fully qualified signature for the method. ","valuetype":"String","filenamebase":"ArgumentSuffix_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.ArgumentSuffix","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get ArgumentSuffix As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Argument Suffix for the method  &lt;br /&gt;Used for constructing a fully qualified signature for the method. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Argument Suffix for the method  &lt;br /&gt;Used for constructing a fully qualified signature for the method. ","inlinecomment":" \t &apos; Argument Suffix for the method  \nUsed for constructing a fully qualified signature for the method. ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"Exceptions","comment":"Array containing the Method Exceptions ","valuetype":"Variant","filenamebase":"Exceptions_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.Exceptions","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get Exceptions As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array containing the Method Exceptions &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array containing the Method Exceptions ","inlinecomment":" \t &apos; Array containing the Method Exceptions ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"ExceptionsRemarks","comment":"Remarks for the Method&amp;apos;s Exceptions ","valuetype":"StringsCarrier","filenamebase":"ExceptionsRemarks_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.ExceptionsRemarks","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get ExceptionsRemarks As StringsCarrier","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Remarks for the Method&amp;apos;s Exceptions &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Remarks for the Method&amp;apos;s Exceptions ","inlinecomment":" \t &apos; Remarks for the Method&amp;apos;s Exceptions ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasArguments","comment":"Flag indicating if the Method has Arguments ","valuetype":"Boolean","filenamebase":"hasArguments_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.hasArguments","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasArguments As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method has Arguments &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method has Arguments ","inlinecomment":" \t &apos; Flag indicating if the Method has Arguments ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasExceptions","comment":"Flag indicating if the Method has Exceptions ","valuetype":"Boolean","filenamebase":"hasExceptions_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.hasExceptions","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasExceptions As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method has Exceptions &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method has Exceptions ","inlinecomment":" \t &apos; Flag indicating if the Method has Exceptions ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isEvent","comment":"Flag indicating if the Method is an Event","valuetype":"Boolean","filenamebase":"isEvent_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isEvent","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isEvent As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is an Event&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is an Event","inlinecomment":" \t &apos; Flag indicating if the Method is an Event","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isFunction","comment":"Flag indicating if the Method is a Function","valuetype":"Boolean","filenamebase":"isFunction_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isFunction","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isFunction As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is a Function&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is a Function","inlinecomment":" \t &apos; Flag indicating if the Method is a Function","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isGetter","comment":"Flag indicating if the Method is a Getter Property","valuetype":"Boolean","filenamebase":"isGetter_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isGetter","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isGetter As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is a Getter Property&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is a Getter Property","inlinecomment":" \t &apos; Flag indicating if the Method is a Getter Property","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isProperty","comment":"Flag indicating if the Method is a Property ","valuetype":"Boolean","filenamebase":"isProperty_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isProperty","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isProperty As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is a Property &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is a Property ","inlinecomment":" \t &apos; Flag indicating if the Method is a Property ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSetter","comment":"Flag indicating if the Method is a Setter Property ","valuetype":"Boolean","filenamebase":"isSetter_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isSetter","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSetter As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is a Setter Property &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is a Setter Property ","inlinecomment":" \t &apos; Flag indicating if the Method is a Setter Property ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSub","comment":"Flag indicating if the Method is a Sub","valuetype":"Boolean","filenamebase":"isSub_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.isSub","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSub As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Method is a Sub&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Method is a Sub","inlinecomment":" \t &apos; Flag indicating if the Method is a Sub","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"MethodType","comment":"String representation of the Method Type (Sub, Function, or Property) ","valuetype":"String","filenamebase":"MethodType_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.MethodType","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get MethodType As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String representation of the Method Type (Sub, Function, or Property) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String representation of the Method Type (Sub, Function, or Property) ","inlinecomment":" \t &apos; String representation of the Method Type (Sub, Function, or Property) ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"ReturnsRemarks","comment":"Remarks for the Method&amp;apos;s Returns value ","valuetype":"StringsCarrier","filenamebase":"ReturnsRemarks_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"Get.ReturnsRemarks","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get ReturnsRemarks As StringsCarrier","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Remarks for the Method&amp;apos;s Returns value &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Remarks for the Method&amp;apos;s Returns value ","inlinecomment":" \t &apos; Remarks for the Method&amp;apos;s Returns value ","parentclassname":"Method","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"appendArgument","comment":"Appends an Argument to the Method","valuetype":"","filenamebase":"appendArgument_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"appendArgument","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As ValuedElement)","signature":"Public Sub appendArgument(source As ValuedElement)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Appends an Argument to the Method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Appends an Argument to the Method","inlinecomment":" \t &apos; Appends an Argument to the Method","parentclassname":"Method","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"Argument to be appended","valuetype":"ValuedElement","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodappendArgument","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Argument to be appended&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Argument to be appended","inlinecomment":" \t &apos; Argument to be appended"}]},{"label":"appendException","comment":"Appends an Exception to the Method ","valuetype":"","filenamebase":"appendException_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"appendException","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As ExceptionElement)","signature":"Public Sub appendException(source As ExceptionElement)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Appends an Exception to the Method &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Appends an Exception to the Method ","inlinecomment":" \t &apos; Appends an Exception to the Method ","parentclassname":"Method","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"Exception to be appended","valuetype":"ExceptionElement","filenamebase":"source_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodappendException","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Exception to be appended&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Exception to be appended","inlinecomment":" \t &apos; Exception to be appended"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VSID.BSXdocumentationUtils.Method","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)","signature":"Public Sub New(Parent As CodeElement, Label As String, ValueType As String, Comment As String, CodeSample As String, SignatureCode As Long)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"Method","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"Parent","comment":"Parent Object for the Object","valuetype":"CodeElement","filenamebase":"Parent_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"Parent","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parent Object for the Object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parent Object for the Object","inlinecomment":" \t &apos; Parent Object for the Object"},{"label":"Label","comment":"Label Label (Name) for the CodeElement","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"Label","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label Label (Name) for the CodeElement&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label Label (Name) for the CodeElement","inlinecomment":" \t &apos; Label Label (Name) for the CodeElement"},{"label":"ValueType","comment":"Value Type of the CodeElement","valuetype":"String","filenamebase":"ValueType_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"ValueType","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value Type of the CodeElement&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value Type of the CodeElement","inlinecomment":" \t &apos; Value Type of the CodeElement"},{"label":"Comment","comment":"Comment about the CodeElement","valuetype":"String","filenamebase":"Comment_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"Comment","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment about the CodeElement&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment about the CodeElement","inlinecomment":" \t &apos; Comment about the CodeElement"},{"label":"CodeSample","comment":"any sample code for the CodeElement","valuetype":"String","filenamebase":"CodeSample_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"CodeSample","argumentindex":5,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;any sample code for the CodeElement&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"any sample code for the CodeElement","inlinecomment":" \t &apos; any sample code for the CodeElement"},{"label":"SignatureCode","comment":"Numeric code indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the CodeElement","valuetype":"Long","filenamebase":"SignatureCode_ValuedElement","fqnprefix":"VSIDBSXdocumentationUtilsMethodNew","qn":"SignatureCode","argumentindex":6,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Numeric code indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the CodeElement&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Numeric code indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the CodeElement","inlinecomment":" \t &apos; Numeric code indicating the Object Type (such as Sub, Function, or Property) and modifiers (such as Public, Private, etc) of the CodeElement"}]}]}
