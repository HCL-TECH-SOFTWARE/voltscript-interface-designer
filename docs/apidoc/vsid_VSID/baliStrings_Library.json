{"label":"baliStrings","comment":"Created Sep 2022 by Devin Olson/USA/PNPHCL\n\tString handling utilities","valuetype":"","filenamebase":"baliStrings_Library","fqnprefix":"VSID","qn":"baliStrings","codesample":"","signaturecode":65536,"instancecode":65536,"description":"","codesamplehtml":"","scriptcreator":"Devin Olson","signature":"Library baliStrings","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Created Sep 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tString handling utilities&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Created Sep 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tString handling utilities","inlinecomment":" \t &apos; Created Sep 2022 by Devin Olson/USA/PNPHCL\n\tString handling utilities", "methods":[{"label":"getBaliStrings","comment":"Gets the BaliStrings object instance.  \nConditionally spawns a new one. ","valuetype":"BaliStrings","filenamebase":"getBaliStrings_Method","fqnprefix":"VSID.baliStrings","qn":"getBaliStrings","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getBaliStrings() As BaliStrings","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the BaliStrings object instance.  &lt;br /&gt;Conditionally spawns a new one. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the BaliStrings object instance.  &lt;br /&gt;Conditionally spawns a new one. ","inlinecomment":" \t &apos; Gets the BaliStrings object instance.  \nConditionally spawns a new one. ","codesamplehtml":"", "signatureelements":["Public","Function"]}], "classes":[{"classname":"BaliStrings","comment":"Carrier for String Utilities","valuetype":"","filenamebase":"BaliStrings_ObjectClass","fqnprefix":"VSID.baliStrings","qn":"BaliStrings","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"B34643F2117A734685258AE0006CD22C","classid":"D73300DED20ED8C885258AE0006CFCE0","signature":"Public Class BaliStrings","modifiers":"Public","classname":"BaliStrings","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Carrier for String Utilities&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Carrier for String Utilities","inlinecomment":" \t &apos; Carrier for String Utilities","codesamplehtml":"", "methods":[{"label":"alphanumericOnly","comment":"Removes all non-alphanumeric (a-z, A-Z, 0-9) characters from String ","valuetype":"String","filenamebase":"alphanumericOnly_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"alphanumericOnly","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function alphanumericOnly(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all non-alphanumeric (a-z, A-Z, 0-9) characters from String &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all non-alphanumeric (a-z, A-Z, 0-9) characters from String ","inlinecomment":" \t &apos; Removes all non-alphanumeric (a-z, A-Z, 0-9) characters from String ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which to remove non-alphanumeric characters ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsalphanumericOnly","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which to remove non-alphanumeric characters &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which to remove non-alphanumeric characters ","inlinecomment":" \t &apos; String from which to remove non-alphanumeric characters "}]},{"label":"ampersandDecode","comment":"Replaces ampersand sequences in a string with special characters (quote, apostrophe, less than, greater than, ampersand, etc)","valuetype":"String","filenamebase":"ampersandDecode_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"ampersandDecode","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function ampersandDecode(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces ampersand sequences in a string with special characters (quote, apostrophe, less than, greater than, ampersand, etc)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces ampersand sequences in a string with special characters (quote, apostrophe, less than, greater than, ampersand, etc)","inlinecomment":" \t &apos; Replaces ampersand sequences in a string with special characters (quote, apostrophe, less than, greater than, ampersand, etc)","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to decode","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsampersandDecode","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to decode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to decode","inlinecomment":" \t &apos; String to decode"}]},{"label":"ampersandEncode","comment":"Replaces special characters (quote, apostrophe, less than, greater than, ampersand, etc) in a string with ampersand sequences","valuetype":"String","filenamebase":"ampersandEncode_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"ampersandEncode","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function ampersandEncode(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces special characters (quote, apostrophe, less than, greater than, ampersand, etc) in a string with ampersand sequences&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces special characters (quote, apostrophe, less than, greater than, ampersand, etc) in a string with ampersand sequences","inlinecomment":" \t &apos; Replaces special characters (quote, apostrophe, less than, greater than, ampersand, etc) in a string with ampersand sequences","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to encode","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsampersandEncode","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to encode","inlinecomment":" \t &apos; String to encode"}]},{"label":"asciiFilterByRange","comment":"Removes all non-allowed characters from a string ","valuetype":"String","filenamebase":"asciiFilterByRange_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"asciiFilterByRange","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, ranges As Variant)","signature":"Public Function asciiFilterByRange(source As String, ranges As Variant) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all non-allowed characters from a string &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all non-allowed characters from a string ","inlinecomment":" \t &apos; Removes all non-allowed characters from a string ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which to remove non-allowed characters","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsasciiFilterByRange","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which to remove non-allowed characters&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which to remove non-allowed characters","inlinecomment":" \t &apos; String from which to remove non-allowed characters"},{"label":"ranges","comment":"IntegerPair, List As IntegerPair, or Array of IntegerPair objects. ascii range(s) definining the allowed characters.","valuetype":"Variant","filenamebase":"ranges_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsasciiFilterByRange","qn":"ranges","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;IntegerPair, List As IntegerPair, or Array of IntegerPair objects. ascii range(s) definining the allowed characters.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"IntegerPair, List As IntegerPair, or Array of IntegerPair objects. ascii range(s) definining the allowed characters.","inlinecomment":" \t &apos; IntegerPair, List As IntegerPair, or Array of IntegerPair objects. ascii range(s) definining the allowed characters."}]},{"label":"beginsWith","comment":"Tests a string to determine if it begins with another string ","valuetype":"Boolean","filenamebase":"beginsWith_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"beginsWith","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, searchfor As String)","signature":"Public Function beginsWith(source As String, searchfor As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a string to determine if it begins with another string &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a string to determine if it begins with another string ","inlinecomment":" \t &apos; Tests a string to determine if it begins with another string ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to test","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsbeginsWith","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to test&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to test","inlinecomment":" \t &apos; String to test"},{"label":"searchfor","comment":"Substring to check if source string begins with ","valuetype":"String","filenamebase":"searchfor_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsbeginsWith","qn":"searchfor","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Substring to check if source string begins with &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Substring to check if source string begins with ","inlinecomment":" \t &apos; Substring to check if source string begins with "}]},{"label":"condcat","comment":"Conditionally Concatenates two strings with a delimiter ","valuetype":"String","filenamebase":"condcat_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"condcat","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(string1 As String, string2 As String, delimiter As String)","signature":"Public Function condcat(string1 As String, string2 As String, delimiter As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Conditionally Concatenates two strings with a delimiter &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Conditionally Concatenates two strings with a delimiter ","inlinecomment":" \t &apos; Conditionally Concatenates two strings with a delimiter ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"string1","comment":"First string for the concatenation ","valuetype":"String","filenamebase":"string1_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringscondcat","qn":"string1","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;First string for the concatenation &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"First string for the concatenation ","inlinecomment":" \t &apos; First string for the concatenation "},{"label":"string2","comment":"Second string for the concatenation ","valuetype":"String","filenamebase":"string2_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringscondcat","qn":"string2","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Second string for the concatenation &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Second string for the concatenation ","inlinecomment":" \t &apos; Second string for the concatenation "},{"label":"delimiter","comment":"String used to conditionally concatenate string1 and string2","valuetype":"String","filenamebase":"delimiter_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringscondcat","qn":"delimiter","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String used to conditionally concatenate string1 and string2&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String used to conditionally concatenate string1 and string2","inlinecomment":" \t &apos; String used to conditionally concatenate string1 and string2"}]},{"label":"endsWith","comment":"Tests a string to determine if it ends with another string ","valuetype":"Boolean","filenamebase":"endsWith_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"endsWith","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, searchfor As String)","signature":"Public Function endsWith(source As String, searchfor As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a string to determine if it ends with another string &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a string to determine if it ends with another string ","inlinecomment":" \t &apos; Tests a string to determine if it ends with another string ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to test ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsendsWith","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to test &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to test ","inlinecomment":" \t &apos; String to test "},{"label":"searchfor","comment":"Substring to check if source string ends with","valuetype":"String","filenamebase":"searchfor_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsendsWith","qn":"searchfor","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Substring to check if source string ends with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Substring to check if source string ends with","inlinecomment":" \t &apos; Substring to check if source string ends with"}]},{"label":"escapeSingleBackslashes","comment":"Parses a source string and replaces and single backslash characters (\\) with escaped backslashes (\\)","valuetype":"String","filenamebase":"escapeSingleBackslashes_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"escapeSingleBackslashes","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function escapeSingleBackslashes(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parses a source string and replaces and single backslash characters (\\) with escaped backslashes (\\)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parses a source string and replaces and single backslash characters (\\) with escaped backslashes (\\)","inlinecomment":" \t &apos; Parses a source string and replaces and single backslash characters (\\) with escaped backslashes (\\)","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to search for single backslash characters ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsescapeSingleBackslashes","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to search for single backslash characters &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to search for single backslash characters ","inlinecomment":" \t &apos; String to search for single backslash characters "}]},{"label":"fieldnamefy","comment":"Removes all non &amp;quot;fieldnamey&amp;quot; characters from String \n\t&amp;quot;Fieldname&amp;quot; characters are (a-z, A-Z, 0-9, _) ","valuetype":"String","filenamebase":"fieldnamefy_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"fieldnamefy","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function fieldnamefy(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all non &amp;quot;fieldnamey&amp;quot; characters from String &lt;br /&gt;\t&amp;quot;Fieldname&amp;quot; characters are (a-z, A-Z, 0-9, _) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all non &amp;quot;fieldnamey&amp;quot; characters from String &lt;br /&gt;\t&amp;quot;Fieldname&amp;quot; characters are (a-z, A-Z, 0-9, _) ","inlinecomment":" \t &apos; Removes all non &amp;quot;fieldnamey&amp;quot; characters from String \n\t&amp;quot;Fieldname&amp;quot; characters are (a-z, A-Z, 0-9, _) ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which to remove non-fieldnamey characters ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsfieldnamefy","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which to remove non-fieldnamey characters &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which to remove non-fieldnamey characters ","inlinecomment":" \t &apos; String from which to remove non-fieldnamey characters "}]},{"label":"filenameify","comment":"Removes all non &amp;quot;filenamey&amp;quot; (a-z, A-Z, 0-9, _, -, .) characters from String ","valuetype":"String","filenamebase":"filenameify_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"filenameify","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function filenameify(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all non &amp;quot;filenamey&amp;quot; (a-z, A-Z, 0-9, _, -, .) characters from String &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all non &amp;quot;filenamey&amp;quot; (a-z, A-Z, 0-9, _, -, .) characters from String ","inlinecomment":" \t &apos; Removes all non &amp;quot;filenamey&amp;quot; (a-z, A-Z, 0-9, _, -, .) characters from String ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which to remove non-filenamey characters ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsfilenameify","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which to remove non-filenamey characters &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which to remove non-filenamey characters ","inlinecomment":" \t &apos; String from which to remove non-filenamey characters "}]},{"label":"getAlphanumericRanges","comment":"Gets a List of alphanumeric ASCII ranges","valuetype":"Variant","filenamebase":"getAlphanumericRanges_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"getAlphanumericRanges","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getAlphanumericRanges() As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a List of alphanumeric ASCII ranges&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a List of alphanumeric ASCII ranges","inlinecomment":" \t &apos; Gets a List of alphanumeric ASCII ranges","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"getFieldNameyRanges","comment":"Gets a List of fieldnamey ASCII ranges","valuetype":"Variant","filenamebase":"getFieldNameyRanges_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"getFieldNameyRanges","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getFieldNameyRanges() As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a List of fieldnamey ASCII ranges&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a List of fieldnamey ASCII ranges","inlinecomment":" \t &apos; Gets a List of fieldnamey ASCII ranges","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"getFilenameyRanges","comment":"Gets a List of filenamey ASCII ranges ","valuetype":"Variant","filenamebase":"getFilenameyRanges_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"getFilenameyRanges","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getFilenameyRanges() As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a List of filenamey ASCII ranges &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a List of filenamey ASCII ranges ","inlinecomment":" \t &apos; Gets a List of filenamey ASCII ranges ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"getScalarString","comment":"Gets the scalar value of an object as a string ","valuetype":"String","filenamebase":"getScalarString_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"getScalarString","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function getScalarString(source As Variant) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the scalar value of an object as a string &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the scalar value of an object as a string ","inlinecomment":" \t &apos; Gets the scalar value of an object as a string ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"variant from which to get the scalar value","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsgetScalarString","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;variant from which to get the scalar value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"variant from which to get the scalar value","inlinecomment":" \t &apos; variant from which to get the scalar value"}]},{"label":"hasMoustacheTags","comment":"Tests a string to determine if it has one or more moustache tags. \n\t\tNote: a moustache tag is any substring that follows the pattern {{substring}} ","valuetype":"Boolean","filenamebase":"hasMoustacheTags_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"hasMoustacheTags","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function hasMoustacheTags(source As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a string to determine if it has one or more moustache tags. &lt;br /&gt;\t\tNote: a moustache tag is any substring that follows the pattern {{substring}} &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a string to determine if it has one or more moustache tags. &lt;br /&gt;\t\tNote: a moustache tag is any substring that follows the pattern {{substring}} ","inlinecomment":" \t &apos; Tests a string to determine if it has one or more moustache tags. \n\t\tNote: a moustache tag is any substring that follows the pattern {{substring}} ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to check ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringshasMoustacheTags","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to check &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to check ","inlinecomment":" \t &apos; String to check "}]},{"label":"isStringArrayEmpty","comment":"Tests a String array to determine if it is empty. \n\t\t\nEmpty is defined as having no elements, or all elements are blank ","valuetype":"BaliStrings","filenamebase":"isStringArrayEmpty_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"isStringArrayEmpty","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function isStringArrayEmpty(source As Variant) As BaliStrings","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a String array to determine if it is empty. &lt;br /&gt;\t\t&lt;br /&gt;Empty is defined as having no elements, or all elements are blank &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a String array to determine if it is empty. &lt;br /&gt;\t\t&lt;br /&gt;Empty is defined as having no elements, or all elements are blank ","inlinecomment":" \t &apos; Tests a String array to determine if it is empty. \n\t\t\nEmpty is defined as having no elements, or all elements are blank ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String array to test","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsisStringArrayEmpty","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String array to test&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String array to test","inlinecomment":" \t &apos; String array to test"}]},{"label":"padLeft","comment":"Conditionally pads a source string with leading blank spaces. ","valuetype":"String","filenamebase":"padLeft_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"padLeft","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, length As Integer)","signature":"Public Function padLeft(source As String, length As Integer) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Conditionally pads a source string with leading blank spaces. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Conditionally pads a source string with leading blank spaces. ","inlinecomment":" \t &apos; Conditionally pads a source string with leading blank spaces. ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to be padded ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringspadLeft","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to be padded &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to be padded ","inlinecomment":" \t &apos; String to be padded "},{"label":"length","comment":"Requested Length of the resulting string ","valuetype":"Integer","filenamebase":"length_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringspadLeft","qn":"length","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Requested Length of the resulting string &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Requested Length of the resulting string ","inlinecomment":" \t &apos; Requested Length of the resulting string "}]},{"label":"properCase","comment":"Converts a source string to Proper Case","valuetype":"String","filenamebase":"properCase_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"properCase","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function properCase(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a source string to Proper Case&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a source string to Proper Case","inlinecomment":" \t &apos; Converts a source string to Proper Case","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to be converted to Proper Case","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsproperCase","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to be converted to Proper Case&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to be converted to Proper Case","inlinecomment":" \t &apos; String to be converted to Proper Case"}]},{"label":"replaceCRLF","comment":"Replaces Carriage Returns and Line Feeds in a string with a new string and returns a new string.","valuetype":"String","filenamebase":"replaceCRLF_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"replaceCRLF","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, replacement As String)","signature":"Public Function replaceCRLF(source As String, replacement As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces Carriage Returns and Line Feeds in a string with a new string and returns a new string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces Carriage Returns and Line Feeds in a string with a new string and returns a new string.","inlinecomment":" \t &apos; Replaces Carriage Returns and Line Feeds in a string with a new string and returns a new string.","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which Carriage Returns and Line Feeds should be removed.","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceCRLF","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which Carriage Returns and Line Feeds should be removed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which Carriage Returns and Line Feeds should be removed.","inlinecomment":" \t &apos; String from which Carriage Returns and Line Feeds should be removed."},{"label":"replacement","comment":"New string to replace all Carriage Returns and Line Feeds.","valuetype":"String","filenamebase":"replacement_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceCRLF","qn":"replacement","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;New string to replace all Carriage Returns and Line Feeds.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"New string to replace all Carriage Returns and Line Feeds.","inlinecomment":" \t &apos; New string to replace all Carriage Returns and Line Feeds."}]},{"label":"replaceHT","comment":"Replaces Horizontal Tabs in a string with a new string and returns a new string.","valuetype":"String","filenamebase":"replaceHT_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"replaceHT","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, replacement As String)","signature":"Public Function replaceHT(source As String, replacement As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces Horizontal Tabs in a string with a new string and returns a new string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces Horizontal Tabs in a string with a new string and returns a new string.","inlinecomment":" \t &apos; Replaces Horizontal Tabs in a string with a new string and returns a new string.","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which Horizontal Tabs should be removed.","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceHT","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which Horizontal Tabs should be removed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which Horizontal Tabs should be removed.","inlinecomment":" \t &apos; String from which Horizontal Tabs should be removed."},{"label":"replacement","comment":"New string to replace all Tabs","valuetype":"String","filenamebase":"replacement_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceHT","qn":"replacement","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;New string to replace all Tabs&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"New string to replace all Tabs","inlinecomment":" \t &apos; New string to replace all Tabs"}]},{"label":"replaceSubstring","comment":"Replaces a substring with another string and returns the result","valuetype":"String","filenamebase":"replaceSubstring_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"replaceSubstring","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, searchfor As String, replacewith As String)","signature":"Public Function replaceSubstring(source As String, searchfor As String, replacewith As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces a substring with another string and returns the result&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces a substring with another string and returns the result","inlinecomment":" \t &apos; Replaces a substring with another string and returns the result","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String within which to search ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceSubstring","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String within which to search &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String within which to search ","inlinecomment":" \t &apos; String within which to search "},{"label":"searchfor","comment":"String to search for within source","valuetype":"String","filenamebase":"searchfor_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceSubstring","qn":"searchfor","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to search for within source&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to search for within source","inlinecomment":" \t &apos; String to search for within source"},{"label":"replacewith","comment":"String used to replace all instances of searchfor","valuetype":"String","filenamebase":"replacewith_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsreplaceSubstring","qn":"replacewith","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String used to replace all instances of searchfor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String used to replace all instances of searchfor","inlinecomment":" \t &apos; String used to replace all instances of searchfor"}]},{"label":"stripCRLF","comment":"Strips Carriage Returns and Line Feeds from a string and returns the result as a new string. \n\t\t\nNOTE: This is a convenience wrapper for replaceCRLF(source$, ||) ","valuetype":"String","filenamebase":"stripCRLF_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"stripCRLF","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function stripCRLF(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Strips Carriage Returns and Line Feeds from a string and returns the result as a new string. &lt;br /&gt;\t\t&lt;br /&gt;NOTE: This is a convenience wrapper for replaceCRLF(source$, ||) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Strips Carriage Returns and Line Feeds from a string and returns the result as a new string. &lt;br /&gt;\t\t&lt;br /&gt;NOTE: This is a convenience wrapper for replaceCRLF(source$, ||) ","inlinecomment":" \t &apos; Strips Carriage Returns and Line Feeds from a string and returns the result as a new string. \n\t\t\nNOTE: This is a convenience wrapper for replaceCRLF(source$, ||) ","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which Carriage Returns and Line Feeds should be removed.","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripCRLF","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which Carriage Returns and Line Feeds should be removed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which Carriage Returns and Line Feeds should be removed.","inlinecomment":" \t &apos; String from which Carriage Returns and Line Feeds should be removed."}]},{"label":"stripFirstSubstr","comment":"Strips the first substring from a string and returns the result","valuetype":"String","filenamebase":"stripFirstSubstr_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"stripFirstSubstr","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, searchfor As String)","signature":"Public Function stripFirstSubstr(source As String, searchfor As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Strips the first substring from a string and returns the result&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Strips the first substring from a string and returns the result","inlinecomment":" \t &apos; Strips the first substring from a string and returns the result","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String within which to search ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripFirstSubstr","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String within which to search &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String within which to search ","inlinecomment":" \t &apos; String within which to search "},{"label":"searchfor","comment":"String to search for within source","valuetype":"String","filenamebase":"searchfor_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripFirstSubstr","qn":"searchfor","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to search for within source&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to search for within source","inlinecomment":" \t &apos; String to search for within source"}]},{"label":"stripHT","comment":"Strips Tabs from a string and returns the result as a new string. \n\t\t\nNOTE: This is a convenience wrapper for replaceHT(source$, ||)","valuetype":"String","filenamebase":"stripHT_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"stripHT","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function stripHT(source As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Strips Tabs from a string and returns the result as a new string. &lt;br /&gt;\t\t&lt;br /&gt;NOTE: This is a convenience wrapper for replaceHT(source$, ||)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Strips Tabs from a string and returns the result as a new string. &lt;br /&gt;\t\t&lt;br /&gt;NOTE: This is a convenience wrapper for replaceHT(source$, ||)","inlinecomment":" \t &apos; Strips Tabs from a string and returns the result as a new string. \n\t\t\nNOTE: This is a convenience wrapper for replaceHT(source$, ||)","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String from which Tabs should be removed. ","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripHT","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String from which Tabs should be removed. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String from which Tabs should be removed. ","inlinecomment":" \t &apos; String from which Tabs should be removed. "}]},{"label":"stripHTML","comment":"Replaces all html tags from a string","valuetype":"String","filenamebase":"stripHTML_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"stripHTML","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, stripOrphans As Boolean)","signature":"Public Function stripHTML(source As String, stripOrphans As Boolean) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces all html tags from a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces all html tags from a string","inlinecomment":" \t &apos; Replaces all html tags from a string","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String within which to search","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripHTML","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String within which to search&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String within which to search","inlinecomment":" \t &apos; String within which to search"},{"label":"stripOrphans","comment":"Flag indicating if Orphan HTML tags should also be stripped","valuetype":"Boolean","filenamebase":"stripOrphans_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsstripHTML","qn":"stripOrphans","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if Orphan HTML tags should also be stripped&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if Orphan HTML tags should also be stripped","inlinecomment":" \t &apos; Flag indicating if Orphan HTML tags should also be stripped"}]},{"label":"New","comment":"","valuetype":"BaliStrings","filenamebase":"New_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"shellSortStrings","comment":"Performs a &amp;quot;divide and conquer&amp;quot; sort of a String Array, based on an insertion sort algorithm.","valuetype":"","filenamebase":"shellSortStrings_Method","fqnprefix":"VSID.baliStrings.BaliStrings","qn":"shellSortStrings","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Sub shellSortStrings(source As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a &amp;quot;divide and conquer&amp;quot; sort of a String Array, based on an insertion sort algorithm.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a &amp;quot;divide and conquer&amp;quot; sort of a String Array, based on an insertion sort algorithm.","inlinecomment":" \t &apos; Performs a &amp;quot;divide and conquer&amp;quot; sort of a String Array, based on an insertion sort algorithm.","parentclassname":"BaliStrings","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"Array of Strings to be sorted.  This is an IN-OUT argument, passed by reference.","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliStringsBaliStringsshellSortStrings","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of Strings to be sorted.  This is an IN-OUT argument, passed by reference.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of Strings to be sorted.  This is an IN-OUT argument, passed by reference.","inlinecomment":" \t &apos; Array of Strings to be sorted.  This is an IN-OUT argument, passed by reference."}]}]}]}
