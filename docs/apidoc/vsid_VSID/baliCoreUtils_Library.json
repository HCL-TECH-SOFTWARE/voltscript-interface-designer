{"label":"baliCoreUtils","comment":"Core utilities Library\n\n\tCreated May 2022 by Devin Olson/USA/PNPHCL\n\tIncludes enhancements and methods from Rocky Oliver/USA/PNPHCL","valuetype":"","filenamebase":"baliCoreUtils_Library","fqnprefix":"VSID","qn":"baliCoreUtils","codesample":"","signaturecode":65536,"instancecode":65536,"description":"","codesamplehtml":"","scriptcreator":"Devin Olson","signature":"Library baliCoreUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Core utilities Library&lt;br /&gt;&lt;br /&gt;\tCreated May 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tIncludes enhancements and methods from Rocky Oliver/USA/PNPHCL&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Core utilities Library&lt;br /&gt;&lt;br /&gt;\tCreated May 2022 by Devin Olson/USA/PNPHCL&lt;br /&gt;\tIncludes enhancements and methods from Rocky Oliver/USA/PNPHCL","inlinecomment":" \t &apos; Core utilities Library\n\n\tCreated May 2022 by Devin Olson/USA/PNPHCL\n\tIncludes enhancements and methods from Rocky Oliver/USA/PNPHCL", "methods":[{"label":"columnValStr","comment":"One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.\n\t\t\nThis little function takes the column value, and makes sure to always return it as a string, no matter what.","valuetype":"String","filenamebase":"columnValStr_Method","fqnprefix":"VSID.baliCoreUtils","qn":"columnValStr","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(doc As NotesDocument, colnum As Integer)","signature":"Public Function columnValStr(doc As NotesDocument, colnum As Integer) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.&lt;br /&gt;\t\t&lt;br /&gt;This little function takes the column value, and makes sure to always return it as a string, no matter what.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.&lt;br /&gt;\t\t&lt;br /&gt;This little function takes the column value, and makes sure to always return it as a string, no matter what.","inlinecomment":" \t &apos; One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.\n\t\t\nThis little function takes the column value, and makes sure to always return it as a string, no matter what.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"doc","comment":"","valuetype":"NotesDocument","filenamebase":"doc_ValuedElement","fqnprefix":"VSIDbaliCoreUtilscolumnValStr","qn":"doc","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"colnum","comment":"","valuetype":"Integer","filenamebase":"colnum_ValuedElement","fqnprefix":"VSIDbaliCoreUtilscolumnValStr","qn":"colnum","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"columValArray","comment":"One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.\n\t\t\nThis little function takes the column value, and makes sure to always return it as an array, no matter what.","valuetype":"Variant","filenamebase":"columValArray_Method","fqnprefix":"VSID.baliCoreUtils","qn":"columValArray","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(doc As NotesDocument, colnum As Integer)","signature":"Public Function columValArray(doc As NotesDocument, colnum As Integer) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.&lt;br /&gt;\t\t&lt;br /&gt;This little function takes the column value, and makes sure to always return it as an array, no matter what.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.&lt;br /&gt;\t\t&lt;br /&gt;This little function takes the column value, and makes sure to always return it as an array, no matter what.","inlinecomment":" \t &apos; One annoying trait of the NotesDocument.columnValues property is that it can return either a scalar or an array. This is annoying, and introduces a potential failure point if you aren&amp;apos;t studious enough to make sure you fix this every time you use the columnValues property.\n\t\t\nThis little function takes the column value, and makes sure to always return it as an array, no matter what.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"doc","comment":"","valuetype":"NotesDocument","filenamebase":"doc_ValuedElement","fqnprefix":"VSIDbaliCoreUtilscolumValArray","qn":"doc","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"colnum","comment":"","valuetype":"Integer","filenamebase":"colnum_ValuedElement","fqnprefix":"VSIDbaliCoreUtilscolumValArray","qn":"colnum","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"fileExists","comment":"Checks to see if a file exists.","valuetype":"Boolean","filenamebase":"fileExists_Method","fqnprefix":"VSID.baliCoreUtils","qn":"fileExists","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(filepath As String)","signature":"Public Function fileExists(filepath As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks to see if a file exists.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks to see if a file exists.","inlinecomment":" \t &apos; Checks to see if a file exists.","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"filepath","comment":"filepath to check for existence. ","valuetype":"String","filenamebase":"filepath_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsfileExists","qn":"filepath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;filepath to check for existence. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"filepath to check for existence. ","inlinecomment":" \t &apos; filepath to check for existence. "}]},{"label":"getElementCount","comment":"Gets the number of elements in a list or array","valuetype":"Long","filenamebase":"getElementCount_Method","fqnprefix":"VSID.baliCoreUtils","qn":"getElementCount","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function getElementCount(source As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the number of elements in a list or array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the number of elements in a list or array","inlinecomment":" \t &apos; Gets the number of elements in a list or array","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsgetElementCount","qn":"source","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"getListSize","comment":"Gets the size number of elements in a list","valuetype":"Long","filenamebase":"getListSize_Method","fqnprefix":"VSID.baliCoreUtils","qn":"getListSize","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function getListSize(source As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the size number of elements in a list&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the size number of elements in a list","inlinecomment":" \t &apos; Gets the size number of elements in a list","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsgetListSize","qn":"source","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"getListTags","comment":"Gets the listTags for a list ","valuetype":"Variant","filenamebase":"getListTags_Method","fqnprefix":"VSID.baliCoreUtils","qn":"getListTags","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function getListTags(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the listTags for a list &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the listTags for a list ","inlinecomment":" \t &apos; Gets the listTags for a list ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"List object from which to get the list tags ","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsgetListTags","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;List object from which to get the list tags &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"List object from which to get the list tags ","inlinecomment":" \t &apos; List object from which to get the list tags "}]},{"label":"getScalar","comment":"Gets the scalar value of a variable. \n \nIf an array or a list gets the first value.  ","valuetype":"Variant","filenamebase":"getScalar_Method","fqnprefix":"VSID.baliCoreUtils","qn":"getScalar","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function getScalar(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the scalar value of a variable. &lt;br /&gt; &lt;br /&gt;If an array or a list gets the first value.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the scalar value of a variable. &lt;br /&gt; &lt;br /&gt;If an array or a list gets the first value.  ","inlinecomment":" \t &apos; Gets the scalar value of a variable. \n \nIf an array or a list gets the first value.  ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variable from which to get the scalar value. ","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsgetScalar","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Variable from which to get the scalar value. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Variable from which to get the scalar value. ","inlinecomment":" \t &apos; Variable from which to get the scalar value. "}]},{"label":"isBlankString","comment":"Tests a string for &amp;quot;blankness&amp;quot;  \n \nWhitespace is counts a blank  ","valuetype":"Boolean","filenamebase":"isBlankString_Method","fqnprefix":"VSID.baliCoreUtils","qn":"isBlankString","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String)","signature":"Public Function isBlankString(source As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a string for &amp;quot;blankness&amp;quot;  &lt;br /&gt; &lt;br /&gt;Whitespace is counts a blank  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a string for &amp;quot;blankness&amp;quot;  &lt;br /&gt; &lt;br /&gt;Whitespace is counts a blank  ","inlinecomment":" \t &apos; Tests a string for &amp;quot;blankness&amp;quot;  \n \nWhitespace is counts a blank  ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String to test","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsisBlankString","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to test&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to test","inlinecomment":" \t &apos; String to test"}]},{"label":"isEven","comment":"Tests and integer to determine if it is evenly divisible by 2 ","valuetype":"Boolean","filenamebase":"isEven_Method","fqnprefix":"VSID.baliCoreUtils","qn":"isEven","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Integer)","signature":"Public Function isEven(source As Integer) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests and integer to determine if it is evenly divisible by 2 &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests and integer to determine if it is evenly divisible by 2 ","inlinecomment":" \t &apos; Tests and integer to determine if it is evenly divisible by 2 ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Integer value to test","valuetype":"Integer","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsisEven","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Integer value to test&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Integer value to test","inlinecomment":" \t &apos; Integer value to test"}]},{"label":"isTrue","comment":"Tests a variable to see if it represents a True value.  \n  \nThe following are considered True values: 1, &amp;quot;true&amp;quot;, &amp;quot;yes&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;enabled&amp;quot;","valuetype":"Boolean","filenamebase":"isTrue_Method","fqnprefix":"VSID.baliCoreUtils","qn":"isTrue","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function isTrue(source As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Tests a variable to see if it represents a True value.  &lt;br /&gt;  &lt;br /&gt;The following are considered True values: 1, &amp;quot;true&amp;quot;, &amp;quot;yes&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;enabled&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Tests a variable to see if it represents a True value.  &lt;br /&gt;  &lt;br /&gt;The following are considered True values: 1, &amp;quot;true&amp;quot;, &amp;quot;yes&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;enabled&amp;quot;","inlinecomment":" \t &apos; Tests a variable to see if it represents a True value.  \n  \nThe following are considered True values: 1, &amp;quot;true&amp;quot;, &amp;quot;yes&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;enabled&amp;quot;","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant that can be interpreted as either a true or a false value.\n  \nTests the scalar value of source.  ","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsisTrue","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Variant that can be interpreted as either a true or a false value.&lt;br /&gt;  &lt;br /&gt;Tests the scalar value of source.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Variant that can be interpreted as either a true or a false value.&lt;br /&gt;  &lt;br /&gt;Tests the scalar value of source.  ","inlinecomment":" \t &apos; Variant that can be interpreted as either a true or a false value.\n  \nTests the scalar value of source.  "}]},{"label":"makeDirectory","comment":"Conditionally attempts to create a directory in the filesystem.\n\t\nChecks for the existence of a directory and if it does not exist attempts to create it. ","valuetype":"Boolean","filenamebase":"makeDirectory_Method","fqnprefix":"VSID.baliCoreUtils","qn":"makeDirectory","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(target As String)","signature":"Public Function makeDirectory(target As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Conditionally attempts to create a directory in the filesystem.&lt;br /&gt;\t&lt;br /&gt;Checks for the existence of a directory and if it does not exist attempts to create it. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Conditionally attempts to create a directory in the filesystem.&lt;br /&gt;\t&lt;br /&gt;Checks for the existence of a directory and if it does not exist attempts to create it. ","inlinecomment":" \t &apos; Conditionally attempts to create a directory in the filesystem.\n\t\nChecks for the existence of a directory and if it does not exist attempts to create it. ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"target","comment":"Directory to create. ","valuetype":"String","filenamebase":"target_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsmakeDirectory","qn":"target","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory to create. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory to create. ","inlinecomment":" \t &apos; Directory to create. "}]},{"label":"sortArray","comment":"\tSortArray(sArray As Variant, orderflag As String) As Boolean\n\t\t&amp;gt;&amp;gt; Sorts the provided array in either ascending or descending order,\n\t\t   based on the order flag: A sorts ascending, D sorts descending.\n\t\t   It is also optimized to use a Bubble sort for smaller arrays, \n\t\t   and an Insertion Sort for larger arrays.\n\t\t&amp;gt;&amp;gt; This function uses four private subs to do the &amp;quot;work&amp;quot;: \n\t\t\t-- DoQS_A == Quick, or Bubble Sort - ascending;\n\t\t\t-- DoQS_D == Quick, or Bubble Sort - descending;\n\t\t\t-- DoInsertSort_A == Insertion Sort, ascending;\n\t\t\t-- DoInsertSort_D == Insertion Sort - descending;\n\t\t\t\n\tOriginal QuickSort function written by Richard Dickinson, and used with permission.\n\tModified by Rocky Oliver (Sapphire Oak Technologies) to optimize code and add descending choice","valuetype":"Boolean","filenamebase":"sortArray_Method","fqnprefix":"VSID.baliCoreUtils","qn":"sortArray","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(sArray As Variant, orderflag As String)","signature":"Public Function sortArray(sArray As Variant, orderflag As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;\tSortArray(sArray As Variant, orderflag As String) As Boolean&lt;br /&gt;\t\t&amp;gt;&amp;gt; Sorts the provided array in either ascending or descending order,&lt;br /&gt;\t\t   based on the order flag: A sorts ascending, D sorts descending.&lt;br /&gt;\t\t   It is also optimized to use a Bubble sort for smaller arrays, &lt;br /&gt;\t\t   and an Insertion Sort for larger arrays.&lt;br /&gt;\t\t&amp;gt;&amp;gt; This function uses four private subs to do the &amp;quot;work&amp;quot;: &lt;br /&gt;\t\t\t-- DoQS_A == Quick, or Bubble Sort - ascending;&lt;br /&gt;\t\t\t-- DoQS_D == Quick, or Bubble Sort - descending;&lt;br /&gt;\t\t\t-- DoInsertSort_A == Insertion Sort, ascending;&lt;br /&gt;\t\t\t-- DoInsertSort_D == Insertion Sort - descending;&lt;br /&gt;\t\t\t&lt;br /&gt;\tOriginal QuickSort function written by Richard Dickinson, and used with permission.&lt;br /&gt;\tModified by Rocky Oliver (Sapphire Oak Technologies) to optimize code and add descending choice&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"\tSortArray(sArray As Variant, orderflag As String) As Boolean&lt;br /&gt;\t\t&amp;gt;&amp;gt; Sorts the provided array in either ascending or descending order,&lt;br /&gt;\t\t   based on the order flag: A sorts ascending, D sorts descending.&lt;br /&gt;\t\t   It is also optimized to use a Bubble sort for smaller arrays, &lt;br /&gt;\t\t   and an Insertion Sort for larger arrays.&lt;br /&gt;\t\t&amp;gt;&amp;gt; This function uses four private subs to do the &amp;quot;work&amp;quot;: &lt;br /&gt;\t\t\t-- DoQS_A == Quick, or Bubble Sort - ascending;&lt;br /&gt;\t\t\t-- DoQS_D == Quick, or Bubble Sort - descending;&lt;br /&gt;\t\t\t-- DoInsertSort_A == Insertion Sort, ascending;&lt;br /&gt;\t\t\t-- DoInsertSort_D == Insertion Sort - descending;&lt;br /&gt;\t\t\t&lt;br /&gt;\tOriginal QuickSort function written by Richard Dickinson, and used with permission.&lt;br /&gt;\tModified by Rocky Oliver (Sapphire Oak Technologies) to optimize code and add descending choice","inlinecomment":" \t &apos; \tSortArray(sArray As Variant, orderflag As String) As Boolean\n\t\t&amp;gt;&amp;gt; Sorts the provided array in either ascending or descending order,\n\t\t   based on the order flag: A sorts ascending, D sorts descending.\n\t\t   It is also optimized to use a Bubble sort for smaller arrays, \n\t\t   and an Insertion Sort for larger arrays.\n\t\t&amp;gt;&amp;gt; This function uses four private subs to do the &amp;quot;work&amp;quot;: \n\t\t\t-- DoQS_A == Quick, or Bubble Sort - ascending;\n\t\t\t-- DoQS_D == Quick, or Bubble Sort - descending;\n\t\t\t-- DoInsertSort_A == Insertion Sort, ascending;\n\t\t\t-- DoInsertSort_D == Insertion Sort - descending;\n\t\t\t\n\tOriginal QuickSort function written by Richard Dickinson, and used with permission.\n\tModified by Rocky Oliver (Sapphire Oak Technologies) to optimize code and add descending choice","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"sArray","comment":"Array to be sorted","valuetype":"Variant","filenamebase":"sArray_ValuedElement","fqnprefix":"VSIDbaliCoreUtilssortArray","qn":"sArray","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array to be sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array to be sorted","inlinecomment":" \t &apos; Array to be sorted"},{"label":"orderflag","comment":"A sorts ascending, D sorts descending.","valuetype":"String","filenamebase":"orderflag_ValuedElement","fqnprefix":"VSIDbaliCoreUtilssortArray","qn":"orderflag","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A sorts ascending, D sorts descending.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A sorts ascending, D sorts descending.","inlinecomment":" \t &apos; A sorts ascending, D sorts descending."}]},{"label":"strCmp","comment":"Shorthand method for a Case Insensitive, Pitch insensitive StrCompare call. \n  Flag = (0 = strCompare(string1, string2, 5))  ","valuetype":"Boolean","filenamebase":"strCmp_Method","fqnprefix":"VSID.baliCoreUtils","qn":"strCmp","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(string1 As String, string2 As String)","signature":"Public Function strCmp(string1 As String, string2 As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Shorthand method for a Case Insensitive, Pitch insensitive StrCompare call. &lt;br /&gt;  Flag = (0 = strCompare(string1, string2, 5))  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Shorthand method for a Case Insensitive, Pitch insensitive StrCompare call. &lt;br /&gt;  Flag = (0 = strCompare(string1, string2, 5))  ","inlinecomment":" \t &apos; Shorthand method for a Case Insensitive, Pitch insensitive StrCompare call. \n  Flag = (0 = strCompare(string1, string2, 5))  ","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"string1","comment":"Any String expression","valuetype":"String","filenamebase":"string1_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsstrCmp","qn":"string1","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Any String expression&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Any String expression","inlinecomment":" \t &apos; Any String expression", "attributes":["ByVal"]},{"label":"string2","comment":"Any String expression","valuetype":"String","filenamebase":"string2_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsstrCmp","qn":"string2","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Any String expression&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Any String expression","inlinecomment":" \t &apos; Any String expression", "attributes":["ByVal"]}]},{"label":"writeTextFile","comment":"\tWrites text to a file.\n\t\n\tIMPORTANT NOTE: Existing files will be OVERWRITTEN!  It is up to the calling code to pre-check for existence of file.\n\t","valuetype":"Long","filenamebase":"writeTextFile_Method","fqnprefix":"VSID.baliCoreUtils","qn":"writeTextFile","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As String, target As String)","signature":"Public Function writeTextFile(source As String, target As String) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;\tWrites text to a file.&lt;br /&gt;\t&lt;br /&gt;\tIMPORTANT NOTE: Existing files will be OVERWRITTEN!  It is up to the calling code to pre-check for existence of file.&lt;br /&gt;\t&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"\tWrites text to a file.&lt;br /&gt;\t&lt;br /&gt;\tIMPORTANT NOTE: Existing files will be OVERWRITTEN!  It is up to the calling code to pre-check for existence of file.&lt;br /&gt;\t","inlinecomment":" \t &apos; \tWrites text to a file.\n\t\n\tIMPORTANT NOTE: Existing files will be OVERWRITTEN!  It is up to the calling code to pre-check for existence of file.\n\t","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Text to be written to a file.","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilswriteTextFile","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Text to be written to a file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Text to be written to a file.","inlinecomment":" \t &apos; Text to be written to a file."},{"label":"target","comment":"Filepath of file to be written. ","valuetype":"String","filenamebase":"target_ValuedElement","fqnprefix":"VSIDbaliCoreUtilswriteTextFile","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filepath of file to be written. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filepath of file to be written. ","inlinecomment":" \t &apos; Filepath of file to be written. "}]},{"label":"DIRECTORY_DELIMITER","comment":"Returns the appropriate Directory Delimiter for the current Operating System. \n \nChecks the current directory in order to determine the DIRECTORY_DELIMITER. ","valuetype":"String","filenamebase":"DIRECTORYDELIMITER_Method","fqnprefix":"VSID.baliCoreUtils","qn":"Get.DIRECTORYDELIMITER","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get DIRECTORY_DELIMITER As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the appropriate Directory Delimiter for the current Operating System. &lt;br /&gt; &lt;br /&gt;Checks the current directory in order to determine the DIRECTORY_DELIMITER. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the appropriate Directory Delimiter for the current Operating System. &lt;br /&gt; &lt;br /&gt;Checks the current directory in order to determine the DIRECTORY_DELIMITER. ","inlinecomment":" \t &apos; Returns the appropriate Directory Delimiter for the current Operating System. \n \nChecks the current directory in order to determine the DIRECTORY_DELIMITER. ","codesamplehtml":"", "attributes":["READ_ONLY","Static"], "signatureelements":["Public","Property","Get"]},{"label":"shellSortIntegers","comment":"Performs a &amp;quot;divide and conquer&amp;quot; sort of a Integer Array, based on an insertion sort algorithm.","valuetype":"","filenamebase":"shellSortIntegers_Method","fqnprefix":"VSID.baliCoreUtils","qn":"shellSortIntegers","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Sub shellSortIntegers(source As Variant)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a &amp;quot;divide and conquer&amp;quot; sort of a Integer Array, based on an insertion sort algorithm.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a &amp;quot;divide and conquer&amp;quot; sort of a Integer Array, based on an insertion sort algorithm.","inlinecomment":" \t &apos; Performs a &amp;quot;divide and conquer&amp;quot; sort of a Integer Array, based on an insertion sort algorithm.","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"Array of Integers to be sorted.  This is an IN-OUT argument, passed by reference.","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsshellSortIntegers","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of Integers to be sorted.  This is an IN-OUT argument, passed by reference.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of Integers to be sorted.  This is an IN-OUT argument, passed by reference.","inlinecomment":" \t &apos; Array of Integers to be sorted.  This is an IN-OUT argument, passed by reference."}]},{"label":"trimString","comment":"\tRemoves leading and trailing spaces from a string.\n\t\n\tPattern replacement for mystring$ = Trim$(mystring$)","valuetype":"","filenamebase":"trimString_Method","fqnprefix":"VSID.baliCoreUtils","qn":"trimString","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(target As String)","signature":"Public Sub trimString(target As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;\tRemoves leading and trailing spaces from a string.&lt;br /&gt;\t&lt;br /&gt;\tPattern replacement for mystring$ = Trim$(mystring$)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"\tRemoves leading and trailing spaces from a string.&lt;br /&gt;\t&lt;br /&gt;\tPattern replacement for mystring$ = Trim$(mystring$)","inlinecomment":" \t &apos; \tRemoves leading and trailing spaces from a string.\n\t\n\tPattern replacement for mystring$ = Trim$(mystring$)","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"target","comment":"String to be trimmed","valuetype":"String","filenamebase":"target_ValuedElement","fqnprefix":"VSIDbaliCoreUtilstrimString","qn":"target","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to be trimmed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to be trimmed","inlinecomment":" \t &apos; String to be trimmed"}]}], "classes":[{"classname":"IntegerPair","comment":"Carrier for a pair of Integers","valuetype":"","filenamebase":"IntegerPair_ObjectClass","fqnprefix":"VSID.baliCoreUtils","qn":"IntegerPair","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"F069BE8FA3A3635985258ADD00597A1A","classid":"31613DEDD01030E085258ADD005B7DC0","signature":"Public Class IntegerPair","modifiers":"Public","classname":"IntegerPair","parentclassname":"None","constructorsignature":"Public Sub New(first As Integer, last As Integer)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Carrier for a pair of Integers&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Carrier for a pair of Integers","inlinecomment":" \t &apos; Carrier for a pair of Integers","codesamplehtml":"", "methods":[{"label":"First","comment":"First integer of the pair","valuetype":"Integer","filenamebase":"First_Method","fqnprefix":"VSID.baliCoreUtils.IntegerPair","qn":"Get.First","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get First As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;First integer of the pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"First integer of the pair","inlinecomment":" \t &apos; First integer of the pair","parentclassname":"IntegerPair","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"Last","comment":"Last integer of the pair","valuetype":"Integer","filenamebase":"Last_Method","fqnprefix":"VSID.baliCoreUtils.IntegerPair","qn":"Get.Last","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get Last As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Last integer of the pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Last integer of the pair","inlinecomment":" \t &apos; Last integer of the pair","parentclassname":"IntegerPair","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VSID.baliCoreUtils.IntegerPair","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(first As Integer, last As Integer)","signature":"Public Sub New(first As Integer, last As Integer)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"IntegerPair","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"first","comment":"First integer of the pair","valuetype":"Integer","filenamebase":"first_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsIntegerPairNew","qn":"first","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;First integer of the pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"First integer of the pair","inlinecomment":" \t &apos; First integer of the pair"},{"label":"last","comment":"Last integer of the pair","valuetype":"Integer","filenamebase":"last_ValuedElement","fqnprefix":"VSIDbaliCoreUtilsIntegerPairNew","qn":"last","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Last integer of the pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Last integer of the pair","inlinecomment":" \t &apos; Last integer of the pair"}]}]}]}
